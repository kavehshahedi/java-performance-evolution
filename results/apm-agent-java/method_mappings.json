{
    "965c6567186b91c179314570270ebff62a46f130": [
        {
            "commit_message": "Fix security manager issues (#2871)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isDebugEnabled()",
            "method_name_cc": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isDebugEnabled()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/Log4j2LoggerBridge.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isDebugEnabled()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isDebugEnabled()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/Log4j2LoggerBridge.java",
            "previous_commit": "50bb1f1632da89c5d4f029e7d7b48a8d4d45c5ef",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.5974025974025974,
                "p_value": 0.0,
                "effect_size": 0.0815765145612507,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 39539229,
                    "after": 42445113
                }
            }
        },
        {
            "commit_message": "Fix security manager issues (#2871)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isTraceEnabled()",
            "method_name_cc": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isTraceEnabled()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/Log4j2LoggerBridge.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isTraceEnabled()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isTraceEnabled()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/Log4j2LoggerBridge.java",
            "previous_commit": "50bb1f1632da89c5d4f029e7d7b48a8d4d45c5ef",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -3.7037037037037033,
                "p_value": 0.0,
                "effect_size": 0.1493150557337763,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1589305,
                    "after": 1716246
                }
            }
        },
        {
            "commit_message": "Fix security manager issues (#2871)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isInfoEnabled()",
            "method_name_cc": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isInfoEnabled()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/Log4j2LoggerBridge.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isInfoEnabled()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.logging.Log4j2LoggerBridge.isInfoEnabled()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/logging/Log4j2LoggerBridge.java",
            "previous_commit": "50bb1f1632da89c5d4f029e7d7b48a8d4d45c5ef",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.9987105093488073,
                "p_value": 0.0,
                "effect_size": 0.1354804978988448,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1573551,
                    "after": 1691763
                }
            }
        }
    ],
    "3365a0e47948355de849535f70120a23115ecacf": [
        {
            "commit_message": "Replace/extend resource dest. with service target.{name.type} (#2578)\n\n* add Service context\r\n\r\n* simpler and less generic design\r\n\r\n* fix resource dest tests\r\n\r\n* use new API in jdbc plugin\r\n\r\n* add custom assertions for service target\r\n\r\n* add service target+tests\r\n\r\n* migrate to new API + tests with new API/assert\r\n\r\n* simplify & cleanup WIP\r\n\r\n* fix small json serialization\r\n\r\n* migrate compressed spans\r\n\r\n* migrate dropped spans stats\r\n\r\n* remove Destination.Service\r\n\r\n* add assert for http exit spans\r\n\r\n* update json test\r\n\r\n* add assertions on destination + update API tests\r\n\r\n* add few tests+only use resource as fallback\r\n\r\n* fix service name json serialization\r\n\r\n* fix http host for OTel bridge\r\n\r\n* align otel gherkin spec\r\n\r\n* simplify otel mapping for service target\r\n\r\n* slightly enhance ServiceTarget API + grpc\r\n\r\n* small javadoc update\r\n\r\n* add entry point to API + user override\r\n\r\n* fix javadoc\r\n\r\n* fix merge issues + cleanup\r\n\r\n* simplify OTel spec mapping for corner case\r\n\r\n* document new API\r\n\r\n* fix mongo db name\r\n\r\n* fix json serialization\r\n\r\n* fix few other corner cases\r\n\r\n* slightly better deprecated API compat.\r\n\r\n* post-review changes\r\n\r\n* use stringbuilder copy in dropped stats\r\n\r\n* fix missing copyright notice\r\n\r\n* fix NPE in tests\r\n\r\n* deprecate old API + remove it from docs\r\n\r\n* fix doc links\r\n\r\n* keep check on legacy resource for consistency\r\n\r\n* improve test assertions\r\n\r\n* test expected resource\r\n\r\n* fix typo\r\n\r\n* update changelog\r\n\r\n* post-review perf improvement\r\n\r\n* fix minor post-review\r\n\r\n* enhance and split test for clarity\r\n\r\n* improve dropped spans tests\r\n\r\n* remove todo",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Span.beforeEnd(long)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Span.beforeEnd(long epochMicros)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Span.beforeEnd(long epochMicros)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Span.beforeEnd(long)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "d61db968c151b1acab77f40a26848bb8a366970a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.1363636363636365,
                "p_value": 0.0,
                "effect_size": -0.024430542317885082,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6461469,
                    "after": 5843650
                }
            }
        },
        {
            "commit_message": "Replace/extend resource dest. with service target.{name.type} (#2578)\n\n* add Service context\r\n\r\n* simpler and less generic design\r\n\r\n* fix resource dest tests\r\n\r\n* use new API in jdbc plugin\r\n\r\n* add custom assertions for service target\r\n\r\n* add service target+tests\r\n\r\n* migrate to new API + tests with new API/assert\r\n\r\n* simplify & cleanup WIP\r\n\r\n* fix small json serialization\r\n\r\n* migrate compressed spans\r\n\r\n* migrate dropped spans stats\r\n\r\n* remove Destination.Service\r\n\r\n* add assert for http exit spans\r\n\r\n* update json test\r\n\r\n* add assertions on destination + update API tests\r\n\r\n* add few tests+only use resource as fallback\r\n\r\n* fix service name json serialization\r\n\r\n* fix http host for OTel bridge\r\n\r\n* align otel gherkin spec\r\n\r\n* simplify otel mapping for service target\r\n\r\n* slightly enhance ServiceTarget API + grpc\r\n\r\n* small javadoc update\r\n\r\n* add entry point to API + user override\r\n\r\n* fix javadoc\r\n\r\n* fix merge issues + cleanup\r\n\r\n* simplify OTel spec mapping for corner case\r\n\r\n* document new API\r\n\r\n* fix mongo db name\r\n\r\n* fix json serialization\r\n\r\n* fix few other corner cases\r\n\r\n* slightly better deprecated API compat.\r\n\r\n* post-review changes\r\n\r\n* use stringbuilder copy in dropped stats\r\n\r\n* fix missing copyright notice\r\n\r\n* fix NPE in tests\r\n\r\n* deprecate old API + remove it from docs\r\n\r\n* fix doc links\r\n\r\n* keep check on legacy resource for consistency\r\n\r\n* improve test assertions\r\n\r\n* test expected resource\r\n\r\n* fix typo\r\n\r\n* update changelog\r\n\r\n* post-review perf improvement\r\n\r\n* fix minor post-review\r\n\r\n* enhance and split test for clarity\r\n\r\n* improve dropped spans tests\r\n\r\n* remove todo",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_commit": "d61db968c151b1acab77f40a26848bb8a366970a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.7333333333333333,
                "p_value": 0.0,
                "effect_size": -0.031237048962351372,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6909380,
                    "after": 6299768
                }
            }
        },
        {
            "commit_message": "Replace/extend resource dest. with service target.{name.type} (#2578)\n\n* add Service context\r\n\r\n* simpler and less generic design\r\n\r\n* fix resource dest tests\r\n\r\n* use new API in jdbc plugin\r\n\r\n* add custom assertions for service target\r\n\r\n* add service target+tests\r\n\r\n* migrate to new API + tests with new API/assert\r\n\r\n* simplify & cleanup WIP\r\n\r\n* fix small json serialization\r\n\r\n* migrate compressed spans\r\n\r\n* migrate dropped spans stats\r\n\r\n* remove Destination.Service\r\n\r\n* add assert for http exit spans\r\n\r\n* update json test\r\n\r\n* add assertions on destination + update API tests\r\n\r\n* add few tests+only use resource as fallback\r\n\r\n* fix service name json serialization\r\n\r\n* fix http host for OTel bridge\r\n\r\n* align otel gherkin spec\r\n\r\n* simplify otel mapping for service target\r\n\r\n* slightly enhance ServiceTarget API + grpc\r\n\r\n* small javadoc update\r\n\r\n* add entry point to API + user override\r\n\r\n* fix javadoc\r\n\r\n* fix merge issues + cleanup\r\n\r\n* simplify OTel spec mapping for corner case\r\n\r\n* document new API\r\n\r\n* fix mongo db name\r\n\r\n* fix json serialization\r\n\r\n* fix few other corner cases\r\n\r\n* slightly better deprecated API compat.\r\n\r\n* post-review changes\r\n\r\n* use stringbuilder copy in dropped stats\r\n\r\n* fix missing copyright notice\r\n\r\n* fix NPE in tests\r\n\r\n* deprecate old API + remove it from docs\r\n\r\n* fix doc links\r\n\r\n* keep check on legacy resource for consistency\r\n\r\n* improve test assertions\r\n\r\n* test expected resource\r\n\r\n* fix typo\r\n\r\n* update changelog\r\n\r\n* post-review perf improvement\r\n\r\n* fix minor post-review\r\n\r\n* enhance and split test for clarity\r\n\r\n* improve dropped spans tests\r\n\r\n* remove todo",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.impl.context.Destination.hasContent()",
            "method_name_cc": "public boolean co.elastic.apm.agent.impl.context.Destination.hasContent()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.impl.context.Destination.hasContent()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.impl.context.Destination.hasContent()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_commit": "d61db968c151b1acab77f40a26848bb8a366970a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 4.627766599597585,
                "p_value": 0.0,
                "effect_size": -0.16958163676153332,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4017793,
                    "after": 3495346
                }
            }
        },
        {
            "commit_message": "Replace/extend resource dest. with service target.{name.type} (#2578)\n\n* add Service context\r\n\r\n* simpler and less generic design\r\n\r\n* fix resource dest tests\r\n\r\n* use new API in jdbc plugin\r\n\r\n* add custom assertions for service target\r\n\r\n* add service target+tests\r\n\r\n* migrate to new API + tests with new API/assert\r\n\r\n* simplify & cleanup WIP\r\n\r\n* fix small json serialization\r\n\r\n* migrate compressed spans\r\n\r\n* migrate dropped spans stats\r\n\r\n* remove Destination.Service\r\n\r\n* add assert for http exit spans\r\n\r\n* update json test\r\n\r\n* add assertions on destination + update API tests\r\n\r\n* add few tests+only use resource as fallback\r\n\r\n* fix service name json serialization\r\n\r\n* fix http host for OTel bridge\r\n\r\n* align otel gherkin spec\r\n\r\n* simplify otel mapping for service target\r\n\r\n* slightly enhance ServiceTarget API + grpc\r\n\r\n* small javadoc update\r\n\r\n* add entry point to API + user override\r\n\r\n* fix javadoc\r\n\r\n* fix merge issues + cleanup\r\n\r\n* simplify OTel spec mapping for corner case\r\n\r\n* document new API\r\n\r\n* fix mongo db name\r\n\r\n* fix json serialization\r\n\r\n* fix few other corner cases\r\n\r\n* slightly better deprecated API compat.\r\n\r\n* post-review changes\r\n\r\n* use stringbuilder copy in dropped stats\r\n\r\n* fix missing copyright notice\r\n\r\n* fix NPE in tests\r\n\r\n* deprecate old API + remove it from docs\r\n\r\n* fix doc links\r\n\r\n* keep check on legacy resource for consistency\r\n\r\n* improve test assertions\r\n\r\n* test expected resource\r\n\r\n* fix typo\r\n\r\n* update changelog\r\n\r\n* post-review perf improvement\r\n\r\n* fix minor post-review\r\n\r\n* enhance and split test for clarity\r\n\r\n* improve dropped spans tests\r\n\r\n* remove todo",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanContext(co.elastic.apm.agent.impl.context.SpanContext,co.elastic.apm.agent.impl.transaction.TraceContext)",
            "method_name_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanContext(SpanContext context, TraceContext traceContext)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanContext(SpanContext context, TraceContext traceContext)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanContext(co.elastic.apm.agent.impl.context.SpanContext,co.elastic.apm.agent.impl.transaction.TraceContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "d61db968c151b1acab77f40a26848bb8a366970a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 4.9800796812749,
                "p_value": 0.0,
                "effect_size": -0.23552370146812954,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1652404,
                    "after": 1415695
                }
            }
        },
        {
            "commit_message": "Replace/extend resource dest. with service target.{name.type} (#2578)\n\n* add Service context\r\n\r\n* simpler and less generic design\r\n\r\n* fix resource dest tests\r\n\r\n* use new API in jdbc plugin\r\n\r\n* add custom assertions for service target\r\n\r\n* add service target+tests\r\n\r\n* migrate to new API + tests with new API/assert\r\n\r\n* simplify & cleanup WIP\r\n\r\n* fix small json serialization\r\n\r\n* migrate compressed spans\r\n\r\n* migrate dropped spans stats\r\n\r\n* remove Destination.Service\r\n\r\n* add assert for http exit spans\r\n\r\n* update json test\r\n\r\n* add assertions on destination + update API tests\r\n\r\n* add few tests+only use resource as fallback\r\n\r\n* fix service name json serialization\r\n\r\n* fix http host for OTel bridge\r\n\r\n* align otel gherkin spec\r\n\r\n* simplify otel mapping for service target\r\n\r\n* slightly enhance ServiceTarget API + grpc\r\n\r\n* small javadoc update\r\n\r\n* add entry point to API + user override\r\n\r\n* fix javadoc\r\n\r\n* fix merge issues + cleanup\r\n\r\n* simplify OTel spec mapping for corner case\r\n\r\n* document new API\r\n\r\n* fix mongo db name\r\n\r\n* fix json serialization\r\n\r\n* fix few other corner cases\r\n\r\n* slightly better deprecated API compat.\r\n\r\n* post-review changes\r\n\r\n* use stringbuilder copy in dropped stats\r\n\r\n* fix missing copyright notice\r\n\r\n* fix NPE in tests\r\n\r\n* deprecate old API + remove it from docs\r\n\r\n* fix doc links\r\n\r\n* keep check on legacy resource for consistency\r\n\r\n* improve test assertions\r\n\r\n* test expected resource\r\n\r\n* fix typo\r\n\r\n* update changelog\r\n\r\n* post-review perf improvement\r\n\r\n* fix minor post-review\r\n\r\n* enhance and split test for clarity\r\n\r\n* improve dropped spans tests\r\n\r\n* remove todo",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.SpanContext.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_commit": "d61db968c151b1acab77f40a26848bb8a366970a",
            "performance_diff": -0.6824160003742057,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 206.0,
                "p_value": 0.0,
                "effect_size": -0.9981197165380105,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6909380,
                    "after": 3317975
                }
            }
        }
    ],
    "50bb1f1632da89c5d4f029e7d7b48a8d4d45c5ef": [
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(co.elastic.apm.agent.impl.transaction.Span)",
            "method_name_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(Span span)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(Span span)",
            "previous_method_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(co.elastic.apm.agent.impl.transaction.Span)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.5,
                "p_value": 0.0,
                "effect_size": -0.10780024156506335,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7264227,
                    "after": 7122080
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(co.elastic.apm.agent.impl.transaction.Transaction)",
            "method_name_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(Transaction transaction)",
            "previous_method_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(co.elastic.apm.agent.impl.transaction.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 5.405405405405405,
                "p_value": 0.0,
                "effect_size": -0.17912706506979698,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7404109,
                    "after": 7271515
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.report.ReportingEvent$ReportingEventType co.elastic.apm.agent.report.ReportingEvent.getType()",
            "method_name_cc": "public ReportingEventType co.elastic.apm.agent.report.ReportingEvent.getType()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ReportingEvent.java",
            "previous_method_cc": "public ReportingEventType co.elastic.apm.agent.report.ReportingEvent.getType()",
            "previous_method_pd": "public co.elastic.apm.agent.report.ReportingEvent$ReportingEventType co.elastic.apm.agent.report.ReportingEvent.getType()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ReportingEvent.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.9230769230769231,
                "p_value": 0.0,
                "effect_size": -0.10258392437938943,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7616571,
                    "after": 10813512
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.writeEvent(co.elastic.apm.agent.report.ReportingEvent)",
            "method_name_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.writeEvent(ReportingEvent event)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.writeEvent(ReportingEvent event)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.writeEvent(co.elastic.apm.agent.report.ReportingEvent)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.8008266597778351,
                "p_value": 3.0699078452983774e-83,
                "effect_size": 0.008851740134881398,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3312303,
                    "after": 3055573
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.handleIntakeEvent(co.elastic.apm.agent.report.ReportingEvent,long,boolean)",
            "method_name_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.handleIntakeEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.handleIntakeEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.handleIntakeEvent(co.elastic.apm.agent.report.ReportingEvent,long,boolean)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 38.66576819407008,
                "p_value": 0.0,
                "effect_size": -0.9320279107266074,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1252190,
                    "after": 361734
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.dispatchEvent(co.elastic.apm.agent.report.ReportingEvent,long,boolean) throws java.lang.Exception",
            "method_name_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.dispatchEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.dispatchEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.dispatchEvent(co.elastic.apm.agent.report.ReportingEvent,long,boolean) throws java.lang.Exception",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.06265664160401002,
                "p_value": 3.766211076120317e-71,
                "effect_size": 0.05086860559638786,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 69519,
                    "after": 99805
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.onEvent(co.elastic.apm.agent.report.ReportingEvent,long,boolean) throws java.lang.Exception",
            "method_name_cc": "public void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.onEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.onEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "previous_method_pd": "public void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.onEvent(co.elastic.apm.agent.report.ReportingEvent,long,boolean) throws java.lang.Exception",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 15.457728864432216,
                "p_value": 0.0,
                "effect_size": -0.4288004917612099,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 36152,
                    "after": 16660
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(com.dslplatform.json.JsonWriter)",
            "method_name_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(JsonWriter jsonWriter)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(JsonWriter jsonWriter)",
            "previous_method_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(com.dslplatform.json.JsonWriter)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -32.66162801517799,
                "p_value": 0.9046968873203879,
                "effect_size": 0.01875,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 32,
                    "after": 30
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private static boolean co.elastic.apm.agent.report.serialize.MetricRegistrySerializer.serialize(co.elastic.apm.agent.metrics.MetricSet,long,java.lang.String,java.lang.String,java.lang.StringBuilder,com.dslplatform.json.JsonWriter)",
            "method_name_cc": "private static boolean co.elastic.apm.agent.report.serialize.MetricRegistrySerializer.serialize(MetricSet metricSet, long epochMicros, String serviceName, String serviceVersion, StringBuilder replaceBuilder, JsonWriter jw)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/MetricRegistrySerializer.java",
            "previous_method_cc": "private static boolean co.elastic.apm.agent.report.serialize.MetricRegistrySerializer.serialize(MetricSet metricSet, long epochMicros, String serviceName, String serviceVersion, StringBuilder replaceBuilder, JsonWriter jw)",
            "previous_method_pd": "private static boolean co.elastic.apm.agent.report.serialize.MetricRegistrySerializer.serialize(co.elastic.apm.agent.metrics.MetricSet,long,java.lang.String,java.lang.String,java.lang.StringBuilder,com.dslplatform.json.JsonWriter)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/MetricRegistrySerializer.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.25731126728633,
                "p_value": 0.9903073466514666,
                "effect_size": -0.004329004329004329,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 21,
                    "after": 22
                }
            }
        },
        {
            "commit_message": "Added reporter health metrics (#2864)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.metrics.MetricSet.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.metrics.MetricSet.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/MetricSet.java",
            "previous_method_cc": "public void co.elastic.apm.agent.metrics.MetricSet.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.metrics.MetricSet.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/metrics/MetricSet.java",
            "previous_commit": "7a8426fe8b8ab29c42eb57c2a5bd9a6f73ad2a68",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -26.38888888888889,
                "p_value": 0.06335010846004191,
                "effect_size": 0.2689393939393939,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 33,
                    "after": 32
                }
            }
        }
    ],
    "1b19484ed5a32f3561273ac7ae8eb14ec4a2924b": [
        {
            "commit_message": "Implement Binary TraceParent (#1009)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public static co.elastic.apm.agent.impl.transaction.TraceContext$ChildContextCreator co.elastic.apm.agent.impl.transaction.TraceContext.fromTraceparentHeader()",
            "method_name_cc": "public static ChildContextCreator<String> co.elastic.apm.agent.impl.transaction.TraceContext.fromTraceparentHeader()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "public static ChildContextCreator<String> co.elastic.apm.agent.impl.transaction.TraceContext.fromTraceparentHeader()",
            "previous_method_pd": "public static co.elastic.apm.agent.impl.transaction.TraceContext$ChildContextCreator co.elastic.apm.agent.impl.transaction.TraceContext.fromTraceparentHeader()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "57ca793c129f418855184aa053439ab9fd14359f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.5235602094240838,
                "p_value": 0.0,
                "effect_size": 0.031223195430920548,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3998061,
                    "after": 3938891
                }
            }
        },
        {
            "commit_message": "Implement Binary TraceParent (#1009)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.impl.transaction.TraceContext.onMutation()",
            "method_name_cc": "private void co.elastic.apm.agent.impl.transaction.TraceContext.onMutation()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "private void co.elastic.apm.agent.impl.transaction.TraceContext.onMutation()",
            "previous_method_pd": "private void co.elastic.apm.agent.impl.transaction.TraceContext.onMutation()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "57ca793c129f418855184aa053439ab9fd14359f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.5113636363636364,
                "p_value": 0.0,
                "effect_size": -0.014776635376953002,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8208114,
                    "after": 8134842
                }
            }
        },
        {
            "commit_message": "Implement Binary TraceParent (#1009)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "57ca793c129f418855184aa053439ab9fd14359f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.6998411858125992,
                "p_value": 0.0,
                "effect_size": -0.10230349279271066,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8077713,
                    "after": 7980642
                }
            }
        }
    ],
    "cb870b072523f83c56669ba8f4cabc3b48f79c44": [
        {
            "commit_message": "OSGi classloading workaround + refactor servlet contants (#2418)\n\n* draft printf debugging\r\n\r\n* use proper logging instead\r\n\r\n* fix log4j classloader name lookup\r\n\r\n* Update apm-agent-core/src/test/java/co/elastic/apm/agent/logging/LoggingConfigurationTest.java\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>\r\n\r\n* refactor servlet constants + add osgi work-around\r\n\r\n* prevent SecurityException with Apache sling\r\n\r\n* update changelog\r\n\r\n* remove useless ref to parent CL\r\n\r\n* add *Matcher suffix for extra clarity\r\n\r\n* simplify + add CL toString()\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public net.bytebuddy.matcher.ElementMatcher$Junction co.elastic.apm.agent.servlet.AbstractServletInstrumentation.getClassLoaderMatcher()",
            "method_name_cc": "public ElementMatcher.Junction<ClassLoader> co.elastic.apm.agent.servlet.AbstractServletInstrumentation.getClassLoaderMatcher()",
            "file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java",
            "previous_method_cc": "public ElementMatcher.Junction<ClassLoader> co.elastic.apm.agent.servlet.AbstractServletInstrumentation.getClassLoaderMatcher()",
            "previous_method_pd": "public net.bytebuddy.matcher.ElementMatcher$Junction co.elastic.apm.agent.servlet.AbstractServletInstrumentation.getClassLoaderMatcher()",
            "previous_file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AbstractServletInstrumentation.java",
            "previous_commit": "06e2309d40bf551dff75748115b44ea0806e307d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 12.794361525704808,
                "p_value": 0.008320200212664377,
                "effect_size": -0.3234567901234568,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 45,
                    "after": 45
                }
            }
        },
        {
            "commit_message": "OSGi classloading workaround + refactor servlet contants (#2418)\n\n* draft printf debugging\r\n\r\n* use proper logging instead\r\n\r\n* fix log4j classloader name lookup\r\n\r\n* Update apm-agent-core/src/test/java/co/elastic/apm/agent/logging/LoggingConfigurationTest.java\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>\r\n\r\n* refactor servlet constants + add osgi work-around\r\n\r\n* prevent SecurityException with Apache sling\r\n\r\n* update changelog\r\n\r\n* remove useless ref to parent CL\r\n\r\n* add *Matcher suffix for extra clarity\r\n\r\n* simplify + add CL toString()\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public java.util.Collection co.elastic.apm.agent.servlet.AsyncInstrumentation.getInstrumentationGroupNames()",
            "method_name_cc": "public Collection<String> co.elastic.apm.agent.servlet.AsyncInstrumentation.getInstrumentationGroupNames()",
            "file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AsyncInstrumentation.java",
            "previous_method_cc": "public Collection<String> co.elastic.apm.agent.servlet.AsyncInstrumentation.getInstrumentationGroupNames()",
            "previous_method_pd": "public java.util.Collection co.elastic.apm.agent.servlet.AsyncInstrumentation.getInstrumentationGroupNames()",
            "previous_file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/AsyncInstrumentation.java",
            "previous_commit": "06e2309d40bf551dff75748115b44ea0806e307d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.1850210075935705,
                "p_value": 0.2515296307685284,
                "effect_size": 0.2015810276679842,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 23,
                    "after": 22
                }
            }
        }
    ],
    "664e4ff4ef9e61b090bad2e3c8e05cb36452b9cd": [
        {
            "commit_message": "Implemented AWS lambda spec changes (#2424)\n\n* Implemented AWS lambda spec changes\r\n\r\n* fix lambda meta data test with env variables\r\n\r\n* Fixed metadata test for lambda\r\n\r\n* Fixed handling of improper payload\r\n\r\n* minor fix for transaction naming on ApiGatewayv2\r\n\r\n* Added capturing of faas.name and faas.version\r\n\r\n* Minor changes\r\n\r\n* Simplify lambda service name and veresion test\r\n\r\n* Remove nonnull annotation\r\n\r\n* Best-effort transaction naming and extracting common logic\r\n\r\n* Implementing flush request\r\n\r\n* Fixing ARN parsing bug\r\n\r\nCo-authored-by: Alexander Wert <AlexanderWert@users.noreply.github.com>\r\n\r\n* Updating docs\r\n\r\n* Logging enabled instrumentations after the first Lambda invocation\r\n\r\n* Adding to CHANGELOG\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.dispatchEvent(co.elastic.apm.agent.report.ReportingEvent,long,boolean) throws java.lang.Exception",
            "method_name_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.dispatchEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.dispatchEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.dispatchEvent(co.elastic.apm.agent.report.ReportingEvent,long,boolean) throws java.lang.Exception",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_commit": "a5ce52b76fb2c4202785950a3646fd796e7f75bd",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "Implemented AWS lambda spec changes (#2424)\n\n* Implemented AWS lambda spec changes\r\n\r\n* fix lambda meta data test with env variables\r\n\r\n* Fixed metadata test for lambda\r\n\r\n* Fixed handling of improper payload\r\n\r\n* minor fix for transaction naming on ApiGatewayv2\r\n\r\n* Added capturing of faas.name and faas.version\r\n\r\n* Minor changes\r\n\r\n* Simplify lambda service name and veresion test\r\n\r\n* Remove nonnull annotation\r\n\r\n* Best-effort transaction naming and extracting common logic\r\n\r\n* Implementing flush request\r\n\r\n* Fixing ARN parsing bug\r\n\r\nCo-authored-by: Alexander Wert <AlexanderWert@users.noreply.github.com>\r\n\r\n* Updating docs\r\n\r\n* Logging enabled instrumentations after the first Lambda invocation\r\n\r\n* Adding to CHANGELOG\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.impl.transaction.Faas.hasContent()",
            "method_name_cc": "public boolean co.elastic.apm.agent.impl.transaction.Faas.hasContent()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Faas.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.impl.transaction.Faas.hasContent()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.impl.transaction.Faas.hasContent()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Faas.java",
            "previous_commit": "a5ce52b76fb2c4202785950a3646fd796e7f75bd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -14.772727272727273,
                "p_value": 0.0,
                "effect_size": 0.41797033532461264,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4198403,
                    "after": 4733535
                }
            }
        },
        {
            "commit_message": "Implemented AWS lambda spec changes (#2424)\n\n* Implemented AWS lambda spec changes\r\n\r\n* fix lambda meta data test with env variables\r\n\r\n* Fixed metadata test for lambda\r\n\r\n* Fixed handling of improper payload\r\n\r\n* minor fix for transaction naming on ApiGatewayv2\r\n\r\n* Added capturing of faas.name and faas.version\r\n\r\n* Minor changes\r\n\r\n* Simplify lambda service name and veresion test\r\n\r\n* Remove nonnull annotation\r\n\r\n* Best-effort transaction naming and extracting common logic\r\n\r\n* Implementing flush request\r\n\r\n* Fixing ARN parsing bug\r\n\r\nCo-authored-by: Alexander Wert <AlexanderWert@users.noreply.github.com>\r\n\r\n* Updating docs\r\n\r\n* Logging enabled instrumentations after the first Lambda invocation\r\n\r\n* Adding to CHANGELOG\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Faas.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Faas.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Faas.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Faas.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Faas.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Faas.java",
            "previous_commit": "a5ce52b76fb2c4202785950a3646fd796e7f75bd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -7.142857142857142,
                "p_value": 0.0,
                "effect_size": 0.21371763695943993,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 14558280,
                    "after": 15739021
                }
            }
        }
    ],
    "707982892b4f5511abdcea0c0f7214942ad09204": [
        {
            "commit_message": "Fix noop handling for Transactions and Spans (#75)\n\n- Adds Transaction.noop flag\r\n- noop Transactions don't get reported\r\n- noop Transactions are not a singleton, as this leads or threading issues\r\n- startSpan returns null if current transaction is null or noop\r\n- public api never returns null span but returns noop span\r\n\r\nfixes #71",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Span co.elastic.apm.impl.ElasticApmTracer.startSpan()",
            "method_name_cc": "public Span co.elastic.apm.impl.ElasticApmTracer.startSpan()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Span co.elastic.apm.impl.ElasticApmTracer.startSpan()",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Span co.elastic.apm.impl.ElasticApmTracer.startSpan()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "e58f865400f068b32fc2721e4c24b791d1f01bca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.300970873786408,
                "p_value": 1.2456718929291162e-157,
                "effect_size": -0.04621508113461613,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 236177,
                    "after": 211836
                }
            }
        },
        {
            "commit_message": "Fix noop handling for Transactions and Spans (#75)\n\n- Adds Transaction.noop flag\r\n- noop Transactions don't get reported\r\n- noop Transactions are not a singleton, as this leads or threading issues\r\n- startSpan returns null if current transaction is null or noop\r\n- public api never returns null span but returns noop span\r\n\r\nfixes #71",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.jdbc.ApmJdbcEventListener.onBeforeAnyExecute(com.p6spy.engine.common.StatementInformation)",
            "method_name_cc": "public void co.elastic.apm.jdbc.ApmJdbcEventListener.onBeforeAnyExecute(StatementInformation statementInformation)",
            "file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/jdbc/ApmJdbcEventListener.java",
            "previous_method_cc": "public void co.elastic.apm.jdbc.ApmJdbcEventListener.onBeforeAnyExecute(StatementInformation statementInformation)",
            "previous_method_pd": "public void co.elastic.apm.jdbc.ApmJdbcEventListener.onBeforeAnyExecute(com.p6spy.engine.common.StatementInformation)",
            "previous_file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/jdbc/ApmJdbcEventListener.java",
            "previous_commit": "e58f865400f068b32fc2721e4c24b791d1f01bca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.0,
                "p_value": 1.545878185721905e-25,
                "effect_size": -0.017821401141440155,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 238514,
                    "after": 220216
                }
            }
        },
        {
            "commit_message": "Fix noop handling for Transactions and Spans (#75)\n\n- Adds Transaction.noop flag\r\n- noop Transactions don't get reported\r\n- noop Transactions are not a singleton, as this leads or threading issues\r\n- startSpan returns null if current transaction is null or noop\r\n- public api never returns null span but returns noop span\r\n\r\nfixes #71",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.jdbc.ApmJdbcEventListener.onAfterAnyExecute(com.p6spy.engine.common.StatementInformation,long,java.sql.SQLException)",
            "method_name_cc": "public void co.elastic.apm.jdbc.ApmJdbcEventListener.onAfterAnyExecute(StatementInformation statementInformation, long timeElapsedNanos, SQLException e)",
            "file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/jdbc/ApmJdbcEventListener.java",
            "previous_method_cc": "public void co.elastic.apm.jdbc.ApmJdbcEventListener.onAfterAnyExecute(StatementInformation statementInformation, long timeElapsedNanos, SQLException e)",
            "previous_method_pd": "public void co.elastic.apm.jdbc.ApmJdbcEventListener.onAfterAnyExecute(com.p6spy.engine.common.StatementInformation,long,java.sql.SQLException)",
            "previous_file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/jdbc/ApmJdbcEventListener.java",
            "previous_commit": "e58f865400f068b32fc2721e4c24b791d1f01bca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.7952286282306162,
                "p_value": 8.727037987336699e-26,
                "effect_size": -0.018631432974851293,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 222803,
                    "after": 201644
                }
            }
        },
        {
            "commit_message": "Fix noop handling for Transactions and Spans (#75)\n\n- Adds Transaction.noop flag\r\n- noop Transactions don't get reported\r\n- noop Transactions are not a singleton, as this leads or threading issues\r\n- startSpan returns null if current transaction is null or noop\r\n- public api never returns null span but returns noop span\r\n\r\nfixes #71",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.transaction.Transaction.start(co.elastic.apm.impl.ElasticApmTracer,long,co.elastic.apm.impl.sampling.Sampler)",
            "method_name_cc": "public Transaction co.elastic.apm.impl.transaction.Transaction.start(ElasticApmTracer tracer, long startTimestampNanos, Sampler sampler)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.transaction.Transaction.start(ElasticApmTracer tracer, long startTimestampNanos, Sampler sampler)",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.transaction.Transaction.start(co.elastic.apm.impl.ElasticApmTracer,long,co.elastic.apm.impl.sampling.Sampler)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "e58f865400f068b32fc2721e4c24b791d1f01bca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.7446286065070598,
                "p_value": 0.0,
                "effect_size": -0.10987994995238987,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 233889,
                    "after": 220278
                }
            }
        },
        {
            "commit_message": "Fix noop handling for Transactions and Spans (#75)\n\n- Adds Transaction.noop flag\r\n- noop Transactions don't get reported\r\n- noop Transactions are not a singleton, as this leads or threading issues\r\n- startSpan returns null if current transaction is null or noop\r\n- public api never returns null span but returns noop span\r\n\r\nfixes #71",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startManualTransaction(co.elastic.apm.impl.sampling.Sampler,long)",
            "method_name_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startManualTransaction(Sampler sampler, long nanoTime)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startManualTransaction(Sampler sampler, long nanoTime)",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startManualTransaction(co.elastic.apm.impl.sampling.Sampler,long)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "e58f865400f068b32fc2721e4c24b791d1f01bca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.9960159362549801,
                "p_value": 1.4006791063602232e-17,
                "effect_size": -0.01473235505828554,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 236366,
                    "after": 212425
                }
            }
        },
        {
            "commit_message": "Fix noop handling for Transactions and Spans (#75)\n\n- Adds Transaction.noop flag\r\n- noop Transactions don't get reported\r\n- noop Transactions are not a singleton, as this leads or threading issues\r\n- startSpan returns null if current transaction is null or noop\r\n- public api never returns null span but returns noop span\r\n\r\nfixes #71",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.impl.ElasticApmTracer.endSpan(co.elastic.apm.impl.transaction.Span,boolean)",
            "method_name_cc": "public void co.elastic.apm.impl.ElasticApmTracer.endSpan(Span span, boolean releaseActiveSpan)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.impl.ElasticApmTracer.endSpan(Span span, boolean releaseActiveSpan)",
            "previous_method_pd": "public void co.elastic.apm.impl.ElasticApmTracer.endSpan(co.elastic.apm.impl.transaction.Span,boolean)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "e58f865400f068b32fc2721e4c24b791d1f01bca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.1875,
                "p_value": 4.008196379364987e-221,
                "effect_size": -0.05455669966603427,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 233153,
                    "after": 218653
                }
            }
        },
        {
            "commit_message": "Fix noop handling for Transactions and Spans (#75)\n\n- Adds Transaction.noop flag\r\n- noop Transactions don't get reported\r\n- noop Transactions are not a singleton, as this leads or threading issues\r\n- startSpan returns null if current transaction is null or noop\r\n- public api never returns null span but returns noop span\r\n\r\nfixes #71",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.impl.ElasticApmTracer.endTransaction(co.elastic.apm.impl.transaction.Transaction,boolean)",
            "method_name_cc": "public void co.elastic.apm.impl.ElasticApmTracer.endTransaction(Transaction transaction, boolean releaseActiveTransaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.impl.ElasticApmTracer.endTransaction(Transaction transaction, boolean releaseActiveTransaction)",
            "previous_method_pd": "public void co.elastic.apm.impl.ElasticApmTracer.endTransaction(co.elastic.apm.impl.transaction.Transaction,boolean)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "e58f865400f068b32fc2721e4c24b791d1f01bca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.35714285714285715,
                "p_value": 1.4986504108238757e-30,
                "effect_size": -0.019916462375112243,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 232075,
                    "after": 212476
                }
            }
        },
        {
            "commit_message": "Fix noop handling for Transactions and Spans (#75)\n\n- Adds Transaction.noop flag\r\n- noop Transactions don't get reported\r\n- noop Transactions are not a singleton, as this leads or threading issues\r\n- startSpan returns null if current transaction is null or noop\r\n- public api never returns null span but returns noop span\r\n\r\nfixes #71",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "e58f865400f068b32fc2721e4c24b791d1f01bca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.1363636363636365,
                "p_value": 1.1483661782387636e-11,
                "effect_size": 0.012326760508815192,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 214715,
                    "after": 190827
                }
            }
        }
    ],
    "9528d35842985671e90f20e9699ad27cc21a8f30": [
        {
            "commit_message": "Add support for W3C Trace Context headers (#1024)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.LettuceActiveBenchmark.benchmarkLettuce",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.asChildOf(co.elastic.apm.agent.impl.transaction.TraceContext)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.asChildOf(TraceContext parent)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.asChildOf(TraceContext parent)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.asChildOf(co.elastic.apm.agent.impl.transaction.TraceContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "763f6f33b68299c241e0c4091133ca2660f9d758",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "Add support for W3C Trace Context headers (#1024)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.LettuceActiveBenchmark.benchmarkLettuce",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "763f6f33b68299c241e0c4091133ca2660f9d758",
            "performance_diff": -0.0,
            "significance": {}
        }
    ],
    "fab4f04c4a19e53849858e3591689f5145067869": [
        {
            "commit_message": "Added SQS Instrumentation (#2637)\n\n* Added SQS Instrumentation\r\n\r\nfixed destination service resource\r\n\r\nadded message processing spans,  refactored test classes\r\n\r\nExtended destination serialization test to cover multiple content combinations\r\n\r\nRemoved lazy instantiation of helper objects\r\n\r\n* Added span links to SQS instrumentation\r\n\r\n* Make generic type explicit for setting span links on SQS instrumentation\r\n\r\n* Removed Nullable annotation on singleton instances.\r\nReplaced boxed Long with primitive type on getMessageAge.\r\n\r\n* Update CHANGELOG.asciidoc and supported-technologies.asciidoc",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.impl.context.Destination.hasContent()",
            "method_name_cc": "public boolean co.elastic.apm.agent.impl.context.Destination.hasContent()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.impl.context.Destination.hasContent()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.impl.context.Destination.hasContent()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_commit": "f4f1b4af3ccafce199bece084c641d5475f1e168",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.6711409395973155,
                "p_value": 1.273612957398004e-07,
                "effect_size": -0.0018249342419630707,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5463828,
                    "after": 5712747
                }
            }
        },
        {
            "commit_message": "Added SQS Instrumentation (#2637)\n\n* Added SQS Instrumentation\r\n\r\nfixed destination service resource\r\n\r\nadded message processing spans,  refactored test classes\r\n\r\nExtended destination serialization test to cover multiple content combinations\r\n\r\nRemoved lazy instantiation of helper objects\r\n\r\n* Added span links to SQS instrumentation\r\n\r\n* Make generic type explicit for setting span links on SQS instrumentation\r\n\r\n* Removed Nullable annotation on singleton instances.\r\nReplaced boxed Long with primitive type on getMessageAge.\r\n\r\n* Update CHANGELOG.asciidoc and supported-technologies.asciidoc",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.Destination.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Destination.java",
            "previous_commit": "f4f1b4af3ccafce199bece084c641d5475f1e168",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.5855658829961725,
                "p_value": 0.0,
                "effect_size": 0.037865708158053846,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 15279660,
                    "after": 15827299
                }
            }
        }
    ],
    "d3837306ede300d13928053571e9b2b54eca1cb5": [
        {
            "commit_message": "Timing breakdown (#588)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(Span span)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(Span span)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "8e44cb51b862572d08ff6c0e44e5fbb5529fd159",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.4154589371980677,
                "p_value": 0.0,
                "effect_size": -0.08982585750538291,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8139004,
                    "after": 7141126
                }
            }
        }
    ],
    "36ff1f18db1c89ec9c2bb185035fa162ce6de9f9": [
        {
            "commit_message": "add Spring Webflux server support (#1305)\n\n\r\n\r\nCo-authored-by: marcin-bukowiecki <m.bukowiecki0407@gmail.com>\r\nCo-authored-by: Pavel <pavel@multiloginapp.com>\r\nCo-authored-by: Felix Barnsteiner <felixbarny@users.noreply.github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>\r\nCo-authored-by: apmmachine <58790750+apmmachine@users.noreply.github.com>\r\nCo-authored-by: Ivan Fernandez Calvo <kuisathaverat@users.noreply.github.com>\r\nCo-authored-by: Victor Martinez <victormartinezrubio@gmail.com>\r\nCo-authored-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public static com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier.createMap()",
            "method_name_cc": "public static <K, V> WeakConcurrentMap<K, V> co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier.createMap()",
            "file": "apm-agent-plugin-sdk/src/main/java/co/elastic/apm/agent/sdk/weakmap/WeakMapSupplier.java",
            "previous_method_cc": "public static <K, V> WeakConcurrentMap<K, V> co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier.createMap()",
            "previous_method_pd": "public static com.blogspot.mydailyjava.weaklockfree.WeakConcurrentMap co.elastic.apm.agent.sdk.weakmap.WeakMapSupplier.createMap()",
            "previous_file": "apm-agent-plugin-sdk/src/main/java/co/elastic/apm/agent/sdk/weakmap/WeakMapSupplier.java",
            "previous_commit": "036418bd583ac2649229a861fc3e8f5a624d64de",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.5409374371353852,
                "p_value": 0.6748639548345938,
                "effect_size": -0.03515625,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 96,
                    "after": 96
                }
            }
        },
        {
            "commit_message": "add Spring Webflux server support (#1305)\n\n\r\n\r\nCo-authored-by: marcin-bukowiecki <m.bukowiecki0407@gmail.com>\r\nCo-authored-by: Pavel <pavel@multiloginapp.com>\r\nCo-authored-by: Felix Barnsteiner <felixbarny@users.noreply.github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>\r\nCo-authored-by: apmmachine <58790750+apmmachine@users.noreply.github.com>\r\nCo-authored-by: Ivan Fernandez Calvo <kuisathaverat@users.noreply.github.com>\r\nCo-authored-by: Victor Martinez <victormartinezrubio@gmail.com>\r\nCo-authored-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public static void co.elastic.apm.agent.bci.ElasticApmAgent.validateAdvice(java.lang.Class)",
            "method_name_cc": "public static void co.elastic.apm.agent.bci.ElasticApmAgent.validateAdvice(Class<?> adviceClass)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java",
            "previous_method_cc": "public static void co.elastic.apm.agent.bci.ElasticApmAgent.validateAdvice(Class<?> adviceClass)",
            "previous_method_pd": "public static void co.elastic.apm.agent.bci.ElasticApmAgent.validateAdvice(java.lang.Class)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java",
            "previous_commit": "036418bd583ac2649229a861fc3e8f5a624d64de",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 13.505033856907406,
                "p_value": 0.12486035998214667,
                "effect_size": -0.3333333333333333,
                "effect_size_interpretation": "medium",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 15,
                    "after": 15
                }
            }
        },
        {
            "commit_message": "add Spring Webflux server support (#1305)\n\n\r\n\r\nCo-authored-by: marcin-bukowiecki <m.bukowiecki0407@gmail.com>\r\nCo-authored-by: Pavel <pavel@multiloginapp.com>\r\nCo-authored-by: Felix Barnsteiner <felixbarny@users.noreply.github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>\r\nCo-authored-by: apmmachine <58790750+apmmachine@users.noreply.github.com>\r\nCo-authored-by: Ivan Fernandez Calvo <kuisathaverat@users.noreply.github.com>\r\nCo-authored-by: Victor Martinez <victormartinezrubio@gmail.com>\r\nCo-authored-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.impl.context.Url co.elastic.apm.agent.impl.context.Url.withPort(int)",
            "method_name_cc": "public Url co.elastic.apm.agent.impl.context.Url.withPort(int port)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java",
            "previous_method_cc": "public Url co.elastic.apm.agent.impl.context.Url.withPort(int port)",
            "previous_method_pd": "public co.elastic.apm.agent.impl.context.Url co.elastic.apm.agent.impl.context.Url.withPort(int)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java",
            "previous_commit": "036418bd583ac2649229a861fc3e8f5a624d64de",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -10.843373493975903,
                "p_value": 0.0,
                "effect_size": 0.32822732849435193,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6401058,
                    "after": 6771612
                }
            }
        },
        {
            "commit_message": "add Spring Webflux server support (#1305)\n\n\r\n\r\nCo-authored-by: marcin-bukowiecki <m.bukowiecki0407@gmail.com>\r\nCo-authored-by: Pavel <pavel@multiloginapp.com>\r\nCo-authored-by: Felix Barnsteiner <felixbarny@users.noreply.github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>\r\nCo-authored-by: apmmachine <58790750+apmmachine@users.noreply.github.com>\r\nCo-authored-by: Ivan Fernandez Calvo <kuisathaverat@users.noreply.github.com>\r\nCo-authored-by: Victor Martinez <victormartinezrubio@gmail.com>\r\nCo-authored-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.impl.context.Url.hasContent()",
            "method_name_cc": "public boolean co.elastic.apm.agent.impl.context.Url.hasContent()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.impl.context.Url.hasContent()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.impl.context.Url.hasContent()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java",
            "previous_commit": "036418bd583ac2649229a861fc3e8f5a624d64de",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.055865921787709494,
                "p_value": 5.0635463645332305e-18,
                "effect_size": -0.0032880589309636212,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4630103,
                    "after": 4600602
                }
            }
        },
        {
            "commit_message": "add Spring Webflux server support (#1305)\n\n\r\n\r\nCo-authored-by: marcin-bukowiecki <m.bukowiecki0407@gmail.com>\r\nCo-authored-by: Pavel <pavel@multiloginapp.com>\r\nCo-authored-by: Felix Barnsteiner <felixbarny@users.noreply.github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>\r\nCo-authored-by: apmmachine <58790750+apmmachine@users.noreply.github.com>\r\nCo-authored-by: Ivan Fernandez Calvo <kuisathaverat@users.noreply.github.com>\r\nCo-authored-by: Victor Martinez <victormartinezrubio@gmail.com>\r\nCo-authored-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.Url.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.Url.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.Url.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.Url.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Url.java",
            "previous_commit": "036418bd583ac2649229a861fc3e8f5a624d64de",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.5649717514124294,
                "p_value": 0.0,
                "effect_size": -0.018885322822007944,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5752155,
                    "after": 5835410
                }
            }
        }
    ],
    "e306c60534394cc25dedfc0caf5fbff028eea74a": [
        {
            "commit_message": "Capture request body for HttpUrlConnection (#3724)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.SpanImpl.beforeEnd(long)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.SpanImpl.beforeEnd(long epochMicros)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/SpanImpl.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.SpanImpl.beforeEnd(long epochMicros)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.SpanImpl.beforeEnd(long)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/SpanImpl.java",
            "previous_commit": "80148905e8054647d48b5ab8fe744b13a7989625",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.0,
                "p_value": 0.0,
                "effect_size": 0.052306301381542894,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 9346604,
                    "after": 10649783
                }
            }
        },
        {
            "commit_message": "Capture request body for HttpUrlConnection (#3724)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.SpanImpl.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.SpanImpl.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/SpanImpl.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.SpanImpl.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.SpanImpl.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/SpanImpl.java",
            "previous_commit": "80148905e8054647d48b5ab8fe744b13a7989625",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.8181818181818181,
                "p_value": 0.0,
                "effect_size": 0.05677311122901324,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 9545650,
                    "after": 11031731
                }
            }
        }
    ],
    "491da9dd92f172b907589465e6c833ec08adeba7": [
        {
            "commit_message": "JMS - some more enhancements (#911)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.impl.context.Message.hasContent()",
            "method_name_cc": "public boolean co.elastic.apm.agent.impl.context.Message.hasContent()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.impl.context.Message.hasContent()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.impl.context.Message.hasContent()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java",
            "previous_commit": "30813154b8633de72ad41cb7fbe524e3663f998d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.631578947368421,
                "p_value": 0.0,
                "effect_size": 0.1241574761512423,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6176457,
                    "after": 6151882
                }
            }
        },
        {
            "commit_message": "JMS - some more enhancements (#911)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.Message.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.Message.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.Message.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.Message.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java",
            "previous_commit": "30813154b8633de72ad41cb7fbe524e3663f998d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.060859854829704,
                "p_value": 0.0,
                "effect_size": -0.0171972539437117,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 10121032,
                    "after": 10477484
                }
            }
        }
    ],
    "01a5c8cebbf5b06f91e1ebbc614bab6c9d710f11": [
        {
            "commit_message": "Set framework name and version (#1194)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "42d312bacdff4f272c3e6fc42e032347307bba96",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.49504950495049505,
                "p_value": 4.696340064434108e-102,
                "effect_size": -0.004608209129555735,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 13934133,
                    "after": 14988384
                }
            }
        }
    ],
    "c852d0a2c1992332bba2a28b013c6042e3bdab7b": [
        {
            "commit_message": "Cached weak map keys (#2137)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.collections.WeakMapCleaner.run()",
            "method_name_cc": "public void co.elastic.apm.agent.collections.WeakMapCleaner.run()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/WeakMapCleaner.java",
            "previous_method_cc": "public void co.elastic.apm.agent.collections.WeakMapCleaner.run()",
            "previous_method_pd": "public void co.elastic.apm.agent.collections.WeakMapCleaner.run()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/WeakMapCleaner.java",
            "previous_commit": "168b714a98338c47b4500c7ce0f60c77a6c6fc35",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 29.936811168258632,
                "p_value": 3.309893113109291e-31,
                "effect_size": -0.7874171251234307,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 153,
                    "after": 139
                }
            }
        }
    ],
    "a837d43aa3fa189c19ae5dadaa4e0e28ae52d97a": [
        {
            "commit_message": "Shared JSON spec for span types/subtypes (#1812)\n\n* first draft for JSON spec\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>\r\n\r\nCo-authored-by: eyalkoren <41850454+eyalkoren@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanType(co.elastic.apm.agent.impl.transaction.Span)",
            "method_name_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanType(Span span)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanType(Span span)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanType(co.elastic.apm.agent.impl.transaction.Span)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "04eea1bad6bcd66da866896375771c584f1de22a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.04568296025582458,
                "p_value": 0.0,
                "effect_size": -0.01543571949946503,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4556898,
                    "after": 4442322
                }
            }
        }
    ],
    "f615e69241c9106b5a93b83d65974d8a7e5f0d85": [
        {
            "commit_message": "Fix ECS log reformatting (#2167)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private static void co.elastic.apm.agent.bci.ElasticApmAgent.validateAdviceReturnAndParameterTypes(net.bytebuddy.description.method.MethodDescription$InDefinedShape,java.lang.String)",
            "method_name_cc": "private static void co.elastic.apm.agent.bci.ElasticApmAgent.validateAdviceReturnAndParameterTypes(MethodDescription.InDefinedShape advice, String adviceClass)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java",
            "previous_method_cc": "private static void co.elastic.apm.agent.bci.ElasticApmAgent.validateAdviceReturnAndParameterTypes(MethodDescription.InDefinedShape advice, String adviceClass)",
            "previous_method_pd": "private static void co.elastic.apm.agent.bci.ElasticApmAgent.validateAdviceReturnAndParameterTypes(net.bytebuddy.description.method.MethodDescription$InDefinedShape,java.lang.String)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java",
            "previous_commit": "f105513a7652c180db1dd13cd4727c919a261455",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.257654193166691,
                "p_value": 0.9257859201580326,
                "effect_size": -0.006782945736434108,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 128,
                    "after": 129
                }
            }
        },
        {
            "commit_message": "Fix ECS log reformatting (#2167)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private static java.util.List co.elastic.apm.agent.bci.IndyBootstrap.getClassNamesFromBundledPlugin(java.lang.String,java.lang.ClassLoader) throws java.io.IOException,java.net.URISyntaxException",
            "method_name_cc": "private static List<String> co.elastic.apm.agent.bci.IndyBootstrap.getClassNamesFromBundledPlugin(String adviceClassName, ClassLoader adviceClassLoader)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java",
            "previous_method_cc": "private static List<String> co.elastic.apm.agent.bci.IndyBootstrap.getClassNamesFromBundledPlugin(String adviceClassName, ClassLoader adviceClassLoader)",
            "previous_method_pd": "private static java.util.List co.elastic.apm.agent.bci.IndyBootstrap.getClassNamesFromBundledPlugin(java.lang.String,java.lang.ClassLoader) throws java.io.IOException,java.net.URISyntaxException",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/IndyBootstrap.java",
            "previous_commit": "f105513a7652c180db1dd13cd4727c919a261455",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 5.137897242055159,
                "p_value": 0.651313321183407,
                "effect_size": 0.0962962962962963,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 18,
                    "after": 15
                }
            }
        }
    ],
    "6ea644050e2e4dece55bc382eaf43543aa8df504": [
        {
            "commit_message": "Zero garbage serialization of ISO timestamps (#77)\n\n\r\n",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.transaction.Transaction.start(co.elastic.apm.impl.ElasticApmTracer,long,co.elastic.apm.impl.sampling.Sampler)",
            "method_name_cc": "public Transaction co.elastic.apm.impl.transaction.Transaction.start(ElasticApmTracer tracer, long startTimestampNanos, Sampler sampler)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.transaction.Transaction.start(ElasticApmTracer tracer, long startTimestampNanos, Sampler sampler)",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.transaction.Transaction.start(co.elastic.apm.impl.ElasticApmTracer,long,co.elastic.apm.impl.sampling.Sampler)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "6a3baa7440671ef55b7a8794dbe36e2fd28f57e9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.8867924528301887,
                "p_value": 6.920073739708549e-229,
                "effect_size": -0.03654166087522494,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 536954,
                    "after": 505672
                }
            }
        },
        {
            "commit_message": "Zero garbage serialization of ISO timestamps (#77)\n\n\r\n",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.error.ErrorCapture.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/error/ErrorCapture.java",
            "previous_method_cc": "public void co.elastic.apm.impl.error.ErrorCapture.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/error/ErrorCapture.java",
            "previous_commit": "6a3baa7440671ef55b7a8794dbe36e2fd28f57e9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.4765625,
                "p_value": 1.1686003754762292e-255,
                "effect_size": -0.03594526248913227,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 623225,
                    "after": 581928
                }
            }
        }
    ],
    "cf3d0fcf83f180d5466ac4b32fa117b0e826f763": [
        {
            "commit_message": "Capture request body for Apache HttpClient 4.x (#3692)\n\n\r\nCo-authored-by: jackshirazi <jacks@fasterj.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.HttpImpl.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.HttpImpl.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/HttpImpl.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.HttpImpl.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.HttpImpl.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/HttpImpl.java",
            "previous_commit": "54fee67e2a99cbba8af882e5c0e5900939b3a7dc",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.838709677419355,
                "p_value": 0.0,
                "effect_size": -0.0784226154317577,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 17635577,
                    "after": 19383105
                }
            }
        }
    ],
    "189c941c2abad8a40ff9bae91441f9318892053d": [
        {
            "commit_message": "Set classname instead of filename when connected to APM Server 7.6 (#984)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeStackTraceElement(java.lang.StackTraceElement)",
            "method_name_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeStackTraceElement(StackTraceElement stacktrace)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeStackTraceElement(StackTraceElement stacktrace)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeStackTraceElement(java.lang.StackTraceElement)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "abba3ebeaf1b239e09827ab23bed774792015f20",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 9.88828765927736,
                "p_value": 0.001430465010162018,
                "effect_size": -0.4513888888888889,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 32,
                    "after": 36
                }
            }
        }
    ],
    "a4f6c1ce8951f53b5b6306ab43b9de4f13cf5ca8": [
        {
            "commit_message": "Make log correlation GA (#742)\n\n- Load the MDC with the application class loader, as opposed to the\r\n  Thread's context classloader (fixes #720)\r\n- Remove span.id MDC entry\r\n  This causes the most allocations as in contrast to transaction.id and\r\n  trace.id, the String manifestation can't be reused.\r\n  Other agents also don't add the span.id so it makes sense to align on that\r\n- Docs improvements\r\n- Mention slf4j in supported technologies page",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder) throws java.lang.Throwable",
            "method_name_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(TraceContextHolder<?> context)",
            "file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(TraceContextHolder<?> context)",
            "previous_method_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder) throws java.lang.Throwable",
            "previous_file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_commit": "5526dff1533dc406fd1f476def8f29a790d15ea0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.547770700636943,
                "p_value": 0.0,
                "effect_size": -0.10328688494410193,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 11601384,
                    "after": 11097623
                }
            }
        },
        {
            "commit_message": "Make log correlation GA (#742)\n\n- Load the MDC with the application class loader, as opposed to the\r\n  Thread's context classloader (fixes #720)\r\n- Remove span.id MDC entry\r\n  This causes the most allocations as in contrast to transaction.id and\r\n  trace.id, the String manifestation can't be reused.\r\n  Other agents also don't add the span.id so it makes sense to align on that\r\n- Docs improvements\r\n- Mention slf4j in supported technologies page",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.asChildOf(co.elastic.apm.agent.impl.transaction.TraceContext)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.asChildOf(TraceContext parent)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.asChildOf(TraceContext parent)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.asChildOf(co.elastic.apm.agent.impl.transaction.TraceContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "5526dff1533dc406fd1f476def8f29a790d15ea0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.5463917525773196,
                "p_value": 0.0,
                "effect_size": 0.047441449570191245,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5751522,
                    "after": 5443892
                }
            }
        },
        {
            "commit_message": "Make log correlation GA (#742)\n\n- Load the MDC with the application class loader, as opposed to the\r\n  Thread's context classloader (fixes #720)\r\n- Remove span.id MDC entry\r\n  This causes the most allocations as in contrast to transaction.id and\r\n  trace.id, the String manifestation can't be reused.\r\n  Other agents also don't add the span.id so it makes sense to align on that\r\n- Docs improvements\r\n- Mention slf4j in supported technologies page",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "5526dff1533dc406fd1f476def8f29a790d15ea0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.5263157894736842,
                "p_value": 0.0,
                "effect_size": -0.04218285196930499,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7797382,
                    "after": 7581797
                }
            }
        }
    ],
    "6da304319315cfe4041a8ec5b50cc6f976965eab": [
        {
            "commit_message": "Opt in for very old bytecode instrumentation (#2866)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ProfilerBenchmark.processTraces",
            "method_name_pd": "public net.bytebuddy.dynamic.DynamicType$Builder co.elastic.apm.agent.bci.bytebuddy.PatchBytecodeVersionTo51Transformer.transform(net.bytebuddy.dynamic.DynamicType$Builder,net.bytebuddy.description.type.TypeDescription,java.lang.ClassLoader,net.bytebuddy.utility.JavaModule,java.security.ProtectionDomain)",
            "method_name_cc": "public DynamicType.Builder<?> co.elastic.apm.agent.bci.ElasticApmAgent.transform(DynamicType.Builder<?> builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule module, ProtectionDomain protectionDomain)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java",
            "previous_method_cc": "public DynamicType.Builder<?> co.elastic.apm.agent.bci.ElasticApmAgent.transform(DynamicType.Builder<?> builder, TypeDescription typeDescription, ClassLoader classLoader, JavaModule module, ProtectionDomain protectionDomain)",
            "previous_method_pd": "public net.bytebuddy.dynamic.DynamicType$Builder co.elastic.apm.agent.bci.bytebuddy.PatchBytecodeVersionTo51Transformer.transform(net.bytebuddy.dynamic.DynamicType$Builder,net.bytebuddy.description.type.TypeDescription,java.lang.ClassLoader,net.bytebuddy.utility.JavaModule,java.security.ProtectionDomain)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/bci/ElasticApmAgent.java",
            "previous_commit": "1b9a8276bd992f9e69eabb7f38998fa6ea1e8127",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 5.347299359486759,
                "p_value": 0.03955125306782195,
                "effect_size": -0.2260536398467433,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 54,
                    "after": 58
                }
            }
        }
    ],
    "b2ac746be4d90fe9a7191c9d46f2fb0c364b3799": [
        {
            "commit_message": "Add gRPC client/server instrumentation plugin (#1019)\n\nadd gRPC plugin for client/server support (unary calls only for now).",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.impl.transaction.Transaction.onTransactionStart(boolean,long,co.elastic.apm.agent.impl.sampling.Sampler)",
            "method_name_cc": "private void co.elastic.apm.agent.impl.transaction.Transaction.onTransactionStart(boolean startedAsChild, long epochMicros, Sampler sampler)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "private void co.elastic.apm.agent.impl.transaction.Transaction.onTransactionStart(boolean startedAsChild, long epochMicros, Sampler sampler)",
            "previous_method_pd": "private void co.elastic.apm.agent.impl.transaction.Transaction.onTransactionStart(boolean,long,co.elastic.apm.agent.impl.sampling.Sampler)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "a8b8cdb1a9df0074196f1df01b9cf7b5a71a5fdd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.43478260869565216,
                "p_value": 5.1246226136417e-220,
                "effect_size": 0.009081840173106369,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8618331,
                    "after": 7645533
                }
            }
        },
        {
            "commit_message": "Add gRPC client/server instrumentation plugin (#1019)\n\nadd gRPC plugin for client/server support (unary calls only for now).",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private co.elastic.apm.agent.impl.transaction.Span co.elastic.apm.agent.impl.transaction.Span.start(long,boolean)",
            "method_name_cc": "private Span co.elastic.apm.agent.impl.transaction.Span.start(long epochMicros, boolean dropped)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "private Span co.elastic.apm.agent.impl.transaction.Span.start(long epochMicros, boolean dropped)",
            "previous_method_pd": "private co.elastic.apm.agent.impl.transaction.Span co.elastic.apm.agent.impl.transaction.Span.start(long,boolean)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "a8b8cdb1a9df0074196f1df01b9cf7b5a71a5fdd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.5172413793103449,
                "p_value": 6.487415974689849e-76,
                "effect_size": -0.00535078993695647,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8522221,
                    "after": 7389270
                }
            }
        }
    ],
    "e1935ebc4da40cbc4ee4d3b51a671a78b48b3a77": [
        {
            "commit_message": "Added (initial) support for compressing spans (#2477)\n\n* Added (initial) support for compressing spans\r\n\r\n* Added #2477 to the changelog\r\n\r\n* Added test case for context propagation\r\n\r\n* It is not necessary to activate the transaction\r\n\r\n* Report \"compressed spans\" as dropped\r\n\r\n* Added assertions for span counts to compression tests\r\n\r\n* Move compression configuration to new class as discussed with @jackshirazi\r\n\r\n* Clear bufferedSpan when the transaction/span is recycled\r\n\r\n* Prevent NullPointerException\r\n\r\n* Cache \"SpanConfiguration\" when the transaction starts to provide consistent span compression\r\n\r\n* Review by @jackshirazi\r\n\r\n* Review by @jackshirazi\r\n\r\n* removed the synchronized locked\r\n\r\n* Review by @jackshirazi\r\n\r\n* A sibling span might have been started before the composite span\r\n\r\n* Fix NPE in `switch(composite.getCompressionStrategy())`\r\n\r\n* Added tests for parallel span compression",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.impl.transaction.Transaction.onTransactionStart(boolean,long,co.elastic.apm.agent.impl.sampling.Sampler)",
            "method_name_cc": "private void co.elastic.apm.agent.impl.transaction.Transaction.onTransactionStart(boolean startedAsChild, long epochMicros, Sampler sampler)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "private void co.elastic.apm.agent.impl.transaction.Transaction.onTransactionStart(boolean startedAsChild, long epochMicros, Sampler sampler)",
            "previous_method_pd": "private void co.elastic.apm.agent.impl.transaction.Transaction.onTransactionStart(boolean,long,co.elastic.apm.agent.impl.sampling.Sampler)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "2d6933b09e144bcf4057822a6b2f6d19d4374cbd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.4761904761904762,
                "p_value": 0.0,
                "effect_size": -0.014543951057471766,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5497954,
                    "after": 5680991
                }
            }
        },
        {
            "commit_message": "Added (initial) support for compressing spans (#2477)\n\n* Added (initial) support for compressing spans\r\n\r\n* Added #2477 to the changelog\r\n\r\n* Added test case for context propagation\r\n\r\n* It is not necessary to activate the transaction\r\n\r\n* Report \"compressed spans\" as dropped\r\n\r\n* Added assertions for span counts to compression tests\r\n\r\n* Move compression configuration to new class as discussed with @jackshirazi\r\n\r\n* Clear bufferedSpan when the transaction/span is recycled\r\n\r\n* Prevent NullPointerException\r\n\r\n* Cache \"SpanConfiguration\" when the transaction starts to provide consistent span compression\r\n\r\n* Review by @jackshirazi\r\n\r\n* Review by @jackshirazi\r\n\r\n* removed the synchronized locked\r\n\r\n* Review by @jackshirazi\r\n\r\n* A sibling span might have been started before the composite span\r\n\r\n* Fix NPE in `switch(composite.getCompressionStrategy())`\r\n\r\n* Added tests for parallel span compression",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(Span span)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(Span span)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "2d6933b09e144bcf4057822a6b2f6d19d4374cbd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -5.714285714285714,
                "p_value": 0.0,
                "effect_size": 0.13844239613279885,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5111246,
                    "after": 5411734
                }
            }
        },
        {
            "commit_message": "Added (initial) support for compressing spans (#2477)\n\n* Added (initial) support for compressing spans\r\n\r\n* Added #2477 to the changelog\r\n\r\n* Added test case for context propagation\r\n\r\n* It is not necessary to activate the transaction\r\n\r\n* Report \"compressed spans\" as dropped\r\n\r\n* Added assertions for span counts to compression tests\r\n\r\n* Move compression configuration to new class as discussed with @jackshirazi\r\n\r\n* Clear bufferedSpan when the transaction/span is recycled\r\n\r\n* Prevent NullPointerException\r\n\r\n* Cache \"SpanConfiguration\" when the transaction starts to provide consistent span compression\r\n\r\n* Review by @jackshirazi\r\n\r\n* Review by @jackshirazi\r\n\r\n* removed the synchronized locked\r\n\r\n* Review by @jackshirazi\r\n\r\n* A sibling span might have been started before the composite span\r\n\r\n* Fix NPE in `switch(composite.getCompressionStrategy())`\r\n\r\n* Added tests for parallel span compression",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "method_name_cc": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "previous_method_pd": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "2d6933b09e144bcf4057822a6b2f6d19d4374cbd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -4.098360655737705,
                "p_value": 0.0,
                "effect_size": 0.1881934557713134,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2433392,
                    "after": 2640355
                }
            }
        },
        {
            "commit_message": "Added (initial) support for compressing spans (#2477)\n\n* Added (initial) support for compressing spans\r\n\r\n* Added #2477 to the changelog\r\n\r\n* Added test case for context propagation\r\n\r\n* It is not necessary to activate the transaction\r\n\r\n* Report \"compressed spans\" as dropped\r\n\r\n* Added assertions for span counts to compression tests\r\n\r\n* Move compression configuration to new class as discussed with @jackshirazi\r\n\r\n* Clear bufferedSpan when the transaction/span is recycled\r\n\r\n* Prevent NullPointerException\r\n\r\n* Cache \"SpanConfiguration\" when the transaction starts to provide consistent span compression\r\n\r\n* Review by @jackshirazi\r\n\r\n* Review by @jackshirazi\r\n\r\n* removed the synchronized locked\r\n\r\n* Review by @jackshirazi\r\n\r\n* A sibling span might have been started before the composite span\r\n\r\n* Fix NPE in `switch(composite.getCompressionStrategy())`\r\n\r\n* Added tests for parallel span compression",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "2d6933b09e144bcf4057822a6b2f6d19d4374cbd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.45662100456621,
                "p_value": 0.0,
                "effect_size": 0.03117189948412996,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5240359,
                    "after": 5472945
                }
            }
        },
        {
            "commit_message": "Added (initial) support for compressing spans (#2477)\n\n* Added (initial) support for compressing spans\r\n\r\n* Added #2477 to the changelog\r\n\r\n* Added test case for context propagation\r\n\r\n* It is not necessary to activate the transaction\r\n\r\n* Report \"compressed spans\" as dropped\r\n\r\n* Added assertions for span counts to compression tests\r\n\r\n* Move compression configuration to new class as discussed with @jackshirazi\r\n\r\n* Clear bufferedSpan when the transaction/span is recycled\r\n\r\n* Prevent NullPointerException\r\n\r\n* Cache \"SpanConfiguration\" when the transaction starts to provide consistent span compression\r\n\r\n* Review by @jackshirazi\r\n\r\n* Review by @jackshirazi\r\n\r\n* removed the synchronized locked\r\n\r\n* Review by @jackshirazi\r\n\r\n* A sibling span might have been started before the composite span\r\n\r\n* Fix NPE in `switch(composite.getCompressionStrategy())`\r\n\r\n* Added tests for parallel span compression",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "2d6933b09e144bcf4057822a6b2f6d19d4374cbd",
            "performance_diff": 0.13364303053156512,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -13.24200913242009,
                "p_value": 0.0,
                "effect_size": 0.4577468165289339,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5240359,
                    "after": 5771859
                }
            }
        }
    ],
    "67515c23566ce4885914321e4271adcfa64c7f96": [
        {
            "commit_message": "Adding destination to Messaging transactions and spans (#906)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanContext(co.elastic.apm.agent.impl.context.SpanContext,co.elastic.apm.agent.impl.transaction.TraceContext)",
            "method_name_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanContext(SpanContext context, TraceContext traceContext)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanContext(SpanContext context, TraceContext traceContext)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeSpanContext(co.elastic.apm.agent.impl.context.SpanContext,co.elastic.apm.agent.impl.transaction.TraceContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "35e25f88ed0f75e708847b9081183940180af5bc",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -4.093264248704663,
                "p_value": 0.0,
                "effect_size": 0.20112942992872687,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4925282,
                    "after": 4920533
                }
            }
        },
        {
            "commit_message": "Adding destination to Messaging transactions and spans (#906)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.AbstractContext.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.AbstractContext.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/AbstractContext.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.AbstractContext.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.AbstractContext.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/AbstractContext.java",
            "previous_commit": "35e25f88ed0f75e708847b9081183940180af5bc",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.247191011235955,
                "p_value": 0.0,
                "effect_size": 0.052991908111873556,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 28354565,
                    "after": 30299167
                }
            }
        }
    ],
    "7803818b6d671e7cedd7d88a1590f88b3b3fc96c": [
        {
            "commit_message": "Add thread local context propagation\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.HttpNoopJsonReporterBenchmark.testReport",
            "method_name_pd": "public co.elastic.apm.impl.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "method_name_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_method_pd": "public co.elastic.apm.impl.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "44bdf966aa94cc9692d57b4de9f83dbf679aee0d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.552763819095476,
                "p_value": 1.5465686537702552e-304,
                "effect_size": -0.0632639310433543,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 235630,
                    "after": 228028
                }
            }
        },
        {
            "commit_message": "Add thread local context propagation\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.HttpNoopJsonReporterBenchmark.testReport",
            "method_name_pd": "public void co.elastic.apm.impl.Transaction.end()",
            "method_name_cc": "public void co.elastic.apm.impl.Span.end()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Span.java",
            "previous_method_cc": "public void co.elastic.apm.impl.Span.end()",
            "previous_method_pd": "public void co.elastic.apm.impl.Transaction.end()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Span.java",
            "previous_commit": "44bdf966aa94cc9692d57b4de9f83dbf679aee0d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.377358490566039,
                "p_value": 0.0,
                "effect_size": -0.06805491327308608,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 236533,
                    "after": 230278
                }
            }
        },
        {
            "commit_message": "Add thread local context propagation\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.HttpNoopJsonReporterBenchmark.testReport",
            "method_name_pd": "public void co.elastic.apm.impl.Span.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.Span.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Span.java",
            "previous_method_cc": "public void co.elastic.apm.impl.Span.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.Span.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Span.java",
            "previous_commit": "44bdf966aa94cc9692d57b4de9f83dbf679aee0d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.1320754716981132,
                "p_value": 0.0,
                "effect_size": -0.044990035616472995,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1604569,
                    "after": 1587755
                }
            }
        }
    ],
    "043cc50449d53854a9debc427740b420883bec20": [
        {
            "commit_message": "Add support for Spring-MVC (#44)\n\nAdd support for Spring-MVC\r\n\r\nSets the transaction name to ControllerName#methodName",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "f17f7b518dde2e81eeb2ca951087108a10a20d54",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -14.507042253521126,
                "p_value": 3.0281246835139706e-15,
                "effect_size": 0.16948373662669636,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1425,
                    "after": 1466
                }
            }
        }
    ],
    "259ebf52dac8ea5136e54b6aecb246b3ffe8fe2c": [
        {
            "commit_message": "Capture FQDN for host name (#3188)\n\n* draft impl. to capture FQDN\n\n* fix test + remove domain trimming\n\n* fix test for aws lambda\n\n* remove useless code\n\n* add powershell heuristic+remove compat requirement\n\n* fix broken test\n\n* update changelog",
            "benchmark": "co.elastic.apm.agent.benchmark.objectpool.ObjectPoolBenchmark.testJctoolsAtomicQueueObjectPool",
            "method_name_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.waitForMetadata() throws java.lang.Exception",
            "method_name_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.waitForMetadata()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.waitForMetadata()",
            "previous_method_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.waitForMetadata() throws java.lang.Exception",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "9437aa6e117aa6023038af2772bfd0d968ff4a00",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -12.061100005125839,
                "p_value": 0.3523838403888018,
                "effect_size": 0.1903114186851211,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 17,
                    "after": 17
                }
            }
        }
    ],
    "e060ca730692db0af81d29c025a3535867c7681c": [
        {
            "commit_message": "Send activation method for 8.7.1+ (#3095)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.objectpool.ObjectPoolBenchmark.testJctoolsAtomicQueueObjectPool",
            "method_name_pd": "public synchronized void co.elastic.apm.agent.report.serialize.DslJsonSerializer.blockUntilReady() throws java.lang.Exception",
            "method_name_cc": "public synchronized void co.elastic.apm.agent.report.serialize.DslJsonSerializer.blockUntilReady()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.blockUntilReady()",
            "previous_method_pd": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.blockUntilReady() throws java.lang.Exception",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "be3870b03e33e670edaaae35ba0f3584ff3984f2",
            "performance_diff": -0.14551934868143457,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.783333333333333,
                "p_value": 0.5710939048729955,
                "effect_size": 0.12156862745098039,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 17,
                    "after": 15
                }
            }
        }
    ],
    "4f6fa704e8a7af913fe533806123e7b382c43225": [
        {
            "commit_message": "Drop errors if queue is full\n\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public void co.elastic.apm.report.ApmServerReporter.report(co.elastic.apm.impl.transaction.Transaction)",
            "method_name_cc": "public void co.elastic.apm.report.ApmServerReporter.report(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/report/ApmServerReporter.java",
            "previous_method_cc": "public void co.elastic.apm.report.ApmServerReporter.report(Transaction transaction)",
            "previous_method_pd": "public void co.elastic.apm.report.ApmServerReporter.report(co.elastic.apm.impl.transaction.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/report/ApmServerReporter.java",
            "previous_commit": "e8464e5d3aa38802f25ad8489e607817a71e1671",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.3047735618115053,
                "p_value": 0.0,
                "effect_size": 0.014921034735557313,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5306537,
                    "after": 5492496
                }
            }
        }
    ],
    "379519e288c037b158ed1850a7d10f19502d06f8": [
        {
            "commit_message": "Update docs links and add SSL debug info (#1378)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "protected java.net.HttpURLConnection co.elastic.apm.agent.report.AbstractIntakeApiHandler.startRequest(java.lang.String) throws java.io.IOException",
            "method_name_cc": "protected HttpURLConnection co.elastic.apm.agent.report.AbstractIntakeApiHandler.startRequest(String endpoint)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/AbstractIntakeApiHandler.java",
            "previous_method_cc": "protected HttpURLConnection co.elastic.apm.agent.report.AbstractIntakeApiHandler.startRequest(String endpoint)",
            "previous_method_pd": "protected java.net.HttpURLConnection co.elastic.apm.agent.report.AbstractIntakeApiHandler.startRequest(java.lang.String) throws java.io.IOException",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/AbstractIntakeApiHandler.java",
            "previous_commit": "732177a8ce6a4d256c41ecf8e5351daae618a0e2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 3.089644578857571,
                "p_value": 0.0005439037603557074,
                "effect_size": -0.2416445623342175,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 145,
                    "after": 130
                }
            }
        }
    ],
    "516f8fb1f8a21e85f38c0333d033011a025f8ed3": [
        {
            "commit_message": "Issue 982 removed topicName field from Message (#993)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public boolean co.elastic.apm.agent.impl.context.Message.hasContent()",
            "method_name_cc": "public boolean co.elastic.apm.agent.impl.context.Message.hasContent()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.impl.context.Message.hasContent()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.impl.context.Message.hasContent()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java",
            "previous_commit": "1c23329725ebf6b4c37f49caa98e122b04eaca3c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 3.614457831325301,
                "p_value": 0.0,
                "effect_size": -0.16294492288257692,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7303366,
                    "after": 6996598
                }
            }
        },
        {
            "commit_message": "Issue 982 removed topicName field from Message (#993)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.Message.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.Message.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.Message.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.Message.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/Message.java",
            "previous_commit": "1c23329725ebf6b4c37f49caa98e122b04eaca3c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.41988950276243,
                "p_value": 0.0,
                "effect_size": -0.12002730774269846,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 24747935,
                    "after": 22882353
                }
            }
        }
    ],
    "0eac0af814b8686772c6d4e2212f4231524fa8ce": [
        {
            "commit_message": "Limit activation stack depth (#2783)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.impl.transaction.Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "method_name_cc": "public Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "previous_method_pd": "public co.elastic.apm.agent.impl.transaction.Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "d2807457e0cdda27bb4529f1885fb7f9172c5448",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 6.0402684563758395,
                "p_value": 0.0,
                "effect_size": -0.1771621934903654,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8509172,
                    "after": 9398055
                }
            }
        },
        {
            "commit_message": "Limit activation stack depth (#2783)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.impl.transaction.ElasticContext co.elastic.apm.agent.impl.ElasticApmTracer.currentContext()",
            "method_name_cc": "public ElasticContext<?> co.elastic.apm.agent.impl.ElasticApmTracer.currentContext()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public ElasticContext<?> co.elastic.apm.agent.impl.ElasticApmTracer.currentContext()",
            "previous_method_pd": "public co.elastic.apm.agent.impl.transaction.ElasticContext co.elastic.apm.agent.impl.ElasticApmTracer.currentContext()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "d2807457e0cdda27bb4529f1885fb7f9172c5448",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 5.668299510146956,
                "p_value": 0.0,
                "effect_size": -0.19543626801855113,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 19880826,
                    "after": 15668267
                }
            }
        },
        {
            "commit_message": "Limit activation stack depth (#2783)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.activate(co.elastic.apm.agent.impl.transaction.ElasticContext)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.activate(ElasticContext<?> context)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.activate(ElasticContext<?> context)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.activate(co.elastic.apm.agent.impl.transaction.ElasticContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "d2807457e0cdda27bb4529f1885fb7f9172c5448",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 7.687074829931973,
                "p_value": 0.0,
                "effect_size": -0.19697406159109385,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5600633,
                    "after": 6175257
                }
            }
        },
        {
            "commit_message": "Limit activation stack depth (#2783)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(co.elastic.apm.agent.impl.transaction.ElasticContext)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(ElasticContext<?> context)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(ElasticContext<?> context)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(co.elastic.apm.agent.impl.transaction.ElasticContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "d2807457e0cdda27bb4529f1885fb7f9172c5448",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -33.795013850415515,
                "p_value": 0.0,
                "effect_size": 0.9950920100906409,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5480269,
                    "after": 6179191
                }
            }
        }
    ],
    "4ab2b6f358eb040df407d830831d9d03a07eef67": [
        {
            "commit_message": "Fixing some async mechanisms lifecycle issues (#605)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(TraceContextHolder<?> holder)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(TraceContextHolder<?> holder)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "337e5ff3653ddd280fc77e20f6e28df329d70fa7",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.1627906976744187,
                "p_value": 0.0,
                "effect_size": -0.024382861363238743,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 21326450,
                    "after": 18553649
                }
            }
        }
    ],
    "20be1b23d4d0b7eea18b3c032f8b79bf64a68047": [
        {
            "commit_message": "Add option to not collect stack of fast spans\n\nPython equivalent: elastic/apm-agent-python#142\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.Span.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.Span.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Span.java",
            "previous_method_cc": "public void co.elastic.apm.impl.Span.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.Span.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Span.java",
            "previous_commit": "eca9328c7274e54d80caa4d26212cb9b0046276f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -26.76249144421629,
                "p_value": 2.6588635494619793e-39,
                "effect_size": 0.19976015781040124,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2907,
                    "after": 2843
                }
            }
        },
        {
            "commit_message": "Add option to not collect stack of fast spans\n\nPython equivalent: elastic/apm-agent-python#142\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "void co.elastic.apm.impl.ElasticApmTracer.recycle(co.elastic.apm.impl.Transaction)",
            "method_name_cc": "void co.elastic.apm.impl.ElasticApmTracer.recycle(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "void co.elastic.apm.impl.ElasticApmTracer.recycle(Transaction transaction)",
            "previous_method_pd": "void co.elastic.apm.impl.ElasticApmTracer.recycle(co.elastic.apm.impl.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "eca9328c7274e54d80caa4d26212cb9b0046276f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -12.06990715456035,
                "p_value": 0.0,
                "effect_size": 0.4682594817223021,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3318898,
                    "after": 3719258
                }
            }
        }
    ],
    "57d0dbd903fb22b2f288c8faf468e5d9e027f4d8": [
        {
            "commit_message": "Simplify DynamicTransformer API (#2164)\n\nInstead of DynamicTransformer.Accessor.get().ensureInstrumented,\r\nusers can just call DynamicTransformer.ensureInstrumented",
            "benchmark": "co.elastic.apm.agent.benchmark.objectpool.ObjectPoolBenchmark.testJctoolsAtomicQueueObjectPool",
            "method_name_pd": "public void co.elastic.apm.agent.collections.WeakMapCleaner.run()",
            "method_name_cc": "public void co.elastic.apm.agent.collections.WeakMapCleaner.run()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/WeakMapCleaner.java",
            "previous_method_cc": "public void co.elastic.apm.agent.collections.WeakMapCleaner.run()",
            "previous_method_pd": "public void co.elastic.apm.agent.collections.WeakMapCleaner.run()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/collections/WeakMapCleaner.java",
            "previous_commit": "c1fc21c01db6a4b5a556c69d996d50dc76be1a9c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.1674992194817357,
                "p_value": 0.2032646824036881,
                "effect_size": -0.08573135974993104,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 146,
                    "after": 149
                }
            }
        }
    ],
    "940e717ad9662d5009f6e6b6bd14f66c5bd896f0": [
        {
            "commit_message": "First draft of exception tracking\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.stacktrace.StackTraceFactoryBenchmark.testCurrentThreadStackTraceFactoryRecycling",
            "method_name_pd": "public void co.elastic.apm.impl.stacktrace.StacktraceFactory$CurrentThreadStackTraceFactory.fillStackTrace(java.util.List)",
            "method_name_cc": "public void co.elastic.apm.impl.stacktrace.CurrentThreadStackTraceFactory.fillStackTrace(List<Stacktrace> stacktrace)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/stacktrace/StacktraceFactory.java",
            "previous_method_cc": "public void co.elastic.apm.impl.stacktrace.CurrentThreadStackTraceFactory.fillStackTrace(List<Stacktrace> stacktrace)",
            "previous_method_pd": "public void co.elastic.apm.impl.stacktrace.StacktraceFactory$CurrentThreadStackTraceFactory.fillStackTrace(java.util.List)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/stacktrace/StacktraceFactory.java",
            "previous_commit": "32f5cf0557b7a157a4094f048f20a4761a314a82",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 67.83463961887199,
                "p_value": 0.0,
                "effect_size": -0.9996936686744708,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 596331,
                    "after": 439077
                }
            }
        }
    ],
    "3cb729ca42e8c3407be34337a4642634f5b6cbfa": [
        {
            "commit_message": "Discard fast methods coming from trace_methods (#577)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(TraceContextHolder<?> holder)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(TraceContextHolder<?> holder)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "0317d58c1849aefc3e45f4d18565a810803e7fde",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 6.004228329809725,
                "p_value": 0.0,
                "effect_size": -0.37763352077783885,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 10620106,
                    "after": 10897730
                }
            }
        },
        {
            "commit_message": "Discard fast methods coming from trace_methods (#577)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(Span span)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(Span span)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "0317d58c1849aefc3e45f4d18565a810803e7fde",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 5.806451612903226,
                "p_value": 0.0,
                "effect_size": -0.3690627761408021,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4890888,
                    "after": 5016242
                }
            }
        },
        {
            "commit_message": "Discard fast methods coming from trace_methods (#577)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "0317d58c1849aefc3e45f4d18565a810803e7fde",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 8.236239453595822,
                "p_value": 0.0,
                "effect_size": -0.528174792717796,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8049209,
                    "after": 8174745
                }
            }
        }
    ],
    "cc4d8a16a7aa85099bcb8b14da0cffb3e37b9d63": [
        {
            "commit_message": "Universal profiling integration: write shared memory (#3598)\n\n\r\n---------\r\n\r\nCo-authored-by: SylvainJuge <763082+SylvainJuge@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endTransaction(co.elastic.apm.agent.impl.transaction.Transaction)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endTransaction(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endTransaction(Transaction transaction)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endTransaction(co.elastic.apm.agent.impl.transaction.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "35e0d6d0de0b6d1753f2e6bdd5678a10c2267cd4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 9.963695038321903,
                "p_value": 0.0,
                "effect_size": -0.07512621786049006,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8391262,
                    "after": 8264299
                }
            }
        }
    ],
    "a8096b32ec575fb1389b8e1061f9fb77a9fd7d7d": [
        {
            "commit_message": "Fix json and reporter\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.HttpNoopJsonReporterBenchmark.sendPayload",
            "method_name_pd": "public co.elastic.apm.impl.Transaction co.elastic.apm.impl.Transaction.start(co.elastic.apm.impl.ElasticApmTracer,long)",
            "method_name_cc": "public Transaction co.elastic.apm.impl.Transaction.start(ElasticApmTracer tracer, long startTimestampNanos)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Transaction.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.Transaction.start(ElasticApmTracer tracer, long startTimestampNanos)",
            "previous_method_pd": "public co.elastic.apm.impl.Transaction co.elastic.apm.impl.Transaction.start(co.elastic.apm.impl.ElasticApmTracer,long)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Transaction.java",
            "previous_commit": "2ff13a01101bafab36fe0faa8492557d5b8e4947",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.6229817870763092,
                "p_value": 0.11208335214937902,
                "effect_size": 0.0341412419552893,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 1473,
                    "after": 1417
                }
            }
        },
        {
            "commit_message": "Fix json and reporter\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.HttpNoopJsonReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Transaction.java",
            "previous_commit": "2ff13a01101bafab36fe0faa8492557d5b8e4947",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -8.699122106943335,
                "p_value": 0.0,
                "effect_size": 0.6585301090586193,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 711850,
                    "after": 820434
                }
            }
        }
    ],
    "45857cea69a82ac97d5f1bee266f58fbedddb43e": [
        {
            "commit_message": "Attempting System CL when Context CL is null and caching loading failure (#718)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder) throws java.lang.Throwable",
            "method_name_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(TraceContextHolder<?> context)",
            "file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(TraceContextHolder<?> context)",
            "previous_method_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder) throws java.lang.Throwable",
            "previous_file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_commit": "ff04b0693b2de435f9e6111e475088d500ea6262",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.9936766034327009,
                "p_value": 0.0,
                "effect_size": 0.10223766688834605,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 12568563,
                    "after": 9979376
                }
            }
        },
        {
            "commit_message": "Attempting System CL when Context CL is null and caching loading failure (#718)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.afterDeactivate() throws java.lang.Throwable",
            "method_name_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.afterDeactivate()",
            "file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.afterDeactivate()",
            "previous_method_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.afterDeactivate() throws java.lang.Throwable",
            "previous_file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_commit": "ff04b0693b2de435f9e6111e475088d500ea6262",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.8237986270022883,
                "p_value": 0.0,
                "effect_size": 0.08377143435577525,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 12556840,
                    "after": 9987738
                }
            }
        }
    ],
    "83167b5d3f319e719539e902e755f0046e9120e7": [
        {
            "commit_message": "Log request and response on TRACE level\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.HttpCborJacksonReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.report.serialize.JacksonPayloadSerializer.serializePayload(okio.BufferedSink,co.elastic.apm.impl.payload.Payload) throws java.io.IOException",
            "method_name_cc": "public void co.elastic.apm.report.serialize.JacksonPayloadSerializer.serializePayload(BufferedSink sink, Payload payload)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/report/serialize/JacksonPayloadSerializer.java",
            "previous_method_cc": "public void co.elastic.apm.report.serialize.JacksonPayloadSerializer.serializePayload(BufferedSink sink, Payload payload)",
            "previous_method_pd": "public void co.elastic.apm.report.serialize.JacksonPayloadSerializer.serializePayload(okio.BufferedSink,co.elastic.apm.impl.payload.Payload) throws java.io.IOException",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/report/serialize/JacksonPayloadSerializer.java",
            "previous_commit": "78d25514be5362e3800fa460db58a9b59bef7948",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.15313641242327627,
                "p_value": 0.35982709284226055,
                "effect_size": 0.013396478860034079,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 3093,
                    "after": 3138
                }
            }
        }
    ],
    "796c694d3f9270b5e163d762f39ab7ba50b2df90": [
        {
            "commit_message": "Exclude virtual threads from inferred spans feature (#3244)\n\n\r\n---------\r\n\r\nCo-authored-by: SylvainJuge <763082+SylvainJuge@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.AbstractSpan)",
            "method_name_cc": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.beforeActivate(AbstractSpan<?> context)",
            "file": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.beforeActivate(AbstractSpan<?> context)",
            "previous_method_pd": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.AbstractSpan)",
            "previous_file": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java",
            "previous_commit": "0f29fac55461cd1b0386046f03edb08c007832ba",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.6871278057718736,
                "p_value": 0.0010971211098773578,
                "effect_size": -0.000943558544820768,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8368625,
                    "after": 7624614
                }
            }
        },
        {
            "commit_message": "Exclude virtual threads from inferred spans feature (#3244)\n\n\r\n---------\r\n\r\nCo-authored-by: SylvainJuge <763082+SylvainJuge@users.noreply.github.com>",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.afterDeactivate(co.elastic.apm.agent.impl.transaction.AbstractSpan)",
            "method_name_cc": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.afterDeactivate(AbstractSpan<?> deactivatedContext)",
            "file": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.afterDeactivate(AbstractSpan<?> deactivatedContext)",
            "previous_method_pd": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.afterDeactivate(co.elastic.apm.agent.impl.transaction.AbstractSpan)",
            "previous_file": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java",
            "previous_commit": "0f29fac55461cd1b0386046f03edb08c007832ba",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.0,
                "p_value": 0.0,
                "effect_size": -0.022895908248133433,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 9990571,
                    "after": 8032033
                }
            }
        }
    ],
    "408489e89964222557fa907be57df1efab8ccfbd": [
        {
            "commit_message": "Disabling Log correlation when agent is inactive (#787)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder) throws java.lang.Throwable",
            "method_name_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(TraceContextHolder<?> context)",
            "file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(TraceContextHolder<?> context)",
            "previous_method_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder) throws java.lang.Throwable",
            "previous_file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_commit": "0c1742419a386e04ffbf1f6b4e2006e6d01e9085",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.707338638373121,
                "p_value": 0.0,
                "effect_size": 0.015362108091796332,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8428035,
                    "after": 9392730
                }
            }
        },
        {
            "commit_message": "Disabling Log correlation when agent is inactive (#787)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.afterDeactivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder) throws java.lang.Throwable",
            "method_name_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.afterDeactivate(TraceContextHolder<?> deactivatedContext)",
            "file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.afterDeactivate(TraceContextHolder<?> deactivatedContext)",
            "previous_method_pd": "public void co.elastic.apm.agent.slf4j.Slf4JMdcActivationListener.afterDeactivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder) throws java.lang.Throwable",
            "previous_file": "apm-agent-plugins/apm-slf4j-plugin/src/main/java/co/elastic/apm/agent/slf4j/Slf4JMdcActivationListener.java",
            "previous_commit": "0c1742419a386e04ffbf1f6b4e2006e6d01e9085",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 3.6557149467838967,
                "p_value": 0.0,
                "effect_size": -0.27873445808004577,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8068310,
                    "after": 10766740
                }
            }
        }
    ],
    "1f1857b02849bedb248c813848ed59bcdca40d3c": [
        {
            "commit_message": "Universal profiling integration: Added serialization of stacktrace IDs as profiler_stack_trace_ids otel attributes (#3607)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.objectpool.ObjectPoolBenchmark.testJctoolsAtomicQueueObjectPool",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "b14f6588f6c639de29cc19c9df8731ac494a185d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.0058403634003894,
                "p_value": 0.0,
                "effect_size": -0.009887407117839463,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 36146064,
                    "after": 33600623
                }
            }
        }
    ],
    "00d0da029c941b1d99e151558499069bf58194e5": [
        {
            "commit_message": "Refactor reference counting (#728)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Span.decrementReferences()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Span.decrementReferences()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Span.decrementReferences()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Span.decrementReferences()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "35f13a95fef02f3daf8d9c1c2bf26b7cc8027218",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -4.443654461429079,
                "p_value": 0.0,
                "effect_size": 0.10147140857044057,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 21794540,
                    "after": 24943362
                }
            }
        }
    ],
    "15b547a9f64f82e46a88684e9de111f72660d45a": [
        {
            "commit_message": "Resetting TraceContext#transactionId and making ApmSpan#dispatcher volatile (#738)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.objectpool.ObjectPoolBenchmark.testJctoolsQueueObjectPool",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceContext.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceContext.java",
            "previous_commit": "5fd874d7c59c820b6b19115e3080d34202ebf4bf",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.9792626728110598,
                "p_value": 0.0,
                "effect_size": 0.009200440316042478,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 96408231,
                    "after": 88016916
                }
            }
        }
    ],
    "044b06835157ed6a80071adad3d2dd23cbefe108": [
        {
            "commit_message": "Only track breakdown metrics if enabled (#737)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "protected void co.elastic.apm.agent.impl.transaction.Transaction.afterEnd()",
            "method_name_cc": "protected void co.elastic.apm.agent.impl.transaction.Transaction.afterEnd()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "protected void co.elastic.apm.agent.impl.transaction.Transaction.afterEnd()",
            "previous_method_pd": "protected void co.elastic.apm.agent.impl.transaction.Transaction.afterEnd()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "15f57f4d861bdfa08f200441760edddc4916560f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -27.968851395197923,
                "p_value": 0.0,
                "effect_size": 0.5043714026135119,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 10934540,
                    "after": 13743863
                }
            }
        }
    ],
    "83c698172889d68b49e25da02e9f4693ae8e367e": [
        {
            "commit_message": "Only iterate stack if not empty (#862)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.impl.transaction.Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "method_name_cc": "public Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "previous_method_pd": "public co.elastic.apm.agent.impl.transaction.Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "3541ec0fe28649ff6a767bc73ddbcbb3552e9924",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -3.5378414688759516,
                "p_value": 0.0,
                "effect_size": 0.2903786648200895,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 21077506,
                    "after": 17167797
                }
            }
        }
    ],
    "076a95b384924e11f5a071ab8654672747b75c66": [
        {
            "commit_message": "Revert \"Only track breakdown metrics if enabled (#737)\"\n\nThis reverts commit 044b06835157ed6a80071adad3d2dd23cbefe108.\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "protected void co.elastic.apm.agent.impl.transaction.Transaction.afterEnd()",
            "method_name_cc": "protected void co.elastic.apm.agent.impl.transaction.Transaction.afterEnd()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "protected void co.elastic.apm.agent.impl.transaction.Transaction.afterEnd()",
            "previous_method_pd": "protected void co.elastic.apm.agent.impl.transaction.Transaction.afterEnd()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "044b06835157ed6a80071adad3d2dd23cbefe108",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -18.581160441625556,
                "p_value": 0.0,
                "effect_size": 0.3073657121685611,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 12383053,
                    "after": 13359481
                }
            }
        }
    ],
    "30f5f3d1ca7deaadd8e156bea032b4da03e2e2c5": [
        {
            "commit_message": "Replace binary propagation with UTF8 encoded text propagation (#3300)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Id.writeAsHex(com.dslplatform.json.JsonWriter)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Id.writeAsHex(JsonWriter jw)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Id.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Id.writeAsHex(JsonWriter jw)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Id.writeAsHex(com.dslplatform.json.JsonWriter)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Id.java",
            "previous_commit": "4c248af090d35cc97b8bc8b36744f15ae5236b91",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.6824385805277525,
                "p_value": 0.0,
                "effect_size": 0.06545632269800898,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 13781025,
                    "after": 16263655
                }
            }
        }
    ],
    "5a9bfac1e2698b06bb985b0358270022690788eb": [
        {
            "commit_message": "Remove Jackson from production code\n",
            "benchmark": "co.elastic.apm.benchmark.reporter.HttpDslJsonReporterContinuousBenchmark.testSerialization",
            "method_name_pd": "private void co.elastic.apm.report.serialize.DslJsonSerializer.serializeSpanContext(co.elastic.apm.impl.transaction.SpanContext)",
            "method_name_cc": "private void co.elastic.apm.report.serialize.DslJsonSerializer.serializeSpanContext(SpanContext context)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "private void co.elastic.apm.report.serialize.DslJsonSerializer.serializeSpanContext(SpanContext context)",
            "previous_method_pd": "private void co.elastic.apm.report.serialize.DslJsonSerializer.serializeSpanContext(co.elastic.apm.impl.transaction.SpanContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/report/serialize/DslJsonSerializer.java",
            "previous_commit": "a08c026e731e44f2336835891bf21fd5cc5f8181",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.689797889218459,
                "p_value": 0.02435029793524885,
                "effect_size": 0.007128348986627572,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 63592,
                    "after": 69713
                }
            }
        }
    ],
    "5f2af8f264142c1e5c16698d547499b78529f656": [
        {
            "commit_message": "Noop Transaction when not sampled\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.transaction.Transaction.withResult(java.lang.String)",
            "method_name_cc": "public Transaction co.elastic.apm.impl.transaction.Transaction.withResult(String result)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.transaction.Transaction.withResult(String result)",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.transaction.Transaction.withResult(java.lang.String)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "dbb70b411567a4ff49e80b72552956705aa2fef4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.23103581055063535,
                "p_value": 0.00035021269588097044,
                "effect_size": -0.0030990806283814837,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 889021,
                    "after": 885291
                }
            }
        },
        {
            "commit_message": "Noop Transaction when not sampled\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "method_name_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "dbb70b411567a4ff49e80b72552956705aa2fef4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.11333585190782018,
                "p_value": 4.223716672556835e-10,
                "effect_size": 0.005461880480116582,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 873410,
                    "after": 869980
                }
            }
        },
        {
            "commit_message": "Noop Transaction when not sampled\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Transaction.end()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Transaction.end()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Transaction.end()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Transaction.end()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "dbb70b411567a4ff49e80b72552956705aa2fef4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.3913894324853229,
                "p_value": 0.07137761999273841,
                "effect_size": 0.0015982699845969255,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 849765,
                    "after": 847164
                }
            }
        }
    ],
    "d838bb49dcb27dfed1bee5de127bcc026768d3dd": [
        {
            "commit_message": "Drop non-string labels if connected to older APM Server (#746)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeLabels(co.elastic.apm.agent.impl.context.AbstractContext)",
            "method_name_cc": "void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeLabels(AbstractContext context)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeLabels(AbstractContext context)",
            "previous_method_pd": "void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeLabels(co.elastic.apm.agent.impl.context.AbstractContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "808e002e289d9d94470eef9cce08fb9aff97a16b",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.6547359231776516,
                "p_value": 0.0,
                "effect_size": -0.10644132575430539,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 10015926,
                    "after": 8736372
                }
            }
        }
    ],
    "8aaaf6a87be4dd5c172004f309e0f8ddd1f8474a": [
        {
            "commit_message": "Remote config (#640)\n\ncloses #636",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private java.net.HttpURLConnection co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.startRequest() throws java.io.IOException",
            "method_name_cc": "private HttpURLConnection co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.startRequest()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_method_cc": "private HttpURLConnection co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.startRequest()",
            "previous_method_pd": "private java.net.HttpURLConnection co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.startRequest() throws java.io.IOException",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_commit": "b36f20aad336f5aa6e63312730c3e3c444fc40bd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -3.4223490893366417,
                "p_value": 3.5620555660591015e-07,
                "effect_size": 0.39285714285714285,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 113,
                    "after": 112
                }
            }
        },
        {
            "commit_message": "Remote config (#640)\n\ncloses #636",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeMetaDataNdJson(co.elastic.apm.agent.impl.MetaData)",
            "method_name_cc": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeMetaDataNdJson(MetaData metaData)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeMetaDataNdJson(MetaData metaData)",
            "previous_method_pd": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeMetaDataNdJson(co.elastic.apm.agent.impl.MetaData)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "b36f20aad336f5aa6e63312730c3e3c444fc40bd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -6.883918798917869,
                "p_value": 0.398724622982533,
                "effect_size": 0.06548672566371681,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 110,
                    "after": 113
                }
            }
        }
    ],
    "27fbdd1335444fee178531002d8f028f65e15d46": [
        {
            "commit_message": "Populate URL.full (#25)\n\nUsing a StringBuilder to not cause allocations when constructing full\r\n\r\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.context.Url.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.context.Url.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/context/Url.java",
            "previous_method_cc": "public void co.elastic.apm.impl.context.Url.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.context.Url.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/context/Url.java",
            "previous_commit": "f9da8c2ad7df10a4e051533921bd3906fab8c998",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -17.871656812546767,
                "p_value": 9.142691926888742e-12,
                "effect_size": 0.1465377989660035,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1427,
                    "after": 1462
                }
            }
        }
    ],
    "0f29fac55461cd1b0386046f03edb08c007832ba": [
        {
            "commit_message": "Removed ThreadLocal usage for tracestate serialization (#3240)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceState.set(double,java.lang.String)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceState.set(double rate, String headerValue)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceState.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceState.set(double rate, String headerValue)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceState.set(double,java.lang.String)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceState.java",
            "previous_commit": "ee87252ea128578ea6b28e7c4b7d33e1ea3f83e0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -22.247191011235955,
                "p_value": 0.0,
                "effect_size": 0.14870754282360085,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7412169,
                    "after": 7933250
                }
            }
        },
        {
            "commit_message": "Removed ThreadLocal usage for tracestate serialization (#3240)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.TraceState.copyFrom(co.elastic.apm.agent.impl.transaction.TraceState)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.TraceState.copyFrom(TraceState other)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceState.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.TraceState.copyFrom(TraceState other)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.TraceState.copyFrom(co.elastic.apm.agent.impl.transaction.TraceState)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/TraceState.java",
            "previous_commit": "ee87252ea128578ea6b28e7c4b7d33e1ea3f83e0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -5.289330922242315,
                "p_value": 0.0,
                "effect_size": 0.283362279319899,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6705618,
                    "after": 7264642
                }
            }
        }
    ],
    "78e30a7bcf7cbfc39cfe771e01b7ec0c3e8577bd": [
        {
            "commit_message": "Remove StackWalkerStackTraceFactory\n\nIt's not faster and allocates more memory\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.stacktrace.StackTraceFactoryBenchmark.testCurrentThreadStackTraceFactoryRecycling",
            "method_name_pd": "public void co.elastic.apm.impl.stacktrace.StacktraceFactory$CurrentThreadStackTraceFactory.fillStackTrace(java.util.List)",
            "method_name_cc": "public void co.elastic.apm.impl.stacktrace.CurrentThreadStackTraceFactory.fillStackTrace(List<Stacktrace> stacktrace)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/stacktrace/StacktraceFactory.java",
            "previous_method_cc": "public void co.elastic.apm.impl.stacktrace.CurrentThreadStackTraceFactory.fillStackTrace(List<Stacktrace> stacktrace)",
            "previous_method_pd": "public void co.elastic.apm.impl.stacktrace.StacktraceFactory$CurrentThreadStackTraceFactory.fillStackTrace(java.util.List)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/stacktrace/StacktraceFactory.java",
            "previous_commit": "4ea8d19ea4827f1055d5aa17f244e2b08a33ddd2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.1551951579110732,
                "p_value": 3.530346313074772e-111,
                "effect_size": -0.024167006863041116,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 566414,
                    "after": 579720
                }
            }
        }
    ],
    "9448f60455b00ebdf682e24bd5e9759b3e05e734": [
        {
            "commit_message": "Add support for custom context (#606)\n\ncloses #604",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.writeLongStringValue(java.lang.String)",
            "method_name_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.writeLongStringValue(String value)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.writeLongStringValue(String value)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.writeLongStringValue(java.lang.String)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "ef51f6fdd448df3edd40379fd2735d34ffab18ce",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 177.8797996661102,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4155600,
                    "after": 3036916
                }
            }
        },
        {
            "commit_message": "Add support for custom context (#606)\n\ncloses #604",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeLabels(co.elastic.apm.agent.impl.context.AbstractContext)",
            "method_name_cc": "void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeLabels(AbstractContext context)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeLabels(AbstractContext context)",
            "previous_method_pd": "void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeLabels(co.elastic.apm.agent.impl.context.AbstractContext)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "ef51f6fdd448df3edd40379fd2735d34ffab18ce",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.9408602150537635,
                "p_value": 0.0,
                "effect_size": 0.10558565017074102,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8606623,
                    "after": 6350828
                }
            }
        }
    ],
    "3e4005dff3c41326dd180bc181dd6821c3c3ff51": [
        {
            "commit_message": "Implement partial transactions for AWS Lambda (#3134)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.objectpool.ObjectPoolBenchmark.testJctoolsAtomicQueueObjectPool",
            "method_name_pd": "public boolean co.elastic.apm.agent.configuration.ServerlessConfiguration.runsOnAwsLambda()",
            "method_name_cc": "public boolean co.elastic.apm.agent.configuration.ServerlessConfiguration.runsOnAwsLambda()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/ServerlessConfiguration.java",
            "previous_method_cc": "public boolean co.elastic.apm.agent.configuration.ServerlessConfiguration.runsOnAwsLambda()",
            "previous_method_pd": "public boolean co.elastic.apm.agent.configuration.ServerlessConfiguration.runsOnAwsLambda()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/configuration/ServerlessConfiguration.java",
            "previous_commit": "2d9f8cd3510963a90bd12bc06a1ceac886bbf5fe",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.7391621661071377,
                "p_value": 0.5443701458566098,
                "effect_size": 0.1527777777777778,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        },
        {
            "commit_message": "Implement partial transactions for AWS Lambda (#3134)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.objectpool.ObjectPoolBenchmark.testJctoolsAtomicQueueObjectPool",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "2d9f8cd3510963a90bd12bc06a1ceac886bbf5fe",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.373104812129202,
                "p_value": 0.0,
                "effect_size": -0.01547837223385055,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 40600037,
                    "after": 38546183
                }
            }
        }
    ],
    "8e44cb51b862572d08ff6c0e44e5fbb5529fd159": [
        {
            "commit_message": "SQL parsing improvements (#696)\n\nsupport for CALL using JDBC escape syntax\r\nsupport for MERGE\r\nsupport for DB links\r\n\r\nfixes #676",
            "benchmark": "co.elastic.apm.agent.benchmark.sql.SignatureParserBenchmark.parseLongQuery",
            "method_name_pd": "public void co.elastic.apm.agent.jdbc.signature.Scanner.setQuery(java.lang.String)",
            "method_name_cc": "public void co.elastic.apm.agent.jdbc.signature.Scanner.setQuery(String sql)",
            "file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/signature/Scanner.java",
            "previous_method_cc": "public void co.elastic.apm.agent.jdbc.signature.Scanner.setQuery(String sql)",
            "previous_method_pd": "public void co.elastic.apm.agent.jdbc.signature.Scanner.setQuery(java.lang.String)",
            "previous_file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/signature/Scanner.java",
            "previous_commit": "8aaaf6a87be4dd5c172004f309e0f8ddd1f8474a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.40816326530612246,
                "p_value": 0.0,
                "effect_size": 0.0549330509237449,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1007166,
                    "after": 828773
                }
            }
        },
        {
            "commit_message": "SQL parsing improvements (#696)\n\nsupport for CALL using JDBC escape syntax\r\nsupport for MERGE\r\nsupport for DB links\r\n\r\nfixes #676",
            "benchmark": "co.elastic.apm.agent.benchmark.sql.SignatureParserBenchmark.parseLongQuery",
            "method_name_pd": "public co.elastic.apm.agent.jdbc.signature.Scanner$Token co.elastic.apm.agent.jdbc.signature.Scanner.scan()",
            "method_name_cc": "public Token co.elastic.apm.agent.jdbc.signature.Scanner.scan()",
            "file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/signature/Scanner.java",
            "previous_method_cc": "public Token co.elastic.apm.agent.jdbc.signature.Scanner.scan()",
            "previous_method_pd": "public co.elastic.apm.agent.jdbc.signature.Scanner$Token co.elastic.apm.agent.jdbc.signature.Scanner.scan()",
            "previous_file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/signature/Scanner.java",
            "previous_commit": "8aaaf6a87be4dd5c172004f309e0f8ddd1f8474a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.7381889763779528,
                "p_value": 0.0,
                "effect_size": 0.05836087004732906,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 31239725,
                    "after": 25717754
                }
            }
        },
        {
            "commit_message": "SQL parsing improvements (#696)\n\nsupport for CALL using JDBC escape syntax\r\nsupport for MERGE\r\nsupport for DB links\r\n\r\nfixes #676",
            "benchmark": "co.elastic.apm.agent.benchmark.sql.SignatureParserBenchmark.parseLongQuery",
            "method_name_pd": "public void co.elastic.apm.agent.jdbc.signature.SignatureParser.querySignature(java.lang.String,java.lang.StringBuilder,boolean)",
            "method_name_cc": "public void co.elastic.apm.agent.jdbc.signature.SignatureParser.querySignature(String query, StringBuilder signature, boolean preparedStatement)",
            "file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/signature/SignatureParser.java",
            "previous_method_cc": "public void co.elastic.apm.agent.jdbc.signature.SignatureParser.querySignature(String query, StringBuilder signature, boolean preparedStatement)",
            "previous_method_pd": "public void co.elastic.apm.agent.jdbc.signature.SignatureParser.querySignature(java.lang.String,java.lang.StringBuilder,boolean)",
            "previous_file": "apm-agent-plugins/apm-jdbc-plugin/src/main/java/co/elastic/apm/agent/jdbc/signature/SignatureParser.java",
            "previous_commit": "8aaaf6a87be4dd5c172004f309e0f8ddd1f8474a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.2396335729669063,
                "p_value": 3.874711169101009e-195,
                "effect_size": -0.026445012383103907,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 926130,
                    "after": 779595
                }
            }
        }
    ],
    "f9da8c2ad7df10a4e051533921bd3906fab8c998": [
        {
            "commit_message": "Implement sampling (#16)\n\nImplement sampling\r\n\r\n(closes #3)",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "method_name_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "a15c021f15625a4a45fb84c9fea9e0c053ae4b24",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.812614074224295,
                "p_value": 1.6042773749996697e-304,
                "effect_size": 0.029388616673904824,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1098735,
                    "after": 1050251
                }
            }
        }
    ],
    "f98c48dfe9e647cf11efa5fe7dda531a28967dcf": [
        {
            "commit_message": "fix span stacktrace capture (#3474)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "method_name_cc": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "previous_method_pd": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "fa6fed17951019a87fa7328249286485e5563f88",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 17.920691408235893,
                "p_value": 0.0,
                "effect_size": -0.10792546131935046,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7945973,
                    "after": 6594879
                }
            }
        },
        {
            "commit_message": "fix span stacktrace capture (#3474)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.impl.ElasticApmTracer.reportSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "method_name_cc": "private void co.elastic.apm.agent.impl.ElasticApmTracer.reportSpan(Span span)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "private void co.elastic.apm.agent.impl.ElasticApmTracer.reportSpan(Span span)",
            "previous_method_pd": "private void co.elastic.apm.agent.impl.ElasticApmTracer.reportSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "fa6fed17951019a87fa7328249286485e5563f88",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.37226617031177295,
                "p_value": 3.879197826547934e-47,
                "effect_size": -0.004629307211812789,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7155935,
                    "after": 5901474
                }
            }
        }
    ],
    "f47ca26bad8a3550bd7cd131ac9048a28e808b22": [
        {
            "commit_message": "Add support for global labels (#543)\n\ncloses #507",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeMetaDataNdJson(co.elastic.apm.agent.impl.MetaData)",
            "method_name_cc": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeMetaDataNdJson(MetaData metaData)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeMetaDataNdJson(MetaData metaData)",
            "previous_method_pd": "public void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeMetaDataNdJson(co.elastic.apm.agent.impl.MetaData)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "75b50b1c90a44967dff6c1faea3631747528163a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.305147709180966,
                "p_value": 0.7944147555242586,
                "effect_size": -0.020280057943022695,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 114,
                    "after": 109
                }
            }
        }
    ],
    "d35aeac22221768252bb8d0947caa50e0b4ced40": [
        {
            "commit_message": "Add value type for TransactionId\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.transaction.Transaction.start(co.elastic.apm.impl.ElasticApmTracer,long,boolean)",
            "method_name_cc": "public Transaction co.elastic.apm.impl.transaction.Transaction.start(ElasticApmTracer tracer, long startTimestampNanos, boolean sampled)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.transaction.Transaction.start(ElasticApmTracer tracer, long startTimestampNanos, boolean sampled)",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.transaction.Transaction.start(co.elastic.apm.impl.ElasticApmTracer,long,boolean)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "ba6adb517d862c9d96550b7c51a58b02c9c91a95",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -18.440762026037564,
                "p_value": 1.2533099811735738e-29,
                "effect_size": 0.24532189277871513,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1411,
                    "after": 1421
                }
            }
        },
        {
            "commit_message": "Add value type for TransactionId\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "ba6adb517d862c9d96550b7c51a58b02c9c91a95",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -16.434336023477623,
                "p_value": 3.480696913788898e-51,
                "effect_size": 0.3264948640507459,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1426,
                    "after": 1408
                }
            }
        }
    ],
    "8237da90b6692ec179d6ce07d6a602e1cc4e8172": [
        {
            "commit_message": "Use java.lang.ThreadLocal instead of DetachedThreadLocal (#78)\n\nAs DetachedThreadLocals allocate objects on each lookup",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.impl.ElasticApmTracer.releaseActiveSpan()",
            "method_name_cc": "public void co.elastic.apm.impl.ElasticApmTracer.releaseActiveSpan()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.impl.ElasticApmTracer.releaseActiveSpan()",
            "previous_method_pd": "public void co.elastic.apm.impl.ElasticApmTracer.releaseActiveSpan()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "6ea644050e2e4dece55bc382eaf43543aa8df504",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -4.29116756614453,
                "p_value": 0.0001342242891708843,
                "effect_size": -0.005837013576216687,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 303615,
                    "after": 269103
                }
            }
        },
        {
            "commit_message": "Use java.lang.ThreadLocal instead of DetachedThreadLocal (#78)\n\nAs DetachedThreadLocals allocate objects on each lookup",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.impl.ElasticApmTracer.releaseActiveTransaction()",
            "method_name_cc": "public void co.elastic.apm.impl.ElasticApmTracer.releaseActiveTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.impl.ElasticApmTracer.releaseActiveTransaction()",
            "previous_method_pd": "public void co.elastic.apm.impl.ElasticApmTracer.releaseActiveTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "6ea644050e2e4dece55bc382eaf43543aa8df504",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -6.837606837606838,
                "p_value": 0.0,
                "effect_size": 0.21986587383413414,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 296290,
                    "after": 259512
                }
            }
        }
    ],
    "d38fd8f8c022c5d7074870911d3c758eaf7af8a6": [
        {
            "commit_message": "Use sequential Span ids\n\nAPM server currently can't cope with Span ids > 1,000,000\nSo instead of setting it to a random long, use a transaction-\nscoped counter to assign sequential span ids\n\nsee https://github.com/elastic/apm-server/issues/775\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "83167b5d3f319e719539e902e755f0046e9120e7",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -10.195042005640124,
                "p_value": 0.0015851784020217753,
                "effect_size": 0.06786372073528531,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1465,
                    "after": 1425
                }
            }
        }
    ],
    "4976576c591e3699dfc271ca7a1ede9d463060aa": [
        {
            "commit_message": "add trace level logs for span compressed spans (#3228)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "method_name_cc": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "previous_method_pd": "protected void co.elastic.apm.agent.impl.transaction.Span.afterEnd()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "166401cd8270f128dcd69598157d140a01075f92",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 12.588957055214726,
                "p_value": 5.008110856635376e-25,
                "effect_size": -0.002694378460327106,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 10569426,
                    "after": 9142870
                }
            }
        }
    ],
    "fbb5d684ee8567f405aaf2305ad04c4a02cfdf06": [
        {
            "commit_message": "Fixed BodyCaptureImpl recycling (#3734)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.context.BodyCaptureImpl.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.context.BodyCaptureImpl.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/BodyCaptureImpl.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.context.BodyCaptureImpl.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.context.BodyCaptureImpl.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/context/BodyCaptureImpl.java",
            "previous_commit": "b0c6af7a9819f1608fdf8ca1e551a4b766b59761",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.2305433186490458,
                "p_value": 0.0,
                "effect_size": 0.06249663598246723,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 16101297,
                    "after": 14108306
                }
            }
        }
    ],
    "7d7f828160f3d63e215321d92182d92e85ddd050": [
        {
            "commit_message": "Report ErrorCaptures to APM server\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public void co.elastic.apm.report.ReportingEventHandler.onEvent(co.elastic.apm.report.ApmServerReporter$ReportingEvent,long,boolean)",
            "method_name_cc": "public void co.elastic.apm.report.ReportingEventHandler.onEvent(ApmServerReporter.ReportingEvent event, long sequence, boolean endOfBatch)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/report/ReportingEventHandler.java",
            "previous_method_cc": "public void co.elastic.apm.report.ReportingEventHandler.onEvent(ApmServerReporter.ReportingEvent event, long sequence, boolean endOfBatch)",
            "previous_method_pd": "public void co.elastic.apm.report.ReportingEventHandler.onEvent(co.elastic.apm.report.ApmServerReporter$ReportingEvent,long,boolean)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/report/ReportingEventHandler.java",
            "previous_commit": "7e3b21aff82b5ed75331757eec2d7ab5026a4c42",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "Report ErrorCaptures to APM server\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public void co.elastic.apm.impl.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Transaction.java",
            "previous_commit": "7e3b21aff82b5ed75331757eec2d7ab5026a4c42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 10.804084785033897,
                "p_value": 0.0,
                "effect_size": -0.17970115530795103,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 49794,
                    "after": 35980
                }
            }
        },
        {
            "commit_message": "Report ErrorCaptures to APM server\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public void co.elastic.apm.impl.Transaction.recycle()",
            "method_name_cc": "public void co.elastic.apm.impl.Transaction.recycle()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.Transaction.recycle()",
            "previous_method_pd": "public void co.elastic.apm.impl.Transaction.recycle()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/Transaction.java",
            "previous_commit": "7e3b21aff82b5ed75331757eec2d7ab5026a4c42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 11.199287499335355,
                "p_value": 0.0,
                "effect_size": -0.2043252300233839,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 44843,
                    "after": 31924
                }
            }
        }
    ],
    "ffd15c75971676cbf1c4987ae969acc986ca31c2": [
        {
            "commit_message": "Implement capture_body config option\n\nIntroduce Processor which processes events before they are reported\nThe processor is used to redact the request body based on the config\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.HttpVanillaJacksonReporterBenchmark.sendPayload",
            "method_name_pd": "public java.lang.Object co.elastic.apm.impl.context.Request.getBody()",
            "method_name_cc": "public Object co.elastic.apm.impl.context.Request.getBody()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/context/Request.java",
            "previous_method_cc": "public Object co.elastic.apm.impl.context.Request.getBody()",
            "previous_method_pd": "public java.lang.Object co.elastic.apm.impl.context.Request.getBody()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/context/Request.java",
            "previous_commit": "992270e00df683cc83175b71303c0e5e11f8498a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -12.445265370665192,
                "p_value": 0.0,
                "effect_size": 0.19911138515804894,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 33216,
                    "after": 42118
                }
            }
        }
    ],
    "81494bdfc7e98bc53d12abd98184f6784ab01524": [
        {
            "commit_message": "Evaluate the overhead of the agent (#61)\n\nUsing a JMH-based meso-benchmark",
            "benchmark": "co.elastic.apm.impl.ObjectPoolBenchmark.testThreadLocalObjectPool",
            "method_name_pd": "public void co.elastic.apm.impl.context.Url.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.context.Url.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/context/Url.java",
            "previous_method_cc": "public void co.elastic.apm.impl.context.Url.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.context.Url.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/context/Url.java",
            "previous_commit": "714536a20cd1dde079371493be894340d6283349",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 440.5412647374062,
                "p_value": 0.0,
                "effect_size": -0.5089145367945651,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 214512,
                    "after": 98609
                }
            }
        }
    ],
    "86ff506c6a98471d7ffe108faa2bbbde4e611570": [
        {
            "commit_message": "Thread safety on critical methods\n\n- Transaction#addSpan\n- Transaction.tags is now a ConcurrentHashMap\n- Transaction.custom is now a ConcurrentHashMap\n- incrementing dropped span count via AtomicInteger\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Dropped.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Dropped.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Dropped.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Dropped.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Dropped.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Dropped.java",
            "previous_commit": "5f2af8f264142c1e5c16698d547499b78529f656",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 8.531859037948712,
                "p_value": 0.0935807165722443,
                "effect_size": 0.03619290781803116,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 1429,
                    "after": 1434
                }
            }
        }
    ],
    "4f732e9eadb0469472d5ee6a40a7a4c157b57b52": [
        {
            "commit_message": "Remove remaining threadlocals for loom support (#3286)\n\n* Replaced signature parser ThreadLocal with pool\r\n\r\n* Replaced transactions metrics labels ThreadLocal with transaction field\r\n\r\n* Removed OkHttp cached StringBuilder\r\n\r\n* updated changelog\r\n\r\n* Remove unnecessary setLength call",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.impl.transaction.Transaction.trackMetrics()",
            "method_name_cc": "private void co.elastic.apm.agent.impl.transaction.Transaction.trackMetrics()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "private void co.elastic.apm.agent.impl.transaction.Transaction.trackMetrics()",
            "previous_method_pd": "private void co.elastic.apm.agent.impl.transaction.Transaction.trackMetrics()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "796c694d3f9270b5e163d762f39ab7ba50b2df90",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 24.39520764324702,
                "p_value": 0.0,
                "effect_size": -0.24352572721394525,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 166799,
                    "after": 133262
                }
            }
        }
    ],
    "0a3bafa72c7050d1ca2c5da7999c6ddcd24f7a5a": [
        {
            "commit_message": "Add testcontainers based integration test (#57)\n\ncloses #20",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.report.ReportingEventHandler.onEvent(co.elastic.apm.report.ReportingEvent,long,boolean)",
            "method_name_cc": "public void co.elastic.apm.report.ReportingEventHandler.onEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/report/ReportingEventHandler.java",
            "previous_method_cc": "public void co.elastic.apm.report.ReportingEventHandler.onEvent(ReportingEvent event, long sequence, boolean endOfBatch)",
            "previous_method_pd": "public void co.elastic.apm.report.ReportingEventHandler.onEvent(co.elastic.apm.report.ReportingEvent,long,boolean)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/report/ReportingEventHandler.java",
            "previous_commit": "707982892b4f5511abdcea0c0f7214942ad09204",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.107499112244568,
                "p_value": 2.2527265421299713e-07,
                "effect_size": -0.10325795337472049,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1585,
                    "after": 1779
                }
            }
        },
        {
            "commit_message": "Add testcontainers based integration test (#57)\n\ncloses #20",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.report.ApmServerReporter.report(co.elastic.apm.impl.transaction.Transaction)",
            "method_name_cc": "public void co.elastic.apm.report.ApmServerReporter.report(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/report/ApmServerReporter.java",
            "previous_method_cc": "public void co.elastic.apm.report.ApmServerReporter.report(Transaction transaction)",
            "previous_method_pd": "public void co.elastic.apm.report.ApmServerReporter.report(co.elastic.apm.impl.transaction.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/report/ApmServerReporter.java",
            "previous_commit": "707982892b4f5511abdcea0c0f7214942ad09204",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -30.126932759064406,
                "p_value": 2.453777234927484e-36,
                "effect_size": 0.24592878605427418,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1605,
                    "after": 1917
                }
            }
        }
    ],
    "3a2163e17f50f57a6f59041a451488f36cdeb844": [
        {
            "commit_message": "Fix invalid currentTransaction() logic (#3294)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.impl.transaction.Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "method_name_cc": "public Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "previous_method_pd": "public co.elastic.apm.agent.impl.transaction.Transaction co.elastic.apm.agent.impl.ElasticApmTracer.currentTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "ca96d4e7b4bdf199f6459dce5fa4ed0db6d6e8fe",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.392277692646643,
                "p_value": 1.8785198980589063e-37,
                "effect_size": -0.018048970098620786,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 342470,
                    "after": 327350
                }
            }
        },
        {
            "commit_message": "Fix invalid currentTransaction() logic (#3294)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "boolean co.elastic.apm.agent.impl.ActiveStack.activate(co.elastic.apm.agent.impl.transaction.ElasticContext,java.util.List)",
            "method_name_cc": "boolean co.elastic.apm.agent.impl.ActiveStack.activate(ElasticContext<?> context, List<ActivationListener> activationListeners)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_method_cc": "boolean co.elastic.apm.agent.impl.ActiveStack.activate(ElasticContext<?> context, List<ActivationListener> activationListeners)",
            "previous_method_pd": "boolean co.elastic.apm.agent.impl.ActiveStack.activate(co.elastic.apm.agent.impl.transaction.ElasticContext,java.util.List)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_commit": "ca96d4e7b4bdf199f6459dce5fa4ed0db6d6e8fe",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.2032925461139086,
                "p_value": 0.021475714530132164,
                "effect_size": -0.0039750169927499895,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 228275,
                    "after": 218159
                }
            }
        }
    ],
    "246bbd27c7697b639e8830fa25f7f9007f4e1de9": [
        {
            "commit_message": "Create a value type for SpanId\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Span.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Span.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Span.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Span.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Span.java",
            "previous_commit": "46b943b8c7950c823aab60233a2e60dc356d790d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -9.481661843340499,
                "p_value": 0.34971101417695616,
                "effect_size": 0.010283659152671463,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 5488,
                    "after": 5539
                }
            }
        }
    ],
    "6580ae662e43e64baa84f2e7592181d31ffa8351": [
        {
            "commit_message": "Fix empty context activation behaviour (#3227)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.impl.transaction.ElasticContext co.elastic.apm.agent.impl.ActiveStack.currentContext()",
            "method_name_cc": "public ElasticContext<?> co.elastic.apm.agent.impl.ActiveStack.currentContext()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_method_cc": "public ElasticContext<?> co.elastic.apm.agent.impl.ActiveStack.currentContext()",
            "previous_method_pd": "public co.elastic.apm.agent.impl.transaction.ElasticContext co.elastic.apm.agent.impl.ActiveStack.currentContext()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_commit": "c46b17b9fe3d419a60b9c1371adcad10e3d6c82b",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 14.178753060840082,
                "p_value": 7.543821382710293e-208,
                "effect_size": -0.02765206377046297,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 866162,
                    "after": 788034
                }
            }
        }
    ],
    "006b2fbbf328dfe6ae9680d12d16efc96b2c0b1b": [
        {
            "commit_message": "Remove boilerplate from model objects\n\nRemoves toString, hashCode and equals methods\nThey where generated by the json schema to pojo converter\nbut are not that useful\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.ObjectPoolBenchmark.testThreadLocalObjectPool",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Transaction.java",
            "previous_commit": "482346ce4fe0f98a7e4367c6758c645f24fed675",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.36282771535580527,
                "p_value": 0.8858173649660459,
                "effect_size": 0.00024691141895596844,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 189161,
                    "after": 279092
                }
            }
        }
    ],
    "d27c984f2c916fedd2f89c63c7b53befa3a5714b": [
        {
            "commit_message": "Do not extract request remote address from headers (#889)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.servlet.ServletTransactionHelper.fillRequest(co.elastic.apm.agent.impl.context.Request,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)",
            "method_name_cc": "private void co.elastic.apm.agent.servlet.ServletTransactionHelper.fillRequest(Request request, String protocol, String method, boolean secure, String scheme, String serverName, int serverPort, String requestURI, String queryString, String remoteAddr)",
            "file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletTransactionHelper.java",
            "previous_method_cc": "private void co.elastic.apm.agent.servlet.ServletTransactionHelper.fillRequest(Request request, String protocol, String method, boolean secure, String scheme, String serverName, int serverPort, String requestURI, String queryString, String remoteAddr)",
            "previous_method_pd": "private void co.elastic.apm.agent.servlet.ServletTransactionHelper.fillRequest(co.elastic.apm.agent.impl.context.Request,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)",
            "previous_file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletTransactionHelper.java",
            "previous_commit": "7d480a9d95feef77e4da908b8e66746ae02e7239",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -32.741134027635965,
                "p_value": 0.0,
                "effect_size": 0.12848565872669557,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 637143,
                    "after": 683476
                }
            }
        }
    ],
    "475b8838387f5f885446e2506bb58e94d62a4f03": [
        {
            "commit_message": "Removing abs_path and adding module to serialized stack frames (#659)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeStackTraceElement(java.lang.StackTraceElement)",
            "method_name_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeStackTraceElement(StackTraceElement stacktrace)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeStackTraceElement(StackTraceElement stacktrace)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.serialize.DslJsonSerializer.serializeStackTraceElement(java.lang.StackTraceElement)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/serialize/DslJsonSerializer.java",
            "previous_commit": "ee727ac4c786b64e73b7aaee6bf4981153b477b6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.471794865174355,
                "p_value": 0.39036751933308544,
                "effect_size": -0.023390756947643174,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 975,
                    "after": 835
                }
            }
        }
    ],
    "0b0082d92686c5ba4fedbc4a251bcefbdbf6b8f8": [
        {
            "commit_message": "Remove unused API and resolve naming ambiguities (#3561)\n\n* Rename implementation versions of interfaces to reflect their state as non-API.\r\n\r\n* Merge main branch.\r\n\r\n* Fix test imports.\r\n\r\n* Fix plugin imports.\r\n\r\n* Fix plugin imports.",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.AbstractSpanImpl)",
            "method_name_cc": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.beforeActivate(AbstractSpanImpl<?> context)",
            "file": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.beforeActivate(AbstractSpan<?> context)",
            "previous_method_pd": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.beforeActivate(co.elastic.apm.agent.impl.transaction.AbstractSpan)",
            "previous_file": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java",
            "previous_commit": "cd893419137fd80981505c754ecea5cce6fb0bbd",
            "performance_diff": -0.04456039813042101,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.441915320202853,
                "p_value": 9.983709864867521e-06,
                "effect_size": 0.009535280138550728,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 155989,
                    "after": 132157
                }
            }
        },
        {
            "commit_message": "Remove unused API and resolve naming ambiguities (#3561)\n\n* Rename implementation versions of interfaces to reflect their state as non-API.\r\n\r\n* Merge main branch.\r\n\r\n* Fix test imports.\r\n\r\n* Fix plugin imports.\r\n\r\n* Fix plugin imports.",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public static java.lang.Object co.elastic.apm.agent.servlet.ServletApiAdvice.onServletEnter(co.elastic.apm.agent.servlet.adapter.ServletApiAdapter,java.lang.Object)",
            "method_name_cc": "public static <HttpServletRequest, HttpServletResponse, ServletContext, ServletContextEvent, FilterConfig, ServletConfig> Object co.elastic.apm.agent.servlet.ServletApiAdvice.onServletEnter( ServletApiAdapter<HttpServletRequest, HttpServletResponse, ServletContext, ServletContextEvent, FilterConfig, ServletConfig> adapter, Object servletRequest)",
            "file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java",
            "previous_method_cc": "public static <HttpServletRequest, HttpServletResponse, ServletContext, ServletContextEvent, FilterConfig, ServletConfig> Object co.elastic.apm.agent.servlet.ServletApiAdvice.onServletEnter( ServletApiAdapter<HttpServletRequest, HttpServletResponse, ServletContext, ServletContextEvent, FilterConfig, ServletConfig> adapter, Object servletRequest)",
            "previous_method_pd": "public static java.lang.Object co.elastic.apm.agent.servlet.ServletApiAdvice.onServletEnter(co.elastic.apm.agent.servlet.adapter.ServletApiAdapter,java.lang.Object)",
            "previous_file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java",
            "previous_commit": "cd893419137fd80981505c754ecea5cce6fb0bbd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 51.99865989863536,
                "p_value": 0.0,
                "effect_size": -0.2006993015135868,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 78437,
                    "after": 66273
                }
            }
        },
        {
            "commit_message": "Remove unused API and resolve naming ambiguities (#3561)\n\n* Rename implementation versions of interfaces to reflect their state as non-API.\r\n\r\n* Merge main branch.\r\n\r\n* Fix test imports.\r\n\r\n* Fix plugin imports.\r\n\r\n* Fix plugin imports.",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.afterDeactivate(co.elastic.apm.agent.impl.transaction.AbstractSpanImpl)",
            "method_name_cc": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.afterDeactivate(AbstractSpanImpl<?> deactivatedContext)",
            "file": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java",
            "previous_method_cc": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.afterDeactivate(AbstractSpan<?> deactivatedContext)",
            "previous_method_pd": "public void co.elastic.apm.agent.profiler.ProfilingActivationListener.afterDeactivate(co.elastic.apm.agent.impl.transaction.AbstractSpan)",
            "previous_file": "apm-agent-plugins/apm-profiling-plugin/src/main/java/co/elastic/apm/agent/profiler/ProfilingActivationListener.java",
            "previous_commit": "cd893419137fd80981505c754ecea5cce6fb0bbd",
            "performance_diff": -0.04794611209672128,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -5.526315789473684,
                "p_value": 0.09906712612587838,
                "effect_size": 0.003558743535742577,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 156277,
                    "after": 132155
                }
            }
        }
    ],
    "86184c5440887feb03d69dda41e30dfc4ce78e34": [
        {
            "commit_message": "Context propagation refactorings (#3206)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.impl.transaction.ElasticContext co.elastic.apm.agent.impl.ActiveStack.currentContext()",
            "method_name_cc": "public ElasticContext<?> co.elastic.apm.agent.impl.ActiveStack.currentContext()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_method_cc": "public ElasticContext<?> co.elastic.apm.agent.impl.ActiveStack.currentContext()",
            "previous_method_pd": "public co.elastic.apm.agent.impl.transaction.ElasticContext co.elastic.apm.agent.impl.ActiveStack.currentContext()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_commit": "48d2a231e604414ccb4385792a8c5e364567dcd9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.9788621542612999,
                "p_value": 0.0,
                "effect_size": 0.04731651413237923,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 532901,
                    "after": 516622
                }
            }
        },
        {
            "commit_message": "Context propagation refactorings (#3206)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.agent.impl.transaction.AbstractSpan co.elastic.apm.agent.impl.ElasticApmTracer.getActive()",
            "method_name_cc": "public AbstractSpan<?> co.elastic.apm.agent.impl.ElasticApmTracer.getActive()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public AbstractSpan<?> co.elastic.apm.agent.impl.ElasticApmTracer.getActive()",
            "previous_method_pd": "public co.elastic.apm.agent.impl.transaction.AbstractSpan co.elastic.apm.agent.impl.ElasticApmTracer.getActive()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "48d2a231e604414ccb4385792a8c5e364567dcd9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.2719652966693626,
                "p_value": 4.617224264605557e-39,
                "effect_size": -0.01808876315678883,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 384231,
                    "after": 318482
                }
            }
        },
        {
            "commit_message": "Context propagation refactorings (#3206)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "boolean co.elastic.apm.agent.impl.ActiveStack.activate(co.elastic.apm.agent.impl.transaction.ElasticContext,java.util.List)",
            "method_name_cc": "boolean co.elastic.apm.agent.impl.ActiveStack.activate(ElasticContext<?> context, List<ActivationListener> activationListeners)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_method_cc": "boolean co.elastic.apm.agent.impl.ActiveStack.activate(ElasticContext<?> context, List<ActivationListener> activationListeners)",
            "previous_method_pd": "boolean co.elastic.apm.agent.impl.ActiveStack.activate(co.elastic.apm.agent.impl.transaction.ElasticContext,java.util.List)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_commit": "48d2a231e604414ccb4385792a8c5e364567dcd9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -6.941292177333938,
                "p_value": 1.163412420224232e-06,
                "effect_size": 0.010112913815430183,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 154640,
                    "after": 153524
                }
            }
        },
        {
            "commit_message": "Context propagation refactorings (#3206)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public static java.lang.Object co.elastic.apm.agent.servlet.ServletApiAdvice.onServletEnter(co.elastic.apm.agent.servlet.adapter.ServletApiAdapter,java.lang.Object)",
            "method_name_cc": "public static <HttpServletRequest, HttpServletResponse, ServletContext, ServletContextEvent, FilterConfig, ServletConfig> Object co.elastic.apm.agent.servlet.ServletApiAdvice.onServletEnter( ServletApiAdapter<HttpServletRequest, HttpServletResponse, ServletContext, ServletContextEvent, FilterConfig, ServletConfig> adapter, Object servletRequest)",
            "file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java",
            "previous_method_cc": "public static <HttpServletRequest, HttpServletResponse, ServletContext, ServletContextEvent, FilterConfig, ServletConfig> Object co.elastic.apm.agent.servlet.ServletApiAdvice.onServletEnter( ServletApiAdapter<HttpServletRequest, HttpServletResponse, ServletContext, ServletContextEvent, FilterConfig, ServletConfig> adapter, Object servletRequest)",
            "previous_method_pd": "public static java.lang.Object co.elastic.apm.agent.servlet.ServletApiAdvice.onServletEnter(co.elastic.apm.agent.servlet.adapter.ServletApiAdapter,java.lang.Object)",
            "previous_file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/agent/servlet/ServletApiAdvice.java",
            "previous_commit": "48d2a231e604414ccb4385792a8c5e364567dcd9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -9.382675013387994,
                "p_value": 0.0006115272861751145,
                "effect_size": 0.009971211709679543,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 78693,
                    "after": 78754
                }
            }
        },
        {
            "commit_message": "Context propagation refactorings (#3206)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "boolean co.elastic.apm.agent.impl.ActiveStack.deactivate(co.elastic.apm.agent.impl.transaction.ElasticContext,java.util.List,boolean)",
            "method_name_cc": "boolean co.elastic.apm.agent.impl.ActiveStack.deactivate(ElasticContext<?> context, List<ActivationListener> activationListeners, boolean assertionsEnabled)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_method_cc": "boolean co.elastic.apm.agent.impl.ActiveStack.deactivate(ElasticContext<?> context, List<ActivationListener> activationListeners, boolean assertionsEnabled)",
            "previous_method_pd": "boolean co.elastic.apm.agent.impl.ActiveStack.deactivate(co.elastic.apm.agent.impl.transaction.ElasticContext,java.util.List,boolean)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ActiveStack.java",
            "previous_commit": "48d2a231e604414ccb4385792a8c5e364567dcd9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.754003940787147,
                "p_value": 1.410799505827219e-15,
                "effect_size": 0.01654112690760742,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 155802,
                    "after": 154876
                }
            }
        }
    ],
    "349007704a068ab7ca69b4763b7d49bda9410d7c": [
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.activate(co.elastic.apm.agent.impl.transaction.TraceContextHolder)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.activate(TraceContextHolder<?> holder)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.activate(TraceContextHolder<?> holder)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.activate(co.elastic.apm.agent.impl.transaction.TraceContextHolder)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 9.692622950819672,
                "p_value": 0.0,
                "effect_size": -0.23004923429612034,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 284448,
                    "after": 216808
                }
            }
        },
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(TraceContextHolder<?> holder)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(TraceContextHolder<?> holder)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.deactivate(co.elastic.apm.agent.impl.transaction.TraceContextHolder)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 11.888250445809392,
                "p_value": 0.0,
                "effect_size": -0.26570644798482673,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 282441,
                    "after": 227915
                }
            }
        },
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(co.elastic.apm.agent.impl.transaction.Span)",
            "method_name_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(Span span)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(Span span)",
            "previous_method_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(co.elastic.apm.agent.impl.transaction.Span)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 12.573711242153319,
                "p_value": 0.0,
                "effect_size": -0.2751259977078784,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 141990,
                    "after": 122352
                }
            }
        },
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(Span span)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(Span span)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endSpan(co.elastic.apm.agent.impl.transaction.Span)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 22.702074391988557,
                "p_value": 0.0,
                "effect_size": -0.16648810446990445,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 142356,
                    "after": 106948
                }
            }
        },
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Span.doEnd(long)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Span.doEnd(long epochMicros)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Span.doEnd(long epochMicros)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Span.doEnd(long)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 29.641238905095896,
                "p_value": 0.0,
                "effect_size": -0.15748616635403628,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 131066,
                    "after": 98523
                }
            }
        },
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(co.elastic.apm.agent.impl.transaction.Transaction)",
            "method_name_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_method_cc": "public void co.elastic.apm.agent.report.ApmServerReporter.report(Transaction transaction)",
            "previous_method_pd": "public void co.elastic.apm.agent.report.ApmServerReporter.report(co.elastic.apm.agent.impl.transaction.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/ApmServerReporter.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 9.812898089171975,
                "p_value": 0.0,
                "effect_size": -0.23003374473230953,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 140677,
                    "after": 108108
                }
            }
        },
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endTransaction(co.elastic.apm.agent.impl.transaction.Transaction)",
            "method_name_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endTransaction(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endTransaction(Transaction transaction)",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.ElasticApmTracer.endTransaction(co.elastic.apm.agent.impl.transaction.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/ElasticApmTracer.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 20.315607158894093,
                "p_value": 0.0,
                "effect_size": -0.2070964279311628,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 137596,
                    "after": 104081
                }
            }
        },
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Span.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Span.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 18.90102022552354,
                "p_value": 0.0,
                "effect_size": -0.3009586385607066,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 109095,
                    "after": 90718
                }
            }
        },
        {
            "commit_message": "Recycle via reference counting (#587)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.writeEvent(co.elastic.apm.agent.report.ReportingEvent)",
            "method_name_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.writeEvent(ReportingEvent event)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_method_cc": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.writeEvent(ReportingEvent event)",
            "previous_method_pd": "private void co.elastic.apm.agent.report.IntakeV2ReportingEventHandler.writeEvent(co.elastic.apm.agent.report.ReportingEvent)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/report/IntakeV2ReportingEventHandler.java",
            "previous_commit": "0d9ce57515680c8cbbdbac5c48a25351409a2497",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 35.3130865861289,
                "p_value": 0.0,
                "effect_size": -0.1842606850445696,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 156815,
                    "after": 122359
                }
            }
        }
    ],
    "69656a0a6185c659a0235f96c43bf7b30979a28e": [
        {
            "commit_message": "OpenTracing bridge (#70)\n\nImplement OpenTracing bridge",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "method_name_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "4d32c876719069fb01c0dbd24317dc458179cd42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -59.08402138280942,
                "p_value": 1.058675236123539e-124,
                "effect_size": 0.4806164149453646,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1479,
                    "after": 1812
                }
            }
        },
        {
            "commit_message": "OpenTracing bridge (#70)\n\nImplement OpenTracing bridge",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Span co.elastic.apm.impl.ElasticApmTracer.startSpan()",
            "method_name_cc": "public Span co.elastic.apm.impl.ElasticApmTracer.startSpan()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Span co.elastic.apm.impl.ElasticApmTracer.startSpan()",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Span co.elastic.apm.impl.ElasticApmTracer.startSpan()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "4d32c876719069fb01c0dbd24317dc458179cd42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -45.233465839786284,
                "p_value": 6.70142776702118e-114,
                "effect_size": 0.46105952678971046,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1455,
                    "after": 1812
                }
            }
        },
        {
            "commit_message": "OpenTracing bridge (#70)\n\nImplement OpenTracing bridge",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Span.end()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Span.end()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Span.end()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Span.end()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Span.java",
            "previous_commit": "4d32c876719069fb01c0dbd24317dc458179cd42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -51.21214332143852,
                "p_value": 6.090971051972691e-107,
                "effect_size": 0.4518344261872006,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1411,
                    "after": 1785
                }
            }
        },
        {
            "commit_message": "OpenTracing bridge (#70)\n\nImplement OpenTracing bridge",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "private void co.elastic.apm.servlet.ApmFilter.fillTransaction(co.elastic.apm.impl.transaction.Transaction,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "method_name_cc": "private void co.elastic.apm.servlet.ApmFilter.fillTransaction(Transaction transaction, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)",
            "file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/servlet/ApmFilter.java",
            "previous_method_cc": "private void co.elastic.apm.servlet.ApmFilter.fillTransaction(Transaction transaction, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)",
            "previous_method_pd": "private void co.elastic.apm.servlet.ApmFilter.fillTransaction(co.elastic.apm.impl.transaction.Transaction,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "previous_file": "apm-agent-plugins/apm-servlet-plugin/src/main/java/co/elastic/apm/servlet/ApmFilter.java",
            "previous_commit": "4d32c876719069fb01c0dbd24317dc458179cd42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -45.80140082045073,
                "p_value": 7.774580062973569e-95,
                "effect_size": 0.4156317444522277,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1483,
                    "after": 1854
                }
            }
        },
        {
            "commit_message": "OpenTracing bridge (#70)\n\nImplement OpenTracing bridge",
            "benchmark": "co.elastic.apm.benchmark.ElasticApmContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.impl.transaction.Transaction.end()",
            "method_name_cc": "public void co.elastic.apm.impl.transaction.Span.end()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Span.java",
            "previous_method_cc": "public void co.elastic.apm.impl.transaction.Span.end()",
            "previous_method_pd": "public void co.elastic.apm.impl.transaction.Span.end()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/transaction/Span.java",
            "previous_commit": "4d32c876719069fb01c0dbd24317dc458179cd42",
            "performance_diff": -0.1133306933572531,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -8.286351034052771,
                "p_value": 0.436856386462383,
                "effect_size": 0.015969998031998365,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 1411,
                    "after": 1797
                }
            }
        }
    ],
    "25eb0dd6c72ea07d7491894d90ef506dda3b98a9": [
        {
            "commit_message": "Add ability to disable tracer dynamically\n\nThe tracer will turn into a noop then\nElasticApmTracer.instance is now not nullable\nRemove unnecessary synchronization in #register methods\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "method_name_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_method_pd": "public co.elastic.apm.impl.transaction.Transaction co.elastic.apm.impl.ElasticApmTracer.startTransaction()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "65047edbd322580a6deb52531302a1ba9c5c4874",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -14.951456310679612,
                "p_value": 0.0,
                "effect_size": 0.18674128440443968,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 39894,
                    "after": 52088
                }
            }
        },
        {
            "commit_message": "Add ability to disable tracer dynamically\n\nThe tracer will turn into a noop then\nElasticApmTracer.instance is now not nullable\nRemove unnecessary synchronization in #register methods\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.testReport",
            "method_name_pd": "public void co.elastic.apm.impl.ElasticApmTracer.endTransaction(co.elastic.apm.impl.transaction.Transaction)",
            "method_name_cc": "public void co.elastic.apm.impl.ElasticApmTracer.endTransaction(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.impl.ElasticApmTracer.endTransaction(Transaction transaction)",
            "previous_method_pd": "public void co.elastic.apm.impl.ElasticApmTracer.endTransaction(co.elastic.apm.impl.transaction.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "65047edbd322580a6deb52531302a1ba9c5c4874",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -29.498327759197323,
                "p_value": 0.0,
                "effect_size": 0.2701110555313331,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 40489,
                    "after": 52229
                }
            }
        },
        {
            "commit_message": "Add ability to disable tracer dynamically\n\nThe tracer will turn into a noop then\nElasticApmTracer.instance is now not nullable\nRemove unnecessary synchronization in #register methods\n\nSigned-off-by: Felix Barnsteiner <felix.barnsteiner@elastic.co>\n",
            "benchmark": "co.elastic.apm.impl.NoopReporterBenchmark.sendPayload",
            "method_name_pd": "public void co.elastic.apm.impl.ElasticApmTracer.recycle(co.elastic.apm.impl.transaction.Transaction)",
            "method_name_cc": "public void co.elastic.apm.impl.ElasticApmTracer.recycle(Transaction transaction)",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_method_cc": "public void co.elastic.apm.impl.ElasticApmTracer.recycle(Transaction transaction)",
            "previous_method_pd": "public void co.elastic.apm.impl.ElasticApmTracer.recycle(co.elastic.apm.impl.transaction.Transaction)",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/impl/ElasticApmTracer.java",
            "previous_commit": "65047edbd322580a6deb52531302a1ba9c5c4874",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 22.265480993512334,
                "p_value": 1.2521247941541208e-16,
                "effect_size": -0.18208490997984347,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1367,
                    "after": 1390
                }
            }
        }
    ],
    "770334bb483deee968cab554836ef7d30a23886d": [
        {
            "commit_message": "Added internal option to fully redact exceptions (#3528)\n\n",
            "benchmark": "co.elastic.apm.agent.benchmark.ElasticApmActiveContinuousBenchmark.benchmarkWithApm",
            "method_name_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "method_name_cc": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_method_cc": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_method_pd": "public void co.elastic.apm.agent.impl.transaction.Transaction.resetState()",
            "previous_file": "apm-agent-core/src/main/java/co/elastic/apm/agent/impl/transaction/Transaction.java",
            "previous_commit": "274de8b6c25bb5f38073136cbb760a5507b59185",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -4.510925258669135,
                "p_value": 1.1773181271052016e-106,
                "effect_size": 0.047499529947146936,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 132124,
                    "after": 153900
                }
            }
        }
    ]
}