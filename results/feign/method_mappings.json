{
    "2d761cb6a92efc6b4a95e7092c945f47431b76cd": [
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public java.util.Map feign.RequestTemplate.headers()",
            "method_name_cc": "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
            "previous_method_pd": "public java.util.Map feign.RequestTemplate.headers()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -17.052023121387283,
                "p_value": 0.0,
                "effect_size": 0.42796022093989133,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 45142,
                    "after": 70079
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.headers(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.headers(Map<String, Collection<String>> headers)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.headers(Map<String, Collection<String>> headers)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.headers(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -97.19001068587487,
                "p_value": 3.1699606940846742e-27,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 39,
                    "after": 23401
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.header(java.lang.String,java.lang.Iterable)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.header(String name, Iterable<String> values)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.header(String name, Iterable<String> values)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.header(java.lang.String,java.lang.Iterable)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.decodeSlash(boolean)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.decodeSlash(boolean decodeSlash)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.decodeSlash(boolean decodeSlash)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.decodeSlash(boolean)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 61.337144054227956,
                "p_value": 2.34286757300023e-05,
                "effect_size": -0.8823529411764706,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 17,
                    "after": 15
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public java.lang.String feign.RequestTemplate.method()",
            "method_name_cc": "public String feign.RequestTemplate.method()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public String feign.RequestTemplate.method()",
            "previous_method_pd": "public java.lang.String feign.RequestTemplate.method()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.508628519527702,
                "p_value": 0.4375578509038419,
                "effect_size": -0.1597222222222222,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 16,
                    "after": 18
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.query(java.lang.String,java.lang.Iterable)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.query(java.lang.String,java.lang.Iterable)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -91.94943491225827,
                "p_value": 1.9797903685560186e-09,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 12,
                    "after": 72007
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public java.util.Map feign.RequestTemplate.queries()",
            "method_name_cc": "public Map<String, Collection<String>> feign.RequestTemplate.queries()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Map<String, Collection<String>> feign.RequestTemplate.queries()",
            "previous_method_pd": "public java.util.Map feign.RequestTemplate.queries()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -91.04942544649037,
                "p_value": 9.327424604308577e-13,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 17,
                    "after": 47740
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.queries(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.queries(Map<String, Collection<String>> queries)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.queries(Map<String, Collection<String>> queries)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.queries(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public java.lang.String feign.RequestTemplate.url()",
            "method_name_cc": "public String feign.RequestTemplate.url()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public String feign.RequestTemplate.url()",
            "previous_method_pd": "public java.lang.String feign.RequestTemplate.url()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 769.3486590038315,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 44706,
                    "after": 46815
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.Request feign.RequestTemplate.request()",
            "method_name_cc": "public Request feign.RequestTemplate.request()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Request feign.RequestTemplate.request()",
            "previous_method_pd": "public feign.Request feign.RequestTemplate.request()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 85.37170263788968,
                "p_value": 0.0,
                "effect_size": -0.8606310200780694,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 43920,
                    "after": 23622
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "feign.Request feign.SynchronousMethodHandler.targetRequest(feign.RequestTemplate)",
            "method_name_cc": "Request feign.SynchronousMethodHandler.targetRequest(RequestTemplate template)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Request feign.SynchronousMethodHandler.targetRequest(RequestTemplate template)",
            "previous_method_pd": "feign.Request feign.SynchronousMethodHandler.targetRequest(feign.RequestTemplate)",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 120.55926169161107,
                "p_value": 0.0,
                "effect_size": -0.9722612495590719,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 43895,
                    "after": 23737
                }
            }
        },
        {
            "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "method_name_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "previous_method_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 32.9559748427673,
                "p_value": 0.0,
                "effect_size": -0.3957026104579844,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 42683,
                    "after": 22184
                }
            }
        }
    ],
    "9875a16f4ad3117904dde1c5a5ce3d08de7d1009": [
        {
            "commit_message": "Adding Method to Retryable Exception for evaluation (#744)\n\nCloses #719\r\n\r\nThis change adds the original Request Method to `RetryableException`,\r\nallowing implementers to determine if a retry should occur based on\r\nmethod and exception type.\r\n\r\nTo support this, `Response` objects now require that the original\r\n`Request` be present.  Test Cases, benchmarks, and documentation have\r\nbeen added.\r\n\r\n* Refactored Request Method Attribute on Requests\r\n* Added `HttpMethod` enum that represents the supported HTTP methods\r\nreplacing String handling.\r\n* Deprecated `Request#method()` in favor of `Request#httpMethod()`",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public static feign.Request feign.Request.create(java.lang.String,java.lang.String,java.util.Map,byte[],java.nio.charset.Charset)",
            "method_name_cc": "public static Request feign.Request.create(String method, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)",
            "file": "core/src/main/java/feign/Request.java",
            "previous_method_cc": "public static Request feign.Request.create(String method, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)",
            "previous_method_pd": "public static feign.Request feign.Request.create(java.lang.String,java.lang.String,java.util.Map,byte[],java.nio.charset.Charset)",
            "previous_file": "core/src/main/java/feign/Request.java",
            "previous_commit": "68f04c90c2ad550b251172213ad8f08082f5abb6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 130.49242424242425,
                "p_value": 0.0,
                "effect_size": -0.6777756208863137,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 16415,
                    "after": 15004
                }
            }
        },
        {
            "commit_message": "Adding Method to Retryable Exception for evaluation (#744)\n\nCloses #719\r\n\r\nThis change adds the original Request Method to `RetryableException`,\r\nallowing implementers to determine if a retry should occur based on\r\nmethod and exception type.\r\n\r\nTo support this, `Response` objects now require that the original\r\n`Request` be present.  Test Cases, benchmarks, and documentation have\r\nbeen added.\r\n\r\n* Refactored Request Method Attribute on Requests\r\n* Added `HttpMethod` enum that represents the supported HTTP methods\r\nreplacing String handling.\r\n* Deprecated `Request#method()` in favor of `Request#httpMethod()`",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public java.lang.String feign.Request.method()",
            "method_name_cc": "public String feign.Request.method()",
            "file": "core/src/main/java/feign/Request.java",
            "previous_method_cc": "public String feign.Request.method()",
            "previous_method_pd": "public java.lang.String feign.Request.method()",
            "previous_file": "core/src/main/java/feign/Request.java",
            "previous_commit": "68f04c90c2ad550b251172213ad8f08082f5abb6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.066666666666667,
                "p_value": 5.062318289913931e-19,
                "effect_size": 0.035183790133098504,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 44208,
                    "after": 41408
                }
            }
        },
        {
            "commit_message": "Adding Method to Retryable Exception for evaluation (#744)\n\nCloses #719\r\n\r\nThis change adds the original Request Method to `RetryableException`,\r\nallowing implementers to determine if a retry should occur based on\r\nmethod and exception type.\r\n\r\nTo support this, `Response` objects now require that the original\r\n`Request` be present.  Test Cases, benchmarks, and documentation have\r\nbeen added.\r\n\r\n* Refactored Request Method Attribute on Requests\r\n* Added `HttpMethod` enum that represents the supported HTTP methods\r\nreplacing String handling.\r\n* Deprecated `Request#method()` in favor of `Request#httpMethod()`",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request,feign.Request$Options) throws java.io.IOException",
            "method_name_cc": "public Response feign.Default.execute(Request request, Options options)",
            "file": "core/src/main/java/feign/Client.java",
            "previous_method_cc": "public Response feign.Default.execute(Request request, Options options)",
            "previous_method_pd": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request,feign.Request$Options) throws java.io.IOException",
            "previous_file": "core/src/main/java/feign/Client.java",
            "previous_commit": "68f04c90c2ad550b251172213ad8f08082f5abb6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 9.226387719643911,
                "p_value": 5.199663555854438e-84,
                "effect_size": -0.1253619168569214,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 16712,
                    "after": 15345
                }
            }
        }
    ],
    "fb4f304a0e593eb4044792e1e02a736a52ff850d": [
        {
            "commit_message": "Refactored data clumps with the help of LLMs (research project) (#2497)\n\n* refactor: data clumps with LLM\r\n\r\n* Align with other openfeign projects\r\n\r\n* Refactored to favor immutability and easy of read\r\n\r\n* Update codeql-analysis.yml\r\n\r\n* Quickbuild\r\n\r\n* Update license header\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <velo.br@gmail.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "feign.Request$Options feign.SynchronousMethodHandler.findOptions(java.lang.Object[])",
            "method_name_cc": "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)",
            "previous_method_pd": "feign.Request$Options feign.SynchronousMethodHandler.findOptions(java.lang.Object[])",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "0b361518e41d27337de13e4a78eec3af9bb1b9dc",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.8759124087591241,
                "p_value": 9.954982233029097e-200,
                "effect_size": 0.04982724590215054,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 255320,
                    "after": 233862
                }
            }
        },
        {
            "commit_message": "Refactored data clumps with the help of LLMs (research project) (#2497)\n\n* refactor: data clumps with LLM\r\n\r\n* Align with other openfeign projects\r\n\r\n* Refactored to favor immutability and easy of read\r\n\r\n* Update codeql-analysis.yml\r\n\r\n* Quickbuild\r\n\r\n* Update license header\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <velo.br@gmail.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "feign.Request feign.SynchronousMethodHandler.targetRequest(feign.RequestTemplate)",
            "method_name_cc": "Request feign.SynchronousMethodHandler.targetRequest(RequestTemplate template)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Request feign.SynchronousMethodHandler.targetRequest(RequestTemplate template)",
            "previous_method_pd": "feign.Request feign.SynchronousMethodHandler.targetRequest(feign.RequestTemplate)",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "0b361518e41d27337de13e4a78eec3af9bb1b9dc",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.7950310559006213,
                "p_value": 0.0,
                "effect_size": -0.10952374159096825,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 271822,
                    "after": 279981
                }
            }
        },
        {
            "commit_message": "Refactored data clumps with the help of LLMs (research project) (#2497)\n\n* refactor: data clumps with LLM\r\n\r\n* Align with other openfeign projects\r\n\r\n* Refactored to favor immutability and easy of read\r\n\r\n* Update codeql-analysis.yml\r\n\r\n* Quickbuild\r\n\r\n* Update license header\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <velo.br@gmail.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "method_name_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "previous_method_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "0b361518e41d27337de13e4a78eec3af9bb1b9dc",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.9382045251804394,
                "p_value": 0.0,
                "effect_size": -0.1133118037613401,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 285380,
                    "after": 289621
                }
            }
        },
        {
            "commit_message": "Refactored data clumps with the help of LLMs (research project) (#2497)\n\n* refactor: data clumps with LLM\r\n\r\n* Align with other openfeign projects\r\n\r\n* Refactored to favor immutability and easy of read\r\n\r\n* Update codeql-analysis.yml\r\n\r\n* Quickbuild\r\n\r\n* Update license header\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <velo.br@gmail.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.Object feign.SynchronousMethodHandler.invoke(java.lang.Object[]) throws java.lang.Throwable",
            "method_name_cc": "public Object feign.AsynchronousMethodHandler<C>.invoke(Object[] argv)",
            "file": "core/src/main/java/feign/AsynchronousMethodHandler.java",
            "previous_method_cc": "public Object feign.AsynchronousMethodHandler<C>.invoke(Object[] argv)",
            "previous_method_pd": "public java.lang.Object feign.SynchronousMethodHandler.invoke(java.lang.Object[]) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/AsynchronousMethodHandler.java",
            "previous_commit": "0b361518e41d27337de13e4a78eec3af9bb1b9dc",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.1050368550368552,
                "p_value": 0.0,
                "effect_size": -0.1407652287942674,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 274722,
                    "after": 278949
                }
            }
        }
    ],
    "4da6d5cad674e4eeae5b56035ac1f94992499449": [
        {
            "commit_message": "NPE when resolving a template with binary body (#821)\n\n* NPE when resolving a template with binary body\r\n\r\n* Initial change to introduce body object to Request's\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public static feign.RequestTemplate feign.RequestTemplate.from(feign.RequestTemplate)",
            "method_name_cc": "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
            "previous_method_pd": "public static feign.RequestTemplate feign.RequestTemplate.from(feign.RequestTemplate)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -5.509964830011723,
                "p_value": 3.124281309742655e-40,
                "effect_size": 0.043566287586110676,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 59892,
                    "after": 64095
                }
            }
        },
        {
            "commit_message": "NPE when resolving a template with binary body (#821)\n\n* NPE when resolving a template with binary body\r\n\r\n* Initial change to introduce body object to Request's\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.5966989594546108,
                "p_value": 3.446060538116808e-22,
                "effect_size": 0.045482338095486345,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 29328,
                    "after": 31206
                }
            }
        },
        {
            "commit_message": "NPE when resolving a template with binary body (#821)\n\n* NPE when resolving a template with binary body\r\n\r\n* Initial change to introduce body object to Request's\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.Request feign.RequestTemplate.request()",
            "method_name_cc": "public Request feign.RequestTemplate.request()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Request feign.RequestTemplate.request()",
            "previous_method_pd": "public feign.Request feign.RequestTemplate.request()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -39.307390217779364,
                "p_value": 0.0,
                "effect_size": 0.663311447421161,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 29843,
                    "after": 31883
                }
            }
        },
        {
            "commit_message": "NPE when resolving a template with binary body (#821)\n\n* NPE when resolving a template with binary body\r\n\r\n* Initial change to introduce body object to Request's\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public byte[] feign.Request.body()",
            "method_name_cc": "public byte[] feign.Request.body()",
            "file": "core/src/main/java/feign/Request.java",
            "previous_method_cc": "public byte[] feign.Request.body()",
            "previous_method_pd": "public byte[] feign.Request.body()",
            "previous_file": "core/src/main/java/feign/Request.java",
            "previous_commit": "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -44.46177847113885,
                "p_value": 0.0,
                "effect_size": 0.20928946595235504,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 30599,
                    "after": 32397
                }
            }
        }
    ],
    "f16553db43ed062d1de878b38ecff0268ad440ba": [
        {
            "commit_message": "Adding Support for Query Parameter Name Expansion (#841)\n\n* Adding Support for Query Parameter Name Expansion\r\n\r\nFixes #838\r\n\r\n`QueryTemplate` assumed that all query names were literals.  This change\r\nadds support for Expressions in Query Parameter names, providing better\r\nadherence to RFC 6570.\r\n\r\nRequestLines such as `@RequestLine(\"GET /uri?{parameter}={value}\")` are\r\nnow fully expanded whereas before, only `{value}` would be.\r\n\r\n* Adding Encoding and Resolution Enums for Template Control\r\n\r\nThese new enums replace the boolean values used to control\r\nencoding and expression expansion options in Templates\r\n\r\n* Allow unresolved expressions in Query Parameter Name and Body Template\r\n\r\nExpressions in Query Parameter names and in a Body Template will\r\nnow no longer be removed if they are not resolved.  For Query Template,\r\nthis change will prevent invalid query name/value pairs from being\r\ngenerated.\r\n\r\nFor the Body Template, the documentation states that\r\nunresolved should be preserved, yet the code did not match.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "private java.lang.String feign.template.Template.encode(java.lang.String,boolean)",
            "method_name_cc": "private String feign.template.Template.encode(String value, boolean query)",
            "file": "core/src/main/java/feign/template/Template.java",
            "previous_method_cc": "private String feign.template.Template.encode(String value, boolean query)",
            "previous_method_pd": "private java.lang.String feign.template.Template.encode(java.lang.String,boolean)",
            "previous_file": "core/src/main/java/feign/template/Template.java",
            "previous_commit": "f72db36968d499874e5bd1bdc39289dd62e45ddd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.1114572516441674,
                "p_value": 0.0,
                "effect_size": -0.08139730176255558,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 271318,
                    "after": 316738
                }
            }
        },
        {
            "commit_message": "Adding Support for Query Parameter Name Expansion (#841)\n\n* Adding Support for Query Parameter Name Expansion\r\n\r\nFixes #838\r\n\r\n`QueryTemplate` assumed that all query names were literals.  This change\r\nadds support for Expressions in Query Parameter names, providing better\r\nadherence to RFC 6570.\r\n\r\nRequestLines such as `@RequestLine(\"GET /uri?{parameter}={value}\")` are\r\nnow fully expanded whereas before, only `{value}` would be.\r\n\r\n* Adding Encoding and Resolution Enums for Template Control\r\n\r\nThese new enums replace the boolean values used to control\r\nencoding and expression expansion options in Templates\r\n\r\n* Allow unresolved expressions in Query Parameter Name and Body Template\r\n\r\nExpressions in Query Parameter names and in a Body Template will\r\nnow no longer be removed if they are not resolved.  For Query Template,\r\nthis change will prevent invalid query name/value pairs from being\r\ngenerated.\r\n\r\nFor the Body Template, the documentation states that\r\nunresolved should be preserved, yet the code did not match.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "method_name_cc": "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
            "previous_method_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "f72db36968d499874e5bd1bdc39289dd62e45ddd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.2046353872244207,
                "p_value": 0.0,
                "effect_size": 0.09972527275520301,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 386399,
                    "after": 589649
                }
            }
        },
        {
            "commit_message": "Adding Support for Query Parameter Name Expansion (#841)\n\n* Adding Support for Query Parameter Name Expansion\r\n\r\nFixes #838\r\n\r\n`QueryTemplate` assumed that all query names were literals.  This change\r\nadds support for Expressions in Query Parameter names, providing better\r\nadherence to RFC 6570.\r\n\r\nRequestLines such as `@RequestLine(\"GET /uri?{parameter}={value}\")` are\r\nnow fully expanded whereas before, only `{value}` would be.\r\n\r\n* Adding Encoding and Resolution Enums for Template Control\r\n\r\nThese new enums replace the boolean values used to control\r\nencoding and expression expansion options in Templates\r\n\r\n* Allow unresolved expressions in Query Parameter Name and Body Template\r\n\r\nExpressions in Query Parameter names and in a Body Template will\r\nnow no longer be removed if they are not resolved.  For Query Template,\r\nthis change will prevent invalid query name/value pairs from being\r\ngenerated.\r\n\r\nFor the Body Template, the documentation states that\r\nunresolved should be preserved, yet the code did not match.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.String feign.template.QueryTemplate.expand(java.util.Map)",
            "method_name_cc": "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
            "previous_method_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "f72db36968d499874e5bd1bdc39289dd62e45ddd",
            "performance_diff": -3.4631400902200964,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 756.9813453928773,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 386399,
                    "after": 258170
                }
            }
        },
        {
            "commit_message": "Adding Support for Query Parameter Name Expansion (#841)\n\n* Adding Support for Query Parameter Name Expansion\r\n\r\nFixes #838\r\n\r\n`QueryTemplate` assumed that all query names were literals.  This change\r\nadds support for Expressions in Query Parameter names, providing better\r\nadherence to RFC 6570.\r\n\r\nRequestLines such as `@RequestLine(\"GET /uri?{parameter}={value}\")` are\r\nnow fully expanded whereas before, only `{value}` would be.\r\n\r\n* Adding Encoding and Resolution Enums for Template Control\r\n\r\nThese new enums replace the boolean values used to control\r\nencoding and expression expansion options in Templates\r\n\r\n* Allow unresolved expressions in Query Parameter Name and Body Template\r\n\r\nExpressions in Query Parameter names and in a Body Template will\r\nnow no longer be removed if they are not resolved.  For Query Template,\r\nthis change will prevent invalid query name/value pairs from being\r\ngenerated.\r\n\r\nFor the Body Template, the documentation states that\r\nunresolved should be preserved, yet the code did not match.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.String feign.template.QueryTemplate.toString()",
            "method_name_cc": "public String feign.template.QueryTemplate.toString()",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public String feign.template.QueryTemplate.toString()",
            "previous_method_pd": "public java.lang.String feign.template.QueryTemplate.toString()",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "f72db36968d499874e5bd1bdc39289dd62e45ddd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.12033694344163659,
                "p_value": 1.396417372897471e-113,
                "effect_size": -0.03527440373207197,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 299601,
                    "after": 253900
                }
            }
        }
    ],
    "989fbd7c1f4029c6ad5900f0c3e591323cc11ffc": [
        {
            "commit_message": "fix #797 fix #798: JAXRSContract sets a single Content-Type value (#799)\n\nCloses #797 \r\nCloses #798 \r\n\r\nJAXRSContract sets a single Content-Type value\r\n\r\nThis change allows headers to be cleared by passing a null\r\nvalue for backwards compatibility.\r\n\r\nMultiple Content-Type values are not valid because the body\r\nthat we send with any given request will only have a single\r\ntype.\r\n\r\nUpdated header entry assertion to be agnostic to header name\r\norder.\r\n\r\n* RequestTemplate.headers clear behavior matches that of query params\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "private feign.RequestTemplate feign.RequestTemplate.appendHeader(java.lang.String,java.lang.Iterable)",
            "method_name_cc": "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)",
            "previous_method_pd": "private feign.RequestTemplate feign.RequestTemplate.appendHeader(java.lang.String,java.lang.Iterable)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "02d97371fe3a84bfd3222e18b94d791c5841170e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -2.386934673366834,
                "p_value": 0.0,
                "effect_size": 0.19716630837518376,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 162786,
                    "after": 163528
                }
            }
        }
    ],
    "c2fcbededea1aad841a7da91aadc5bacdb86bc6d": [
        {
            "commit_message": "Add an option to not follow redirects (302) and add a unit test for that (#602)\n\n* Add an option to not follow redirects (302) and add a unit test for that\r\n\r\n* Implement followRedirect options for Ribbon Client and OkHTTP.\r\nAdd unit tests for these.\r\n\r\n* Fix last failing unit test with IClientConfig options handling\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request,feign.Request$Options) throws java.io.IOException",
            "method_name_cc": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)",
            "previous_method_pd": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request,feign.Request$Options) throws java.io.IOException",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "524c0d91d11cc09f9cf91a5ad7b2346573906c8f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.1443356717970605,
                "p_value": 0.00010650951627745515,
                "effect_size": -0.023851502341919302,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 17676,
                    "after": 17523
                }
            }
        }
    ],
    "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3": [
        {
            "commit_message": "Unwrap RetryableException and throw cause (#737)\n\n* Throw cause of RetryableExceptions\r\n\r\n* Allow propogation of underlying exceptions\r\n\r\nAdd configuration to Feign.Builder and support in SynchronousMethodHandler\r\nto make it propagate the cause of RetryableExceptions\r\n\r\n* Retab SMH\r\n\r\n* Add note about propagation in readme\r\n\r\n* Use enum for exception propagation policy\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.Object feign.SynchronousMethodHandler.invoke(java.lang.Object[]) throws java.lang.Throwable",
            "method_name_cc": "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)",
            "previous_method_pd": "public java.lang.Object feign.SynchronousMethodHandler.invoke(java.lang.Object[]) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "6b608d0356776da6892567059b0acef35afb919e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.09504160968033566,
                "p_value": 3.928756580492571e-74,
                "effect_size": -0.03731858107389473,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 158165,
                    "after": 159485
                }
            }
        }
    ],
    "bc8b4b1fc53f0fc0911f486a5150fedab6813798": [
        {
            "commit_message": "Add typed response (#2206)\n\n* Add typed response\r\n\r\n* Update code as per suggestions\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.Object feign.InvocationContext.proceed() throws java.lang.Exception",
            "method_name_cc": "public Object feign.InvocationContext.proceed()",
            "file": "core/src/main/java/feign/InvocationContext.java",
            "previous_method_cc": "public Object feign.InvocationContext.proceed()",
            "previous_method_pd": "public java.lang.Object feign.InvocationContext.proceed() throws java.lang.Exception",
            "previous_file": "core/src/main/java/feign/InvocationContext.java",
            "previous_commit": "6105f37fa4655e14a7c28ad0afc55eefd9c53cb2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1.3824884792626728,
                "p_value": 0.0,
                "effect_size": -0.1540230081863635,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 387787,
                    "after": 390470
                }
            }
        }
    ],
    "ed2cef04658a28b5ca8c50645032df0d5c7fd7b7": [
        {
            "commit_message": "Remove null empty headers (#724)\n\n* Creating headers from Request removing those with null or empty values\r\n\r\n* Moving back to let the empty strings as valid header\r\n\r\n* Returning headers filtering null and empty rather removing them for the current map. Supporting with tests as it needs to be LinkedHashMap not to lost the sorting\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.util.Map feign.RequestTemplate.headers()",
            "method_name_cc": "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
            "previous_method_pd": "public java.util.Map feign.RequestTemplate.headers()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "a25423c0233ea1f0b0da8802b60c128133a1e640",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -98.39298038055801,
                "p_value": 1.9660086993825672e-38,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 56,
                    "after": 1220229
                }
            }
        },
        {
            "commit_message": "Remove null empty headers (#724)\n\n* Creating headers from Request removing those with null or empty values\r\n\r\n* Moving back to let the empty strings as valid header\r\n\r\n* Returning headers filtering null and empty rather removing them for the current map. Supporting with tests as it needs to be LinkedHashMap not to lost the sorting\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public feign.Request feign.RequestTemplate.request()",
            "method_name_cc": "public Request feign.RequestTemplate.request()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Request feign.RequestTemplate.request()",
            "previous_method_pd": "public feign.Request feign.RequestTemplate.request()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "a25423c0233ea1f0b0da8802b60c128133a1e640",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 167.29857819905214,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2093816,
                    "after": 1143395
                }
            }
        }
    ],
    "9ed47d5d25ef2bbb39dcb19306c1308d71247eb6": [
        {
            "commit_message": "Allows different collection encodings (#543)\n\n* Allows different collection encodings\r\n\r\nIn the case where a parameter represents a collection of values, there are\r\nconflicting ways of encoding that collection. Common ways are repeating the\r\nparameter name (foo=bar&foo=baz) and using comma separated values (foo=bar,baz).\r\nThe current behavior repeats the parameter name. This change introduces an\r\nadditional RequestLine parameter that explicitly specifies the encoding type,\r\none of CSV, TSV, space-delimited, pipe-delimited, and repeating the parameter\r\nname. The default value for this option is repeating the parameter name, so\r\nbackwards compatibility is maintained.\r\n\r\n* Replace switch statement with enum method for joining values\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.lang.String feign.RequestTemplate.queryLine()",
            "method_name_cc": "public String feign.RequestTemplate.queryLine()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public String feign.RequestTemplate.queryLine()",
            "previous_method_pd": "public java.lang.String feign.RequestTemplate.queryLine()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "ea51e7014e944261401cb7d426c9755c2fa337c3",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 4.6875,
                "p_value": 0.0,
                "effect_size": -0.3678834920797907,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1995025,
                    "after": 1793949
                }
            }
        }
    ],
    "85f2f504793283bb66ffde5b80fd2cc6ccfebd88": [
        {
            "commit_message": "Response is closed after decoder fails (#668)\n\nPreviously a decoder failure resulting in an exception would\r\nfail to close responses when \"doNotCloseAfterDecode\" was enabled.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate) throws java.lang.Throwable",
            "method_name_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)",
            "previous_method_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "7670103bc60fc346f9f9fbcbe011fb2535d9f326",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -1.937984496124031,
                "p_value": 0.0,
                "effect_size": 0.15294120577068018,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1861449,
                    "after": 1916971
                }
            }
        }
    ],
    "b6d8bb1a46d390cd675c05880d3e0aa03ff5880e": [
        {
            "commit_message": "support PATCH with empty body paramter. (#824)\n\nFixes #665",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "method_name_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "previous_method_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "4da6d5cad674e4eeae5b56035ac1f94992499449",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -4.05982905982906,
                "p_value": 1.0480421938172821e-22,
                "effect_size": 0.04607012206275742,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 29738,
                    "after": 30700
                }
            }
        }
    ],
    "eed6dbe51c41bf6f0a2fdba69de991172fdf3a84": [
        {
            "commit_message": "fix: Response.charset does not support RFC 7231 compliant Content-Type headers using quotation marks as application/json; charset=\"utf-8\" (#2444)\n\nCo-authored-by: Stefan Vitz (C804185) <stefan.vitz@sanitas.com>\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.nio.charset.Charset feign.Response.charset()",
            "method_name_cc": "public Charset feign.Response.charset()",
            "file": "core/src/main/java/feign/Response.java",
            "previous_method_cc": "public Charset feign.Response.charset()",
            "previous_method_pd": "public java.nio.charset.Charset feign.Response.charset()",
            "previous_file": "core/src/main/java/feign/Response.java",
            "previous_commit": "1d57e1f13e8014cbc5f58dc6e91abb45c9c80e00",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -6.641221374045801,
                "p_value": 0.0,
                "effect_size": 0.03265606536006561,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1566840,
                    "after": 1542428
                }
            }
        }
    ],
    "cb036e48e47c537eb874241fa586ea77272d892f": [
        {
            "commit_message": "Fixes an issue with http-headers duplication when using RequestTemplate (#832)\n\n* Fixes an issue with http-headers duplication when using RequestTemplate\r\n\r\nFixes #570\r\n\r\n* Changes imports formatting (upon running 'clean install')\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.util.Map feign.RequestTemplate.headers()",
            "method_name_cc": "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
            "previous_method_pd": "public java.util.Map feign.RequestTemplate.headers()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d436ca153b4f88ea630d14bfe3fd646ada1ba407",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -22.23950233281493,
                "p_value": 0.0,
                "effect_size": 0.1764516865379514,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 231286,
                    "after": 476552
                }
            }
        }
    ],
    "96a6bbd2c85223ae5f49b6dd324f0be192f0e3be": [
        {
            "commit_message": "Do not decode URL encoding while setting up RequestTemplate (#2228)\n\n* Do not decode URL encoding while setting up RequestTemplate (#2227)\r\n\r\n* Add unit test for preserving URL encoding in RequestTemplate (#2227)",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.target(java.lang.String)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.target(String target)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.target(String target)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.target(java.lang.String)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "80020559599fd97a04182f517e5976c6d9f4fd29",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.4273504273504274,
                "p_value": 0.0,
                "effect_size": -0.06164833081188572,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 362897,
                    "after": 367270
                }
            }
        }
    ],
    "468c44cfa1f9fcca6d1584009bbbdb4489cfaa3b": [
        {
            "commit_message": "support method option and add UT (#1881)\n\n* support method option and add UT\r\n\r\n* format code style\r\n\r\n* add Experimental annotation\r\n\r\n* Added     @Experimental to new method\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "feign.Request$Options feign.SynchronousMethodHandler.findOptions(java.lang.Object[])",
            "method_name_cc": "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)",
            "previous_method_pd": "feign.Request$Options feign.SynchronousMethodHandler.findOptions(java.lang.Object[])",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "a3a19fda6eda622bdd6d785f74a3cc36d554670a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 6.325301204819277,
                "p_value": 0.0,
                "effect_size": -0.4353605117609768,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 359397,
                    "after": 372762
                }
            }
        }
    ],
    "3d5f5ecce760d3a8fd6a80501b77272695209612": [
        {
            "commit_message": "Feature/decoder interceptor to response interceptor (#2116)\n\n* Refactor so that ResponseInterceptor intercepts the response (in the same manner that RequestInterceptor does) rather than intercepting the decoding process.\r\n\r\nSigned-off-by: Iain Henderson <Iain.henderson@mac.com>\r\n\r\n* Add a default RedirectionInterceptor as an implementation of ResponseInterceptor and include unit tests for redirection interception, error interception, and void decoding in FeignTest.\r\n\r\n* Update README to include ResponseInterceptor\r\n\r\n* Add copyright notice to RedirectionInterceptor\r\n\r\n* Correct formatting using maven\r\n\r\n* Updates in response to CodeRabbit\r\n\r\n* more CodeRabbitAI suggestions\r\n\r\n* Add unit tests for chained ResponseInterceptor instances\r\n\r\n* fixing formatting\r\n\r\n* formatting and responding to CodeRabbitAI comment\r\n\r\n* Reverting Feign-core pom\r\n\r\n* Cleanup Javadocs in ResponseInterceptor and RedirectionInterceptor\r\n\r\n---------\r\n\r\nSigned-off-by: Iain Henderson <Iain.henderson@mac.com>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.Object feign.ResponseHandler.handleResponse(java.lang.String,feign.Response,java.lang.reflect.Type,long) throws java.lang.Exception",
            "method_name_cc": "public Object feign.ResponseHandler.handleResponse(String configKey, Response response, Type returnType, long elapsedTime)",
            "file": "core/src/main/java/feign/ResponseHandler.java",
            "previous_method_cc": "public Object feign.ResponseHandler.handleResponse(String configKey, Response response, Type returnType, long elapsedTime)",
            "previous_method_pd": "public java.lang.Object feign.ResponseHandler.handleResponse(java.lang.String,feign.Response,java.lang.reflect.Type,long) throws java.lang.Exception",
            "previous_file": "core/src/main/java/feign/ResponseHandler.java",
            "previous_commit": "7b9706df86670836416c44326da81b27ba35c411",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.44268050679285603,
                "p_value": 1.0391267524822134e-109,
                "effect_size": -0.029205286970199914,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 371089,
                    "after": 404462
                }
            }
        }
    ],
    "d851bf2fc08f3b60be09ad5b2b176ed1146f52ef": [
        {
            "commit_message": "Using Protocol.name when resolving HTTP protocol for responses (#2428)\n\nThe `toString()` method on `OkHttp3.Protocol` does not return\r\na value that can be used to resolve to enum `ProtocolVersion`.\r\n\r\nThis change extracts the `name` from the Protocol and uses\r\nthat instead of the whole Protocol object.\r\n\r\nFixes #2427\r\n\r\nCo-authored-by: Henrik Stene <k01211@norsk-tipping.no>",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(okhttp3.Response,feign.Request) throws java.io.IOException",
            "method_name_cc": "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response response, feign.Request request)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response response, feign.Request request)",
            "previous_method_pd": "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(okhttp3.Response,feign.Request) throws java.io.IOException",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "ecde6bc9bcbf5ddbc3001a8092e311775d766c93",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -4.33418991926509,
                "p_value": 4.938328918175723e-51,
                "effect_size": 0.07716107010285554,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 24640,
                    "after": 25960
                }
            }
        }
    ],
    "697b1c3162255c3e36f0bb73ebab0980dbe56f30": [
        {
            "commit_message": "Error in RequestTemplate#uri when there're both query and fragment (#2367)\n\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.uri(java.lang.String,boolean)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.uri(java.lang.String,boolean)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "efe6356def9f063f3f4513841c22269a2a49fd3f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.4028197381671702,
                "p_value": 0.00043650082087573613,
                "effect_size": 0.004627164772904331,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 385982,
                    "after": 384287
                }
            }
        }
    ],
    "75e569fb3f87b4f5e3a638dd65e90cc8a5adf8d1": [
        {
            "commit_message": "Remove deprecated code usage from core module (#1145)\n\nFixes #857\r\n\r\nTo simply removal, Request.Body was returned back to an internal\r\ncomponent and additional methods were added to Request to expose\r\nit's capabilities outside of the object.\r\n\r\nAll other deprecated usage in core modules has been removed.\r\nDeprecated code still exists in the test cases and will be\r\nremoved once the deprecated methods are removed in our next\r\nmajor release.\r\n",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "method_name_cc": "public Object feign.codec.StringDecoder.decode(Response response, Type type)",
            "file": "core/src/main/java/feign/codec/StringDecoder.java",
            "previous_method_cc": "public Object feign.codec.StringDecoder.decode(Response response, Type type)",
            "previous_method_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "previous_file": "core/src/main/java/feign/codec/StringDecoder.java",
            "previous_commit": "ee2054160a18e19b2f13bedca8d83eea8ac9a373",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.7241379310344827,
                "p_value": 0.0,
                "effect_size": -0.11628100821513362,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1209945,
                    "after": 1129547
                }
            }
        },
        {
            "commit_message": "Remove deprecated code usage from core module (#1145)\n\nFixes #857\r\n\r\nTo simply removal, Request.Body was returned back to an internal\r\ncomponent and additional methods were added to Request to expose\r\nit's capabilities outside of the object.\r\n\r\nAll other deprecated usage in core modules has been removed.\r\nDeprecated code still exists in the test cases and will be\r\nremoved once the deprecated methods are removed in our next\r\nmajor release.\r\n",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.lang.Object feign.jackson.JacksonIteratorDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "method_name_cc": "public Object feign.codec.StringDecoder.decode(Response response, Type type)",
            "file": "core/src/main/java/feign/codec/StringDecoder.java",
            "previous_method_cc": "public Object feign.codec.StringDecoder.decode(Response response, Type type)",
            "previous_method_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "previous_file": "core/src/main/java/feign/codec/StringDecoder.java",
            "previous_commit": "ee2054160a18e19b2f13bedca8d83eea8ac9a373",
            "performance_diff": 0.4115590544888549,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -12.8544061302682,
                "p_value": 0.0,
                "effect_size": 0.1620915214994717,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1209945,
                    "after": 2270087
                }
            }
        },
        {
            "commit_message": "Remove deprecated code usage from core module (#1145)\n\nFixes #857\r\n\r\nTo simply removal, Request.Body was returned back to an internal\r\ncomponent and additional methods were added to Request to expose\r\nit's capabilities outside of the object.\r\n\r\nAll other deprecated usage in core modules has been removed.\r\nDeprecated code still exists in the test cases and will be\r\nremoved once the deprecated methods are removed in our next\r\nmajor release.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public static feign.RequestTemplate feign.RequestTemplate.from(feign.RequestTemplate)",
            "method_name_cc": "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
            "previous_method_pd": "public static feign.RequestTemplate feign.RequestTemplate.from(feign.RequestTemplate)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "ee2054160a18e19b2f13bedca8d83eea8ac9a373",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -8.054711246200608,
                "p_value": 2.2342380516427654e-33,
                "effect_size": 0.04467925605729386,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 46094,
                    "after": 50946
                }
            }
        },
        {
            "commit_message": "Remove deprecated code usage from core module (#1145)\n\nFixes #857\r\n\r\nTo simply removal, Request.Body was returned back to an internal\r\ncomponent and additional methods were added to Request to expose\r\nit's capabilities outside of the object.\r\n\r\nAll other deprecated usage in core modules has been removed.\r\nDeprecated code still exists in the test cases and will be\r\nremoved once the deprecated methods are removed in our next\r\nmajor release.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "ee2054160a18e19b2f13bedca8d83eea8ac9a373",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.17804154302670622,
                "p_value": 6.323166019458089e-20,
                "effect_size": 0.04729987499389045,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 23784,
                    "after": 26096
                }
            }
        },
        {
            "commit_message": "Remove deprecated code usage from core module (#1145)\n\nFixes #857\r\n\r\nTo simply removal, Request.Body was returned back to an internal\r\ncomponent and additional methods were added to Request to expose\r\nit's capabilities outside of the object.\r\n\r\nAll other deprecated usage in core modules has been removed.\r\nDeprecated code still exists in the test cases and will be\r\nremoved once the deprecated methods are removed in our next\r\nmajor release.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.Request feign.RequestTemplate.request()",
            "method_name_cc": "public Request feign.RequestTemplate.request()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Request feign.RequestTemplate.request()",
            "previous_method_pd": "public feign.Request feign.RequestTemplate.request()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "ee2054160a18e19b2f13bedca8d83eea8ac9a373",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 6.556195965417867,
                "p_value": 1.4536733736125186e-29,
                "effect_size": -0.05861290661341602,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 23041,
                    "after": 26709
                }
            }
        },
        {
            "commit_message": "Remove deprecated code usage from core module (#1145)\n\nFixes #857\r\n\r\nTo simply removal, Request.Body was returned back to an internal\r\ncomponent and additional methods were added to Request to expose\r\nit's capabilities outside of the object.\r\n\r\nAll other deprecated usage in core modules has been removed.\r\nDeprecated code still exists in the test cases and will be\r\nremoved once the deprecated methods are removed in our next\r\nmajor release.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public java.util.Map feign.Request.headers()",
            "method_name_cc": "public Map<String, Collection<String>> feign.Request.headers()",
            "file": "core/src/main/java/feign/Request.java",
            "previous_method_cc": "public Map<String, Collection<String>> feign.Request.headers()",
            "previous_method_pd": "public java.util.Map feign.Request.headers()",
            "previous_file": "core/src/main/java/feign/Request.java",
            "previous_commit": "ee2054160a18e19b2f13bedca8d83eea8ac9a373",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.721030042918455,
                "p_value": 4.118303364730696e-16,
                "effect_size": -0.029257531806172972,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 48648,
                    "after": 54799
                }
            }
        },
        {
            "commit_message": "Remove deprecated code usage from core module (#1145)\n\nFixes #857\r\n\r\nTo simply removal, Request.Body was returned back to an internal\r\ncomponent and additional methods were added to Request to expose\r\nit's capabilities outside of the object.\r\n\r\nAll other deprecated usage in core modules has been removed.\r\nDeprecated code still exists in the test cases and will be\r\nremoved once the deprecated methods are removed in our next\r\nmajor release.\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "method_name_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "previous_method_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "ee2054160a18e19b2f13bedca8d83eea8ac9a373",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.819779321618308,
                "p_value": 3.4755747926854303e-10,
                "effect_size": 0.03243865437160203,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 23784,
                    "after": 26246
                }
            }
        }
    ],
    "a7b7c01806324126dd844a9a912e309754bc4dc9": [
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "private void feign.template.Template.parseTemplate()",
            "method_name_cc": "private void feign.template.Template.parseTemplate()",
            "file": "core/src/main/java/feign/template/Template.java",
            "previous_method_cc": "private void feign.template.Template.parseTemplate()",
            "previous_method_pd": "private void feign.template.Template.parseTemplate()",
            "previous_file": "core/src/main/java/feign/template/Template.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1891.2195121951222,
                "p_value": 0.0,
                "effect_size": -0.8560699842063637,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 517770,
                    "after": 72267
                }
            }
        },
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public static feign.template.QueryTemplate feign.template.QueryTemplate.create(java.lang.String,java.lang.Iterable,java.nio.charset.Charset,feign.CollectionFormat)",
            "method_name_cc": "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)",
            "previous_method_pd": "public static feign.template.QueryTemplate feign.template.QueryTemplate.create(java.lang.String,java.lang.Iterable,java.nio.charset.Charset,feign.CollectionFormat)",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1021.7391304347826,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 180229,
                    "after": 26624
                }
            }
        },
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.util.List feign.template.QueryTemplate.getValues()",
            "method_name_cc": "public List<String> feign.template.QueryTemplate.getValues()",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public List<String> feign.template.QueryTemplate.getValues()",
            "previous_method_pd": "public java.util.List feign.template.QueryTemplate.getValues()",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 17.857142857142858,
                "p_value": 0.0,
                "effect_size": -0.6069721561633652,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 397623,
                    "after": 93296
                }
            }
        },
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "method_name_cc": "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
            "previous_method_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.9585798816568047,
                "p_value": 0.0,
                "effect_size": -0.1390054397257726,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 530940,
                    "after": 65666
                }
            }
        },
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public static java.lang.String feign.template.UriUtils.encode(java.lang.String,java.nio.charset.Charset)",
            "method_name_cc": "public static String feign.template.UriUtils.encode(String value, Charset charset)",
            "file": "core/src/main/java/feign/template/UriUtils.java",
            "previous_method_cc": "public static String feign.template.UriUtils.encode(String value, Charset charset)",
            "previous_method_pd": "public static java.lang.String feign.template.UriUtils.encode(java.lang.String,java.nio.charset.Charset)",
            "previous_file": "core/src/main/java/feign/template/UriUtils.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.lang.CharSequence feign.CollectionFormat.join(java.lang.String,java.util.Collection,java.nio.charset.Charset)",
            "method_name_cc": "public CharSequence join(String field, Collection<String> values, Charset charset)",
            "file": "core/src/main/java/feign/CollectionFormat.java",
            "previous_method_cc": "public CharSequence join(String field, Collection<String> values, Charset charset)",
            "previous_method_pd": "public java.lang.CharSequence feign.CollectionFormat.join(java.lang.String,java.util.Collection,java.nio.charset.Charset)",
            "previous_file": "core/src/main/java/feign/CollectionFormat.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 4788.405797101449,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 572324,
                    "after": 80043
                }
            }
        },
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.lang.String feign.template.QueryTemplate.expand(java.util.Map)",
            "method_name_cc": "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
            "previous_method_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -5.4707241695669415,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 6529.585798816568,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 530940,
                    "after": 26550
                }
            }
        },
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 537.410449899704,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 60528,
                    "after": 7634
                }
            }
        },
        {
            "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.lang.String feign.template.QueryTemplate.toString()",
            "method_name_cc": "public String feign.template.QueryTemplate.toString()",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public String feign.template.QueryTemplate.toString()",
            "previous_method_pd": "public java.lang.String feign.template.QueryTemplate.toString()",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1784.2195540308746,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 361609,
                    "after": 53219
                }
            }
        }
    ],
    "04a85e6961123d4fdb2ab9e4eabbfe09b4eea0a6": [
        {
            "commit_message": " All decoders follow rule: if a status is 404 it returns empty or null value (#1597)\n\n* All decoders follow rule: if status 404 it returns empty or null value\r\n\r\n* Replace decode404 with dismiss404",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "method_name_cc": "public Object feign.codec.StringDecoder.decode(Response response, Type type)",
            "file": "core/src/main/java/feign/codec/StringDecoder.java",
            "previous_method_cc": "public Object feign.codec.StringDecoder.decode(Response response, Type type)",
            "previous_method_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "previous_file": "core/src/main/java/feign/codec/StringDecoder.java",
            "previous_commit": "c4686e0e0e9b50de7618ff4c651044633089a64f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.5267175572519083,
                "p_value": 0.0,
                "effect_size": -0.06458959559818174,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1179946,
                    "after": 1116911
                }
            }
        },
        {
            "commit_message": " All decoders follow rule: if a status is 404 it returns empty or null value (#1597)\n\n* All decoders follow rule: if status 404 it returns empty or null value\r\n\r\n* Replace decode404 with dismiss404",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.lang.Object feign.jackson.JacksonIteratorDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "method_name_cc": "public Object feign.codec.StringDecoder.decode(Response response, Type type)",
            "file": "core/src/main/java/feign/codec/StringDecoder.java",
            "previous_method_cc": "public Object feign.codec.StringDecoder.decode(Response response, Type type)",
            "previous_method_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "previous_file": "core/src/main/java/feign/codec/StringDecoder.java",
            "previous_commit": "c4686e0e0e9b50de7618ff4c651044633089a64f",
            "performance_diff": 0.413330286762149,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -21.755725190839694,
                "p_value": 0.0,
                "effect_size": 0.19859712100839227,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1179946,
                    "after": 2297434
                }
            }
        },
        {
            "commit_message": " All decoders follow rule: if a status is 404 it returns empty or null value (#1597)\n\n* All decoders follow rule: if status 404 it returns empty or null value\r\n\r\n* Replace decode404 with dismiss404",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "void feign.AsyncResponseHandler.handleResponse(java.util.concurrent.CompletableFuture,java.lang.String,feign.Response,java.lang.reflect.Type,long)",
            "method_name_cc": "void feign.AsyncResponseHandler.handleResponse(CompletableFuture<Object> resultFuture, String configKey, Response response, Type returnType, long elapsedTime)",
            "file": "core/src/main/java/feign/AsyncResponseHandler.java",
            "previous_method_cc": "void feign.AsyncResponseHandler.handleResponse(CompletableFuture<Object> resultFuture, String configKey, Response response, Type returnType, long elapsedTime)",
            "previous_method_pd": "void feign.AsyncResponseHandler.handleResponse(java.util.concurrent.CompletableFuture,java.lang.String,feign.Response,java.lang.reflect.Type,long)",
            "previous_file": "core/src/main/java/feign/AsyncResponseHandler.java",
            "previous_commit": "c4686e0e0e9b50de7618ff4c651044633089a64f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.4106583072100314,
                "p_value": 0.0,
                "effect_size": 0.1405996485904362,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 439814,
                    "after": 430880
                }
            }
        }
    ],
    "262488506ffafbedfa7215fa42efccfd3f3b470c": [
        {
            "commit_message": "Expose Method and Target on RequestTemplate (#1091)\n\n* Expose Method and Target on RequestTemplate\r\n\r\n* Add test to check if method metadata is present\r\n\r\n* Annotated API changes as being experimental/not API-frozen\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public static feign.RequestTemplate feign.RequestTemplate.from(feign.RequestTemplate)",
            "method_name_cc": "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
            "previous_method_pd": "public static feign.RequestTemplate feign.RequestTemplate.from(feign.RequestTemplate)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d5389a57db17ad9a311813bcb8539ff891d9ac3a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.0471204188481675,
                "p_value": 0.0,
                "effect_size": -0.08809671462153769,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 567854,
                    "after": 568617
                }
            }
        },
        {
            "commit_message": "Expose Method and Target on RequestTemplate (#1091)\n\n* Expose Method and Target on RequestTemplate\r\n\r\n* Add test to check if method metadata is present\r\n\r\n* Annotated API changes as being experimental/not API-frozen\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public static feign.Request feign.Request.create(feign.Request$HttpMethod,java.lang.String,java.util.Map,feign.Request$Body,feign.RequestTemplate)",
            "method_name_cc": "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, Body body, RequestTemplate requestTemplate)",
            "file": "core/src/main/java/feign/Request.java",
            "previous_method_cc": "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, Body body)",
            "previous_method_pd": "public static feign.Request feign.Request.create(feign.Request$HttpMethod,java.lang.String,java.util.Map,feign.Request$Body)",
            "previous_file": "core/src/main/java/feign/Request.java",
            "previous_commit": "d5389a57db17ad9a311813bcb8539ff891d9ac3a",
            "performance_diff": 0.022991849621665672,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.0869565217391304,
                "p_value": 0.0,
                "effect_size": -0.08543326269628436,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 282568,
                    "after": 282997
                }
            }
        },
        {
            "commit_message": "Expose Method and Target on RequestTemplate (#1091)\n\n* Expose Method and Target on RequestTemplate\r\n\r\n* Add test to check if method metadata is present\r\n\r\n* Annotated API changes as being experimental/not API-frozen\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public feign.Request feign.RequestTemplate.request()",
            "method_name_cc": "public Request feign.RequestTemplate.request()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Request feign.RequestTemplate.request()",
            "previous_method_pd": "public feign.Request feign.RequestTemplate.request()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d5389a57db17ad9a311813bcb8539ff891d9ac3a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.8032128514056224,
                "p_value": 0.0,
                "effect_size": -0.10142299842695664,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 266495,
                    "after": 267129
                }
            }
        },
        {
            "commit_message": "Expose Method and Target on RequestTemplate (#1091)\n\n* Expose Method and Target on RequestTemplate\r\n\r\n* Add test to check if method metadata is present\r\n\r\n* Annotated API changes as being experimental/not API-frozen\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "method_name_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "previous_method_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "d5389a57db17ad9a311813bcb8539ff891d9ac3a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.2387387387387387,
                "p_value": 0.0,
                "effect_size": -0.09424012355773533,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 269003,
                    "after": 267521
                }
            }
        }
    ],
    "f52158bc24bab0c6c3f858c6b07dd09d4f59dc65": [
        {
            "commit_message": "Declarative contracts (#1060)\n\n* Declarative contracts\r\n\r\n* Actually using the data structure to read declaritve contracts\r\n\r\n* Using declarative contract for jaxrs contracts\r\n\r\n* Make possible for contracts to declare parameters as ignored\r\n\r\n* Using predicate to decide if an AnnotationProcessor should be invoked\r\n\r\n* Restore environment variable for GITHUB_TOKEN\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "feign.Request$Options feign.SynchronousMethodHandler.findOptions(java.lang.Object[])",
            "method_name_cc": "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)",
            "previous_method_pd": "feign.Request$Options feign.SynchronousMethodHandler.findOptions(java.lang.Object[])",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "c595301a952c062cb4b782a81ec6338e06f7f3ce",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.3001095290251916,
                "p_value": 1.6008948625361442e-115,
                "effect_size": -0.06114910207857455,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 94322,
                    "after": 91826
                }
            }
        }
    ],
    "29935b2287d455677171277f4e02926b5d9dd5a9": [
        {
            "commit_message": "Adding URI segment specific encoding (#882)\n\n* Adding URI segment specific encoding\r\n\r\nFixes #879\r\n\r\nURI encoding introduced in Feign 10.x was refactored to be more in line\r\nwith URI and URI Template specifications respectively.  One change was to\r\nensure that certain reserved characters were not encoded incorrectly.\r\n\r\nThe result was that path segment specific reserved characters were being\r\npreserved on the query string as well.  This change updates the `UriTemplate`\r\nand `Expression` classes to recognize the segment of the URI that is being processed\r\nand apply the segment specific encoding correctly.\r\n\r\nOne important change regarding the `+` sign.  Per the URI specification, a `+` sign\r\nis allowed in both the path and query segments of a URI, however, handling of\r\nthe symbol on the query can be inconsistent.  In some legacy systems, the `+` is\r\nequivalent to the a space.  Feign takes the approach of modern systems, where a\r\n`+` symbol should not reprsent a space and is explicitly encoded as `%2B` when\r\nfound on a query string.\r\n\r\nIf you wish to use `+` as a space, then use the literal ` ` character or encode\r\nthe value directly as `%20`\r\n\r\n\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "private void feign.template.Template.parseFragment(java.lang.String,boolean)",
            "method_name_cc": "private void feign.template.Template.parseFragment(String fragment, boolean query)",
            "file": "core/src/main/java/feign/template/Template.java",
            "previous_method_cc": "private void feign.template.Template.parseFragment(String fragment, boolean query)",
            "previous_method_pd": "private void feign.template.Template.parseFragment(java.lang.String,boolean)",
            "previous_file": "core/src/main/java/feign/template/Template.java",
            "previous_commit": "92e6ad85630ca3318e9f5e4cf12ac58806bb2645",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -5.888767720828789,
                "p_value": 0.0,
                "effect_size": 0.11952720232780492,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 423170,
                    "after": 546769
                }
            }
        },
        {
            "commit_message": "Adding URI segment specific encoding (#882)\n\n* Adding URI segment specific encoding\r\n\r\nFixes #879\r\n\r\nURI encoding introduced in Feign 10.x was refactored to be more in line\r\nwith URI and URI Template specifications respectively.  One change was to\r\nensure that certain reserved characters were not encoded incorrectly.\r\n\r\nThe result was that path segment specific reserved characters were being\r\npreserved on the query string as well.  This change updates the `UriTemplate`\r\nand `Expression` classes to recognize the segment of the URI that is being processed\r\nand apply the segment specific encoding correctly.\r\n\r\nOne important change regarding the `+` sign.  Per the URI specification, a `+` sign\r\nis allowed in both the path and query segments of a URI, however, handling of\r\nthe symbol on the query can be inconsistent.  In some legacy systems, the `+` is\r\nequivalent to the a space.  Feign takes the approach of modern systems, where a\r\n`+` symbol should not reprsent a space and is explicitly encoded as `%2B` when\r\nfound on a query string.\r\n\r\nIf you wish to use `+` as a space, then use the literal ` ` character or encode\r\nthe value directly as `%20`\r\n\r\n\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public static java.lang.String feign.template.UriUtils.pathEncode(java.lang.String,java.nio.charset.Charset)",
            "method_name_cc": "public static String feign.template.UriUtils.pathEncode(String path, Charset charset)",
            "file": "core/src/main/java/feign/template/UriUtils.java",
            "previous_method_cc": "public static String feign.template.UriUtils.pathEncode(String path, Charset charset)",
            "previous_method_pd": "public static java.lang.String feign.template.UriUtils.pathEncode(java.lang.String,java.nio.charset.Charset)",
            "previous_file": "core/src/main/java/feign/template/UriUtils.java",
            "previous_commit": "92e6ad85630ca3318e9f5e4cf12ac58806bb2645",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -15.848142164781907,
                "p_value": 0.0,
                "effect_size": 0.3389297136551827,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 349930,
                    "after": 385259
                }
            }
        },
        {
            "commit_message": "Adding URI segment specific encoding (#882)\n\n* Adding URI segment specific encoding\r\n\r\nFixes #879\r\n\r\nURI encoding introduced in Feign 10.x was refactored to be more in line\r\nwith URI and URI Template specifications respectively.  One change was to\r\nensure that certain reserved characters were not encoded incorrectly.\r\n\r\nThe result was that path segment specific reserved characters were being\r\npreserved on the query string as well.  This change updates the `UriTemplate`\r\nand `Expression` classes to recognize the segment of the URI that is being processed\r\nand apply the segment specific encoding correctly.\r\n\r\nOne important change regarding the `+` sign.  Per the URI specification, a `+` sign\r\nis allowed in both the path and query segments of a URI, however, handling of\r\nthe symbol on the query can be inconsistent.  In some legacy systems, the `+` is\r\nequivalent to the a space.  Feign takes the approach of modern systems, where a\r\n`+` symbol should not reprsent a space and is explicitly encoded as `%2B` when\r\nfound on a query string.\r\n\r\nIf you wish to use `+` as a space, then use the literal ` ` character or encode\r\nthe value directly as `%20`\r\n\r\n\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "method_name_cc": "public String feign.template.Template.expand(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/template/Template.java",
            "previous_method_cc": "public String feign.template.Template.expand(Map<String, ?> variables)",
            "previous_method_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "previous_file": "core/src/main/java/feign/template/Template.java",
            "previous_commit": "92e6ad85630ca3318e9f5e4cf12ac58806bb2645",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.0869565217391304,
                "p_value": 0.008616248607509366,
                "effect_size": 0.005228758226819143,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 166999,
                    "after": 169528
                }
            }
        },
        {
            "commit_message": "Adding URI segment specific encoding (#882)\n\n* Adding URI segment specific encoding\r\n\r\nFixes #879\r\n\r\nURI encoding introduced in Feign 10.x was refactored to be more in line\r\nwith URI and URI Template specifications respectively.  One change was to\r\nensure that certain reserved characters were not encoded incorrectly.\r\n\r\nThe result was that path segment specific reserved characters were being\r\npreserved on the query string as well.  This change updates the `UriTemplate`\r\nand `Expression` classes to recognize the segment of the URI that is being processed\r\nand apply the segment specific encoding correctly.\r\n\r\nOne important change regarding the `+` sign.  Per the URI specification, a `+` sign\r\nis allowed in both the path and query segments of a URI, however, handling of\r\nthe symbol on the query can be inconsistent.  In some legacy systems, the `+` is\r\nequivalent to the a space.  Feign takes the approach of modern systems, where a\r\n`+` symbol should not reprsent a space and is explicitly encoded as `%2B` when\r\nfound on a query string.\r\n\r\nIf you wish to use `+` as a space, then use the literal ` ` character or encode\r\nthe value directly as `%20`\r\n\r\n\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public static java.lang.String feign.template.UriUtils.queryEncode(java.lang.String,java.nio.charset.Charset)",
            "method_name_cc": "public static String feign.template.UriUtils.queryEncode(String query, Charset charset)",
            "file": "core/src/main/java/feign/template/UriUtils.java",
            "previous_method_cc": "public static String feign.template.UriUtils.queryEncode(String query, Charset charset)",
            "previous_method_pd": "public static java.lang.String feign.template.UriUtils.queryEncode(java.lang.String,java.nio.charset.Charset)",
            "previous_file": "core/src/main/java/feign/template/UriUtils.java",
            "previous_commit": "92e6ad85630ca3318e9f5e4cf12ac58806bb2645",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -20.508982035928145,
                "p_value": 0.0,
                "effect_size": 0.573544543851739,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 275178,
                    "after": 317437
                }
            }
        }
    ],
    "368818ab9ab741fa335a9dd739c4d2cc5fe04e70": [
        {
            "commit_message": "Add retry feature to async feign (#1757)\n\n* Define MethodHandler.Factory interface\r\n\r\n* Extract AsynchronousMethodHandler from SynchronousMethodHandler\r\n\r\n* Genericize AsynchronousMethodHandler for receive requestContext\r\n\r\n* Pass requestContext to AsynchronousMethodHandler\r\n\r\n* Add retry feature to AsyncFeign\r\n\r\n* Remove ReflectiveAsyncFeign\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "method_name_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "previous_method_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "58d49da0eba0ced60e7a09f24ee562c10f8f10a2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 2.2991967871485945,
                "p_value": 0.0,
                "effect_size": -0.16786629975333472,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 456493,
                    "after": 419760
                }
            }
        }
    ],
    "a9e631ac9beed8a59b52b480f75231695624c2a0": [
        {
            "commit_message": "Add extra information when failing to parse contract (#1176)\n\n* Add extra information when failing to parse contract\r\n\r\n* Add warnings to other error messages\r\n\r\n* Move check if processor are valid before if block",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "protected final void feign.DeclarativeContract.processAnnotationOnClass(feign.MethodMetadata,java.lang.Class)",
            "method_name_cc": "protected final void feign.DeclarativeContract.processAnnotationOnClass(MethodMetadata data, Class<?> targetType)",
            "file": "core/src/main/java/feign/DeclarativeContract.java",
            "previous_method_cc": "protected final void feign.DeclarativeContract.processAnnotationOnClass(MethodMetadata data, Class<?> targetType)",
            "previous_method_pd": "protected final void feign.DeclarativeContract.processAnnotationOnClass(feign.MethodMetadata,java.lang.Class)",
            "previous_file": "core/src/main/java/feign/DeclarativeContract.java",
            "previous_commit": "68f79847449c6df36010e9c4118c4244854ea67c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 11.511971138078058,
                "p_value": 0.0,
                "effect_size": -0.2705082899270541,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 280007,
                    "after": 248480
                }
            }
        },
        {
            "commit_message": "Add extra information when failing to parse contract (#1176)\n\n* Add extra information when failing to parse contract\r\n\r\n* Add warnings to other error messages\r\n\r\n* Move check if processor are valid before if block",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "protected final void feign.DeclarativeContract.processAnnotationOnMethod(feign.MethodMetadata,java.lang.annotation.Annotation,java.lang.reflect.Method)",
            "method_name_cc": "protected final void feign.DeclarativeContract.processAnnotationOnMethod(MethodMetadata data, Annotation annotation, Method method)",
            "file": "core/src/main/java/feign/DeclarativeContract.java",
            "previous_method_cc": "protected final void feign.DeclarativeContract.processAnnotationOnMethod(MethodMetadata data, Annotation annotation, Method method)",
            "previous_method_pd": "protected final void feign.DeclarativeContract.processAnnotationOnMethod(feign.MethodMetadata,java.lang.annotation.Annotation,java.lang.reflect.Method)",
            "previous_file": "core/src/main/java/feign/DeclarativeContract.java",
            "previous_commit": "68f79847449c6df36010e9c4118c4244854ea67c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.531645569620253,
                "p_value": 0.0,
                "effect_size": -0.05466835838535476,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 413907,
                    "after": 368578
                }
            }
        },
        {
            "commit_message": "Add extra information when failing to parse contract (#1176)\n\n* Add extra information when failing to parse contract\r\n\r\n* Add warnings to other error messages\r\n\r\n* Move check if processor are valid before if block",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "protected final boolean feign.DeclarativeContract.processAnnotationsOnParameter(feign.MethodMetadata,java.lang.annotation.Annotation[],int)",
            "method_name_cc": "protected final boolean feign.DeclarativeContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)",
            "file": "core/src/main/java/feign/DeclarativeContract.java",
            "previous_method_cc": "protected final boolean feign.DeclarativeContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)",
            "previous_method_pd": "protected final boolean feign.DeclarativeContract.processAnnotationsOnParameter(feign.MethodMetadata,java.lang.annotation.Annotation[],int)",
            "previous_file": "core/src/main/java/feign/DeclarativeContract.java",
            "previous_commit": "68f79847449c6df36010e9c4118c4244854ea67c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 30.721003134796238,
                "p_value": 0.0,
                "effect_size": -0.21564468082099375,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 365168,
                    "after": 330693
                }
            }
        }
    ],
    "819b2df8c54d9266abf4cde9b17ab7890ed95cc6": [
        {
            "commit_message": "Correct Encoding and restore decodeSlash in QueryTemplate (#1160)\n\nFixes #1156\r\n\r\nCollection Format was encoding query string values unnecessarily\r\ndue to changes introduced in #1138 and #1139 that encode template\r\nvalues before appending them to the query string.\r\n\r\nIn addition, `decodeSlash` flags that were accidentally removed,\r\nhave been restored in QueryTemplate.\r\n\r\n* Restoring decodeSlash in QueryTemplate\r\n\r\n* Correcting Readme with regards to decodeSlash usage\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "private static java.lang.String feign.template.UriUtils.encodeChunk(java.lang.String,java.nio.charset.Charset,boolean)",
            "method_name_cc": "private static String feign.template.UriUtils.encodeChunk(String value, Charset charset, boolean allowReserved)",
            "file": "core/src/main/java/feign/template/UriUtils.java",
            "previous_method_cc": "private static String feign.template.UriUtils.encodeChunk(String value, Charset charset, boolean allowReserved)",
            "previous_method_pd": "private static java.lang.String feign.template.UriUtils.encodeChunk(java.lang.String,java.nio.charset.Charset,boolean)",
            "previous_file": "core/src/main/java/feign/template/UriUtils.java",
            "previous_commit": "49e137349d32acc6c7e886b4646fca578b412eb5",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.06951871657754,
                "p_value": 0.0,
                "effect_size": 0.061884219560277065,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1501141,
                    "after": 1216653
                }
            }
        },
        {
            "commit_message": "Correct Encoding and restore decodeSlash in QueryTemplate (#1160)\n\nFixes #1156\r\n\r\nCollection Format was encoding query string values unnecessarily\r\ndue to changes introduced in #1138 and #1139 that encode template\r\nvalues before appending them to the query string.\r\n\r\nIn addition, `decodeSlash` flags that were accidentally removed,\r\nhave been restored in QueryTemplate.\r\n\r\n* Restoring decodeSlash in QueryTemplate\r\n\r\n* Correcting Readme with regards to decodeSlash usage\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.decodeSlash(boolean)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.decodeSlash(boolean decodeSlash)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.decodeSlash(boolean decodeSlash)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.decodeSlash(boolean)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "49e137349d32acc6c7e886b4646fca578b412eb5",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 5.622878288150591,
                "p_value": 0.7406303229269524,
                "effect_size": -0.05,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 30,
                    "after": 32
                }
            }
        },
        {
            "commit_message": "Correct Encoding and restore decodeSlash in QueryTemplate (#1160)\n\nFixes #1156\r\n\r\nCollection Format was encoding query string values unnecessarily\r\ndue to changes introduced in #1138 and #1139 that encode template\r\nvalues before appending them to the query string.\r\n\r\nIn addition, `decodeSlash` flags that were accidentally removed,\r\nhave been restored in QueryTemplate.\r\n\r\n* Restoring decodeSlash in QueryTemplate\r\n\r\n* Correcting Readme with regards to decodeSlash usage\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "private feign.RequestTemplate feign.RequestTemplate.appendQuery(java.lang.String,java.lang.Iterable,feign.CollectionFormat)",
            "method_name_cc": "private RequestTemplate feign.RequestTemplate.appendQuery(String name, Iterable<String> values, CollectionFormat collectionFormat)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "private RequestTemplate feign.RequestTemplate.appendQuery(String name, Iterable<String> values, CollectionFormat collectionFormat)",
            "previous_method_pd": "private feign.RequestTemplate feign.RequestTemplate.appendQuery(java.lang.String,java.lang.Iterable,feign.CollectionFormat)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "49e137349d32acc6c7e886b4646fca578b412eb5",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.16894609814963796,
                "p_value": 7.506371488201621e-88,
                "effect_size": 0.03784832613543771,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 163579,
                    "after": 209537
                }
            }
        },
        {
            "commit_message": "Correct Encoding and restore decodeSlash in QueryTemplate (#1160)\n\nFixes #1156\r\n\r\nCollection Format was encoding query string values unnecessarily\r\ndue to changes introduced in #1138 and #1139 that encode template\r\nvalues before appending them to the query string.\r\n\r\nIn addition, `decodeSlash` flags that were accidentally removed,\r\nhave been restored in QueryTemplate.\r\n\r\n* Restoring decodeSlash in QueryTemplate\r\n\r\n* Correcting Readme with regards to decodeSlash usage\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.CharSequence feign.CollectionFormat.join(java.lang.String,java.util.Collection,java.nio.charset.Charset)",
            "method_name_cc": "public CharSequence join(String field, Collection<String> values, Charset charset)",
            "file": "core/src/main/java/feign/CollectionFormat.java",
            "previous_method_cc": "public CharSequence join(String field, Collection<String> values, Charset charset)",
            "previous_method_pd": "public java.lang.CharSequence feign.CollectionFormat.join(java.lang.String,java.util.Collection,java.nio.charset.Charset)",
            "previous_file": "core/src/main/java/feign/CollectionFormat.java",
            "previous_commit": "49e137349d32acc6c7e886b4646fca578b412eb5",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -40.57017543859649,
                "p_value": 0.0,
                "effect_size": 0.7901902031263559,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 597689,
                    "after": 726221
                }
            }
        }
    ],
    "d1199f64aec365a24551b00ec1780e56af04870d": [
        {
            "commit_message": "Feature/replace deprecated body (#959)\n\nIn this pr the old `body()` method calls replaced with `requestBody().asBytes()` method which both exists in Request class. The intention is to remove deprecated code and keep source code clean.\r\n\r\nRelated to #857 \r\n\r\n* replaced old body with new Body.asBytes()\r\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "method_name_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "previous_method_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "03ff13ed54d7c628314855074004a4a3da7c1f0a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.034828055689754,
                "p_value": 2.096678447883826e-33,
                "effect_size": -0.05338443438964208,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 34553,
                    "after": 33331
                }
            }
        }
    ],
    "5c57213b349c3e76910f595b67b13d0d34f64566": [
        {
            "commit_message": "Respect decode404 flag and decode 404 response body (#1012)\n\n* decode 404 response body\r\n\r\n* fix SOAPCodecTest\r\n",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "method_name_cc": "public Object feign.gson.GsonDecoder.decode(Response response, Type type)",
            "file": "gson/src/main/java/feign/gson/GsonDecoder.java",
            "previous_method_cc": "public Object feign.gson.GsonDecoder.decode(Response response, Type type)",
            "previous_method_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "previous_file": "gson/src/main/java/feign/gson/GsonDecoder.java",
            "previous_commit": "a2904ad189efd640f65d2ae527425d7dbada3beb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.38167938931297707,
                "p_value": 1.4584531288693587e-246,
                "effect_size": -0.025045799819163734,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1207191,
                    "after": 1183418
                }
            }
        },
        {
            "commit_message": "Respect decode404 flag and decode 404 response body (#1012)\n\n* decode 404 response body\r\n\r\n* fix SOAPCodecTest\r\n",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.lang.Object feign.jackson.JacksonIteratorDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "method_name_cc": "public Object feign.gson.GsonDecoder.decode(Response response, Type type)",
            "file": "gson/src/main/java/feign/gson/GsonDecoder.java",
            "previous_method_cc": "public Object feign.gson.GsonDecoder.decode(Response response, Type type)",
            "previous_method_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "previous_file": "gson/src/main/java/feign/gson/GsonDecoder.java",
            "previous_commit": "a2904ad189efd640f65d2ae527425d7dbada3beb",
            "performance_diff": 0.3917931952663588,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": 0.0,
                "p_value": 0.0,
                "effect_size": 0.15701512414718444,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1207191,
                    "after": 2259556
                }
            }
        }
    ],
    "f8ad8670e3dc73862f52eec475464a301e8c41cc": [
        {
            "commit_message": "GH-1270: Fix conflict between single and multi-value headers (#1347)\n\nFixes: #1270\r\n\r\n`HeaderTemplate` was confusing iterable values with literal values due\r\nto the presence of comma `,` characters in the result.  The result was\r\nthat, in certain cases like HTTP Dates, additional spaces were inserted\r\ninto the final expanded value.\r\n\r\nThe root cause of the issue is that `HeaderTemplate` combined all values\r\ninto a single `String` template, with each value separated by a comma.\r\n\r\nThis change refactors `HeaderTemplate` to treat all `values` as individual\r\n`Templates`, removing the need to combine any provided values into a single\r\nString.\r\n\r\n* Remove unnecessary string splits when expanding Headers in RequestTemplate",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public static feign.template.HeaderTemplate feign.template.HeaderTemplate.create(java.lang.String,java.lang.Iterable)",
            "method_name_cc": "public static HeaderTemplate feign.template.HeaderTemplate.create(String name, Iterable<String> values)",
            "file": "core/src/main/java/feign/template/HeaderTemplate.java",
            "previous_method_cc": "public static HeaderTemplate feign.template.HeaderTemplate.create(String name, Iterable<String> values)",
            "previous_method_pd": "public static feign.template.HeaderTemplate feign.template.HeaderTemplate.create(java.lang.String,java.lang.Iterable)",
            "previous_file": "core/src/main/java/feign/template/HeaderTemplate.java",
            "previous_commit": "784301a9cb397d50a1c90bb028ef03da7b466f42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -98.95316454547928,
                "p_value": 3.571053484445577e-33,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 48,
                    "after": 151840
                }
            }
        },
        {
            "commit_message": "GH-1270: Fix conflict between single and multi-value headers (#1347)\n\nFixes: #1270\r\n\r\n`HeaderTemplate` was confusing iterable values with literal values due\r\nto the presence of comma `,` characters in the result.  The result was\r\nthat, in certain cases like HTTP Dates, additional spaces were inserted\r\ninto the final expanded value.\r\n\r\nThe root cause of the issue is that `HeaderTemplate` combined all values\r\ninto a single `String` template, with each value separated by a comma.\r\n\r\nThis change refactors `HeaderTemplate` to treat all `values` as individual\r\n`Templates`, removing the need to combine any provided values into a single\r\nString.\r\n\r\n* Remove unnecessary string splits when expanding Headers in RequestTemplate",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.util.Collection feign.template.HeaderTemplate.getValues()",
            "method_name_cc": "public Collection<String> feign.template.HeaderTemplate.getValues()",
            "file": "core/src/main/java/feign/template/HeaderTemplate.java",
            "previous_method_cc": "public Collection<String> feign.template.HeaderTemplate.getValues()",
            "previous_method_pd": "public java.util.Collection feign.template.HeaderTemplate.getValues()",
            "previous_file": "core/src/main/java/feign/template/HeaderTemplate.java",
            "previous_commit": "784301a9cb397d50a1c90bb028ef03da7b466f42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 14.335664335664337,
                "p_value": 0.0,
                "effect_size": -0.15530906277069353,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 630180,
                    "after": 534960
                }
            }
        },
        {
            "commit_message": "GH-1270: Fix conflict between single and multi-value headers (#1347)\n\nFixes: #1270\r\n\r\n`HeaderTemplate` was confusing iterable values with literal values due\r\nto the presence of comma `,` characters in the result.  The result was\r\nthat, in certain cases like HTTP Dates, additional spaces were inserted\r\ninto the final expanded value.\r\n\r\nThe root cause of the issue is that `HeaderTemplate` combined all values\r\ninto a single `String` template, with each value separated by a comma.\r\n\r\nThis change refactors `HeaderTemplate` to treat all `values` as individual\r\n`Templates`, removing the need to combine any provided values into a single\r\nString.\r\n\r\n* Remove unnecessary string splits when expanding Headers in RequestTemplate",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.String feign.template.HeaderTemplate.expand(java.util.Map)",
            "method_name_cc": "public String feign.template.HeaderTemplate.expand(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/template/HeaderTemplate.java",
            "previous_method_cc": "public String feign.template.HeaderTemplate.expand(Map<String, ?> variables)",
            "previous_method_pd": "public java.lang.String feign.template.HeaderTemplate.expand(java.util.Map)",
            "previous_file": "core/src/main/java/feign/template/HeaderTemplate.java",
            "previous_commit": "784301a9cb397d50a1c90bb028ef03da7b466f42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 47.368421052631575,
                "p_value": 0.0,
                "effect_size": 0.08028880555726677,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 209048,
                    "after": 177473
                }
            }
        },
        {
            "commit_message": "GH-1270: Fix conflict between single and multi-value headers (#1347)\n\nFixes: #1270\r\n\r\n`HeaderTemplate` was confusing iterable values with literal values due\r\nto the presence of comma `,` characters in the result.  The result was\r\nthat, in certain cases like HTTP Dates, additional spaces were inserted\r\ninto the final expanded value.\r\n\r\nThe root cause of the issue is that `HeaderTemplate` combined all values\r\ninto a single `String` template, with each value separated by a comma.\r\n\r\nThis change refactors `HeaderTemplate` to treat all `values` as individual\r\n`Templates`, removing the need to combine any provided values into a single\r\nString.\r\n\r\n* Remove unnecessary string splits when expanding Headers in RequestTemplate",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public java.lang.String feign.template.HeaderTemplate.getName()",
            "method_name_cc": "public String feign.template.HeaderTemplate.getName()",
            "file": "core/src/main/java/feign/template/HeaderTemplate.java",
            "previous_method_cc": "public String feign.template.HeaderTemplate.getName()",
            "previous_method_pd": "public java.lang.String feign.template.HeaderTemplate.getName()",
            "previous_file": "core/src/main/java/feign/template/HeaderTemplate.java",
            "previous_commit": "784301a9cb397d50a1c90bb028ef03da7b466f42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.0,
                "p_value": 2.6658935219908613e-86,
                "effect_size": 0.03938378625957817,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 182266,
                    "after": 153309
                }
            }
        },
        {
            "commit_message": "GH-1270: Fix conflict between single and multi-value headers (#1347)\n\nFixes: #1270\r\n\r\n`HeaderTemplate` was confusing iterable values with literal values due\r\nto the presence of comma `,` characters in the result.  The result was\r\nthat, in certain cases like HTTP Dates, additional spaces were inserted\r\ninto the final expanded value.\r\n\r\nThe root cause of the issue is that `HeaderTemplate` combined all values\r\ninto a single `String` template, with each value separated by a comma.\r\n\r\nThis change refactors `HeaderTemplate` to treat all `values` as individual\r\n`Templates`, removing the need to combine any provided values into a single\r\nString.\r\n\r\n* Remove unnecessary string splits when expanding Headers in RequestTemplate",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedContract",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "784301a9cb397d50a1c90bb028ef03da7b466f42",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 14.16058394160584,
                "p_value": 0.0,
                "effect_size": -0.42376695342237486,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 200167,
                    "after": 163890
                }
            }
        }
    ],
    "a259a729a8107acaf4d188367a72ef04f9434210": [
        {
            "commit_message": "Alternative ResponseInterceptor attempt (#1634)\n\n* add ResponseInterceptor support #1126\r\n\r\n* Add the license header.\r\n\r\nAdd the license header.\r\n\r\nCo-authored-by: Dewald de Jager <DewaldDeJager@users.noreply.github.com>\r\n\r\n* small fix for license header\r\n\r\n* fix format issue\r\n\r\n* combine before and after method to one aroundDecode method\r\n\r\n* Change ResponseInterceptor to use InvocationContext\r\n\r\nCo-authored-by: Fei,Yanke <yanke.fei@mosi-tech.com>\r\nCo-authored-by: feiyanke <feiyanke@126.com>\r\nCo-authored-by: Dewald de Jager <DewaldDeJager@users.noreply.github.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "method_name_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "previous_method_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "75a3c1cf6f0e57c2d1eaa5f8be2538489e605650",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 4.4255056987370365,
                "p_value": 0.0,
                "effect_size": -0.3178504840038881,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 479095,
                    "after": 417318
                }
            }
        }
    ],
    "470631be507caf2f27a4c693537f9e2f93852dc3": [
        {
            "commit_message": "HTTP protocol version on the logging (#1543)\n\n* [HTTP version] Add HTTP version to Response, the default client; Update SLF4J unit-test\r\n\r\n* [HTTP version] Mock client\r\n\r\n* [HTTP version] Apache HTTP Client\r\n\r\n* [HTTP version] protocol -> protocolVersion; Replace protocol number with full name\r\n\r\n* [HTTP version] Code style, rollback to old one\r\n\r\n* [HTTP version] Google HTTP Client\r\n\r\n* [HTTP version] HTTP_PROTOCOL -> HTTP_PROTOCOL_VERSION\r\n\r\n* [HTTP version] HC5\r\n\r\n* [HTTP version] Java11 Client\r\n\r\n* [HTTP version] OkHttpClient\r\n\r\n* [HTTP version] Code style, rollback to old one\r\n\r\n* [HTTP version] Make some required changes: restore log messages for back compatibility, replace string protocol version with enum, replace fragile conversion of alien enums by string case-insensitive comparision\r\n\r\n* [HTTP version] Code style, rollback to old one; Remove unused constants\r\n\r\n* [HTTP version] Update imports\r\n\r\n* [HTTP version] Test coverage\r\n\r\n* [HTTP version] Fix license issue\r\n\r\n* [HTTP version] Beatify and simplify the unit-test",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(okhttp3.Response,feign.Request) throws java.io.IOException",
            "method_name_cc": "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response response, feign.Request request)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response response, feign.Request request)",
            "previous_method_pd": "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(okhttp3.Response,feign.Request) throws java.io.IOException",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "79ba51019920d49a6a295dcc56785c59360fba4a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -62.97320322180917,
                "p_value": 0.0,
                "effect_size": 0.8056381458300186,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 9669,
                    "after": 27324
                }
            }
        }
    ],
    "6771866f9d4ebea14b3ca16a38c12f5a3f0af128": [
        {
            "commit_message": "Don't URL encode fragment identifiers (#937)\n\nFixes #936\r\n\r\nThis is a super simple fix to illustrate the issue.\r\nIf a different solution is preferred, then I'm open for suggestions of course.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.uri(java.lang.String,boolean)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.uri(java.lang.String,boolean)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "7ba16df534d82e85eba6dba713fb156328634df4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.5405405405405406,
                "p_value": 3.380314201227389e-32,
                "effect_size": 0.015139766662998802,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 406937,
                    "after": 404691
                }
            }
        },
        {
            "commit_message": "Don't URL encode fragment identifiers (#937)\n\nFixes #936\r\n\r\nThis is a super simple fix to illustrate the issue.\r\nIf a different solution is preferred, then I'm open for suggestions of course.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public static feign.RequestTemplate feign.RequestTemplate.from(feign.RequestTemplate)",
            "method_name_cc": "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
            "previous_method_pd": "public static feign.RequestTemplate feign.RequestTemplate.from(feign.RequestTemplate)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "7ba16df534d82e85eba6dba713fb156328634df4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.678227360308285,
                "p_value": 5.879892562554654e-17,
                "effect_size": -0.019686395437982642,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 119794,
                    "after": 121094
                }
            }
        },
        {
            "commit_message": "Don't URL encode fragment identifiers (#937)\n\nFixes #936\r\n\r\nThis is a super simple fix to illustrate the issue.\r\nIf a different solution is preferred, then I'm open for suggestions of course.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public java.lang.String feign.RequestTemplate.url()",
            "method_name_cc": "public String feign.RequestTemplate.url()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public String feign.RequestTemplate.url()",
            "previous_method_pd": "public java.lang.String feign.RequestTemplate.url()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "7ba16df534d82e85eba6dba713fb156328634df4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.9230769230769231,
                "p_value": 6.426179001317666e-218,
                "effect_size": -0.07969087612440538,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 106561,
                    "after": 101983
                }
            }
        },
        {
            "commit_message": "Don't URL encode fragment identifiers (#937)\n\nFixes #936\r\n\r\nThis is a super simple fix to illustrate the issue.\r\nIf a different solution is preferred, then I'm open for suggestions of course.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.target(java.lang.String)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.target(String target)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.target(String target)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.target(java.lang.String)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "7ba16df534d82e85eba6dba713fb156328634df4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.958677685950414,
                "p_value": 1.9838561911412666e-223,
                "effect_size": -0.11005488512359153,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 55627,
                    "after": 56463
                }
            }
        }
    ],
    "b6db37ee3ad7990809425da225c413defa4ce786": [
        {
            "commit_message": "issue 361 - async feign variant supporting CompleteableFutures (#1174)\n\n* issue 361 - async feign variant supporting CompleteableFutures\r\n\r\n* Update core/src/test/java/feign/AsyncFeignTest.java\r\n\r\n* remove duplication between synchronous and async cases\r\n\r\n* remove duplication between synchronous and async cases\r\n\r\n* support sync calls in async-feign\r\n\r\n* Add a synchronous \"AsyncClient\"\r\n\r\n* Added license header\r\n\r\n* Apply feign formatter\r\n\r\n* Add '@Experimental' annotation to new async classes\r\n\r\n* \"fix\" formatting to try and appease build\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "method_name_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "previous_method_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "292b474c5cacf98404f6f8cd2fec3ef0a5901274",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.455026455026455,
                "p_value": 5.6589408584259134e-68,
                "effect_size": -0.04718896996574271,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 92905,
                    "after": 88916
                }
            }
        }
    ],
    "7ba16df534d82e85eba6dba713fb156328634df4": [
        {
            "commit_message": "Replaced comma with Constant Delimiter in Template (#930)\n\nReplaced comma with Constant Delimiter in Template\r\n\r\nFixes #924\r\n\r\nCommas were used to identify iterable content, which conflicted when\r\na comma delimited literal was provided during expansion.  This change\r\nswitches commas for semi-colons, which are considered reserved secondary\r\ndelimiters in RFC 6750 and should not be used without being pct-encoded.\r\n\r\nShould be a safer choice.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public static feign.template.QueryTemplate feign.template.QueryTemplate.create(java.lang.String,java.lang.Iterable,java.nio.charset.Charset,feign.CollectionFormat)",
            "method_name_cc": "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)",
            "previous_method_pd": "public static feign.template.QueryTemplate feign.template.QueryTemplate.create(java.lang.String,java.lang.Iterable,java.nio.charset.Charset,feign.CollectionFormat)",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "6c4dfbd39fbb49a6f97c646fdbe8f767054261f2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.9933774834437087,
                "p_value": 4.358938640603303e-26,
                "effect_size": -0.01237826882974133,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 490076,
                    "after": 481183
                }
            }
        },
        {
            "commit_message": "Replaced comma with Constant Delimiter in Template (#930)\n\nReplaced comma with Constant Delimiter in Template\r\n\r\nFixes #924\r\n\r\nCommas were used to identify iterable content, which conflicted when\r\na comma delimited literal was provided during expansion.  This change\r\nswitches commas for semi-colons, which are considered reserved secondary\r\ndelimiters in RFC 6750 and should not be used without being pct-encoded.\r\n\r\nShould be a safer choice.\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "private java.lang.String feign.template.QueryTemplate.queryString(java.lang.String,java.lang.String)",
            "method_name_cc": "private String feign.template.QueryTemplate.queryString(String name, String values)",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "private String feign.template.QueryTemplate.queryString(String name, String values)",
            "previous_method_pd": "private java.lang.String feign.template.QueryTemplate.queryString(java.lang.String,java.lang.String)",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "6c4dfbd39fbb49a6f97c646fdbe8f767054261f2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.43103448275862066,
                "p_value": 4.404007680343728e-68,
                "effect_size": -0.020559922953110075,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 487234,
                    "after": 471856
                }
            }
        }
    ],
    "4ee8cd8f1ec6fd48e5ed604f96dfeb91ea7d4d65": [
        {
            "commit_message": "Headers overwrite (#1219)\n\n* Add unit test illustrating #1217\r\n\r\n* Make sure content-type is limited to a single value\r\n\r\nCo-authored-by: Pierre de Soyres <pierre.de-soyres@eptica.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.parseFeignContract",
            "method_name_pd": "private feign.RequestTemplate feign.RequestTemplate.appendHeader(java.lang.String,java.lang.Iterable)",
            "method_name_cc": "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)",
            "previous_method_pd": "private feign.RequestTemplate feign.RequestTemplate.appendHeader(java.lang.String,java.lang.Iterable)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "c1b853c7aa33290adc618824669c56a31dabadd5",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.635761589403973,
                "p_value": 0.0,
                "effect_size": -0.06621455907157167,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 710496,
                    "after": 666735
                }
            }
        }
    ],
    "92b2f511a991031cf1e4a1839e08249a5841f9d7": [
        {
            "commit_message": "[GH-1464] Add appendHeader that supports Literals (#1781)\n\nThis change adds a new `appendHeader` internal method to `RequestTemplate`\r\nallowing for already resolved headers to be added to the resolved `RequestTemplate`\r\npreventing duplicate expression processing by using another new method\r\n`HeaderTemplate.literal` and `HeaderTemplate.appendLiteral` respectively.\r\n\r\nI chose this route as it isolates the change to be applied only after the\r\noriginal `HeaderTemplate` has been resolved.  While it does expose new\r\npublic `HeaderTemplate` APIs, I feel that is an OK trade off, allowing\r\na new escape-hatch for situations where URI template processing is not\r\nacceptable for Header values.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "private feign.RequestTemplate feign.RequestTemplate.appendHeader(java.lang.String,java.lang.Iterable)",
            "method_name_cc": "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)",
            "previous_method_pd": "private feign.RequestTemplate feign.RequestTemplate.appendHeader(java.lang.String,java.lang.Iterable)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "9a60ea609932625f3702f36e0a66aa29552920e0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1870.5078125,
                "p_value": 3.582542935735056e-33,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 413316,
                    "after": 48
                }
            }
        },
        {
            "commit_message": "[GH-1464] Add appendHeader that supports Literals (#1781)\n\nThis change adds a new `appendHeader` internal method to `RequestTemplate`\r\nallowing for already resolved headers to be added to the resolved `RequestTemplate`\r\npreventing duplicate expression processing by using another new method\r\n`HeaderTemplate.literal` and `HeaderTemplate.appendLiteral` respectively.\r\n\r\nI chose this route as it isolates the change to be applied only after the\r\noriginal `HeaderTemplate` has been resolved.  While it does expose new\r\npublic `HeaderTemplate` APIs, I feel that is an OK trade off, allowing\r\na new escape-hatch for situations where URI template processing is not\r\nacceptable for Header values.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "9a60ea609932625f3702f36e0a66aa29552920e0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -56.713973799126634,
                "p_value": 0.0,
                "effect_size": 0.9528285016453907,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 339683,
                    "after": 450014
                }
            }
        }
    ],
    "2b141a00ec6d569f0b0abb4408eb4799c31c62b8": [
        {
            "commit_message": "Eliminates unnecessary overhead (#1786)\n\n* Refactor AsyncResponseHandler\r\n\r\n* Extract ResponseHandler from AsyncResponseHandler\r\n\r\n* Use ResponseHandler on SynchronousMethodHandler\r\n\r\nEliminates unnecessary overhead caused by CompletableFutre on synchronous operation.\r\n\r\n* Modify `AsyncResponseHandler.handleResponse` method signature\r\n\r\n* Fix code format\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@dovetailstudios.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "method_name_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
            "previous_method_pd": "java.lang.Object feign.SynchronousMethodHandler.executeAndDecode(feign.RequestTemplate,feign.Request$Options) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "542312e6163327bee0eee481094e9f932fd67140",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -27.259786476868324,
                "p_value": 0.0,
                "effect_size": 0.9026733304707693,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 385446,
                    "after": 390298
                }
            }
        }
    ],
    "246df3746ac3af05945a170940ff7e78a97ce038": [
        {
            "commit_message": "No Longer prepend uri with slash if it is a query string (#889)\n\n* No Longer prepend uri with slash if it is a query string\r\n\r\nFixes #887\r\n\r\nChanges to target and uri parsing did not take into account\r\nEmpty Targets or URI provided methods.  In these scenarios,\r\nthe target contains the entire path and the uri will be the\r\nquery string only.  This change takes that into account and\r\nno longer prepends a slash in these cases.\r\n\r\n* Removed unnecessary import for Spring from Target Test\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.uri(java.lang.String,boolean)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.uri(java.lang.String,boolean)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "8af587e6f5e42c84bb32eae69c45aaa2a9b595fb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 8.944099378881988,
                "p_value": 0.0,
                "effect_size": -0.052080670081053534,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 436457,
                    "after": 439944
                }
            }
        },
        {
            "commit_message": "No Longer prepend uri with slash if it is a query string (#889)\n\n* No Longer prepend uri with slash if it is a query string\r\n\r\nFixes #887\r\n\r\nChanges to target and uri parsing did not take into account\r\nEmpty Targets or URI provided methods.  In these scenarios,\r\nthe target contains the entire path and the uri will be the\r\nquery string only.  This change takes that into account and\r\nno longer prepends a slash in these cases.\r\n\r\n* Removed unnecessary import for Spring from Target Test\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.target(java.lang.String)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.target(String target)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.target(String target)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.target(java.lang.String)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "8af587e6f5e42c84bb32eae69c45aaa2a9b595fb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 5.286343612334802,
                "p_value": 0.0,
                "effect_size": -0.14776655791922774,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 65954,
                    "after": 63618
                }
            }
        }
    ],
    "089a59f98076d64b3086b98366ebbf0d2114769b": [
        {
            "commit_message": "Updated Query Expressions to support empty and undefined values (#910)\n\nFixes #872\r\n\r\nPreviously, all unresolved query template expressions resolved\r\nto empty strings, which then indcate that the entire query parameter\r\nshould be removed.  This violates RFC 6570 in that only undefined\r\nvalues should be removed.  This change updates Query Template to\r\ncheck the provided `variables` map for an entry expression.  If\r\nno value is provided, the entry is explicitly marked `UNDEF` and\r\nremoved.\r\n\r\nThis brings us in line with the specification.  The following is\r\nnow how parameters are resolved:\r\n\r\n*Empty String*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   parameters.put(\"param\", \"\");\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test?param=\r\n```\r\n\r\n*Missing*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test\r\n```\r\n\r\n*Undefined*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   parameters.put(\"param\", null);\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test\r\n```\r\n\r\n* Adding additional test case for explicit null parameter value\r\n\r\n* Additional Test case for the explict `null` case.  Updates to the\r\ndocumentation.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "method_name_cc": "public String feign.template.Template.expand(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/template/Template.java",
            "previous_method_cc": "public String feign.template.Template.expand(Map<String, ?> variables)",
            "previous_method_pd": "public java.lang.String feign.template.Template.expand(java.util.Map)",
            "previous_file": "core/src/main/java/feign/template/Template.java",
            "previous_commit": "32019a22ab3524ee984a09a547c4596a3c5fed80",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.591715976331361,
                "p_value": 3.623923371276426e-129,
                "effect_size": 0.02425297895967792,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 659671,
                    "after": 665488
                }
            }
        },
        {
            "commit_message": "Updated Query Expressions to support empty and undefined values (#910)\n\nFixes #872\r\n\r\nPreviously, all unresolved query template expressions resolved\r\nto empty strings, which then indcate that the entire query parameter\r\nshould be removed.  This violates RFC 6570 in that only undefined\r\nvalues should be removed.  This change updates Query Template to\r\ncheck the provided `variables` map for an entry expression.  If\r\nno value is provided, the entry is explicitly marked `UNDEF` and\r\nremoved.\r\n\r\nThis brings us in line with the specification.  The following is\r\nnow how parameters are resolved:\r\n\r\n*Empty String*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   parameters.put(\"param\", \"\");\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test?param=\r\n```\r\n\r\n*Missing*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test\r\n```\r\n\r\n*Undefined*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   parameters.put(\"param\", null);\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test\r\n```\r\n\r\n* Adding additional test case for explicit null parameter value\r\n\r\n* Additional Test case for the explict `null` case.  Updates to the\r\ndocumentation.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "private java.lang.String feign.template.QueryTemplate.queryString(java.lang.String,java.lang.String)",
            "method_name_cc": "private String feign.template.QueryTemplate.queryString(String name, String values)",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "private String feign.template.QueryTemplate.queryString(String name, String values)",
            "previous_method_pd": "private java.lang.String feign.template.QueryTemplate.queryString(java.lang.String,java.lang.String)",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "32019a22ab3524ee984a09a547c4596a3c5fed80",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.9090909090909091,
                "p_value": 4.221994396400927e-265,
                "effect_size": -0.03763899141985683,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 570309,
                    "after": 568296
                }
            }
        }
    ],
    "72f379a03d24826ae64e43a3d3e737c2a94ee717": [
        {
            "commit_message": "Micrometer Observations (#1760)\n\n* WIP on Micrometer Observations\r\n\r\n* Added verification that metrics are measured\r\n\r\n* Fixed formatting\r\n\r\n* Fixed wrong status code method call\r\n\r\n* Converted to using around\r\n\r\n* Fixed compilation issues\r\n\r\n* prepare release 11.10\r\n\r\n* [ci skip] updating versions to next development iteration 11.11-SNAPSHOT\r\n\r\n* Preparing for next development version\r\n\r\n* build(deps): bump json from 20220320 to 20220924 (#1768)\r\n\r\nBumps [json](https://github.com/douglascrockford/JSON-java) from 20220320 to 20220924.\r\n- [Release notes](https://github.com/douglascrockford/JSON-java/releases)\r\n- [Changelog](https://github.com/stleary/JSON-java/blob/master/docs/RELEASES.md)\r\n- [Commits](https://github.com/douglascrockford/JSON-java/commits)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.json:json\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-major\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Updated to latest micrometer changes\r\n\r\n* Enriches via clientInterceptors\r\n\r\n* Fixed the error in the DEFAULT instance\r\n\r\n* Reverts enriching of CLientInterceptor to achieve observability\r\n\r\n* build(deps): bump slf4j.version from 2.0.2 to 2.0.3 (#1769)\r\n\r\nBumps `slf4j.version` from 2.0.2 to 2.0.3.\r\n\r\nUpdates `slf4j-simple` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-nop` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-api` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-jdk14` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.slf4j:slf4j-simple\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-nop\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-api\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-jdk14\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* build(deps): bump kotlin.version from 1.7.10 to 1.7.20 (#1771)\r\n\r\nBumps `kotlin.version` from 1.7.10 to 1.7.20.\r\n\r\nUpdates `kotlin-stdlib-jdk8` from 1.7.10 to 1.7.20\r\n- [Release notes](https://github.com/JetBrains/kotlin/releases)\r\n- [Changelog](https://github.com/JetBrains/kotlin/blob/v1.7.20/ChangeLog.md)\r\n- [Commits](https://github.com/JetBrains/kotlin/compare/v1.7.10...v1.7.20)\r\n\r\nUpdates `kotlin-reflect` from 1.7.10 to 1.7.20\r\n- [Release notes](https://github.com/JetBrains/kotlin/releases)\r\n- [Changelog](https://github.com/JetBrains/kotlin/blob/v1.7.20/ChangeLog.md)\r\n- [Commits](https://github.com/JetBrains/kotlin/compare/v1.7.10...v1.7.20)\r\n\r\nUpdates `kotlin-maven-plugin` from 1.7.10 to 1.7.20\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.jetbrains.kotlin:kotlin-stdlib-jdk8\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.jetbrains.kotlin:kotlin-reflect\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.jetbrains.kotlin:kotlin-maven-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* build(deps): bump asm from 9.3 to 9.4 (#1777)\r\n\r\nBumps asm from 9.3 to 9.4.\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.ow2.asm:asm\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-minor\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Applied latest changes of Micrometer\r\n\r\n* Polish\r\n\r\n* Upgraded Micrometer to 1.10.0'\r\n\r\n* Alternative micrometer observation using capability\r\n\r\n* Ban 'repositories'\r\n\r\n* Applied my own review suggestions ;)\r\n\r\n* Polish\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@dovetailstudios.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@police.govt.nz>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.util.Map feign.RequestTemplate.headers()",
            "method_name_cc": "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
            "previous_method_pd": "public java.util.Map feign.RequestTemplate.headers()",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "1ce671a903c7fceaa851b4466f9a9e1de7e6f4e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.8691588785046727,
                "p_value": 0.0,
                "effect_size": 0.08863517095863585,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 748144,
                    "after": 933488
                }
            }
        },
        {
            "commit_message": "Micrometer Observations (#1760)\n\n* WIP on Micrometer Observations\r\n\r\n* Added verification that metrics are measured\r\n\r\n* Fixed formatting\r\n\r\n* Fixed wrong status code method call\r\n\r\n* Converted to using around\r\n\r\n* Fixed compilation issues\r\n\r\n* prepare release 11.10\r\n\r\n* [ci skip] updating versions to next development iteration 11.11-SNAPSHOT\r\n\r\n* Preparing for next development version\r\n\r\n* build(deps): bump json from 20220320 to 20220924 (#1768)\r\n\r\nBumps [json](https://github.com/douglascrockford/JSON-java) from 20220320 to 20220924.\r\n- [Release notes](https://github.com/douglascrockford/JSON-java/releases)\r\n- [Changelog](https://github.com/stleary/JSON-java/blob/master/docs/RELEASES.md)\r\n- [Commits](https://github.com/douglascrockford/JSON-java/commits)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.json:json\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-major\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Updated to latest micrometer changes\r\n\r\n* Enriches via clientInterceptors\r\n\r\n* Fixed the error in the DEFAULT instance\r\n\r\n* Reverts enriching of CLientInterceptor to achieve observability\r\n\r\n* build(deps): bump slf4j.version from 2.0.2 to 2.0.3 (#1769)\r\n\r\nBumps `slf4j.version` from 2.0.2 to 2.0.3.\r\n\r\nUpdates `slf4j-simple` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-nop` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-api` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-jdk14` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.slf4j:slf4j-simple\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-nop\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-api\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-jdk14\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* build(deps): bump kotlin.version from 1.7.10 to 1.7.20 (#1771)\r\n\r\nBumps `kotlin.version` from 1.7.10 to 1.7.20.\r\n\r\nUpdates `kotlin-stdlib-jdk8` from 1.7.10 to 1.7.20\r\n- [Release notes](https://github.com/JetBrains/kotlin/releases)\r\n- [Changelog](https://github.com/JetBrains/kotlin/blob/v1.7.20/ChangeLog.md)\r\n- [Commits](https://github.com/JetBrains/kotlin/compare/v1.7.10...v1.7.20)\r\n\r\nUpdates `kotlin-reflect` from 1.7.10 to 1.7.20\r\n- [Release notes](https://github.com/JetBrains/kotlin/releases)\r\n- [Changelog](https://github.com/JetBrains/kotlin/blob/v1.7.20/ChangeLog.md)\r\n- [Commits](https://github.com/JetBrains/kotlin/compare/v1.7.10...v1.7.20)\r\n\r\nUpdates `kotlin-maven-plugin` from 1.7.10 to 1.7.20\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.jetbrains.kotlin:kotlin-stdlib-jdk8\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.jetbrains.kotlin:kotlin-reflect\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.jetbrains.kotlin:kotlin-maven-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* build(deps): bump asm from 9.3 to 9.4 (#1777)\r\n\r\nBumps asm from 9.3 to 9.4.\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.ow2.asm:asm\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-minor\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Applied latest changes of Micrometer\r\n\r\n* Polish\r\n\r\n* Upgraded Micrometer to 1.10.0'\r\n\r\n* Alternative micrometer observation using capability\r\n\r\n* Ban 'repositories'\r\n\r\n* Applied my own review suggestions ;)\r\n\r\n* Polish\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@dovetailstudios.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@police.govt.nz>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "private feign.RequestTemplate feign.RequestTemplate.appendHeader(java.lang.String,java.lang.Iterable,boolean)",
            "method_name_cc": "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values, boolean literal)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values, boolean literal)",
            "previous_method_pd": "private feign.RequestTemplate feign.RequestTemplate.appendHeader(java.lang.String,java.lang.Iterable,boolean)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "1ce671a903c7fceaa851b4466f9a9e1de7e6f4e6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.28849902534113,
                "p_value": 1.5153839125564774e-37,
                "effect_size": 0.018531726918528446,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 280362,
                    "after": 368253
                }
            }
        }
    ],
    "7230f7c6eea82eb2b340e5d2e76cba1cf87bcf13": [
        {
            "commit_message": "Stream decoder optimize (#1590)\n\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add license header\r\n\r\n* add license header\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add license header\r\n\r\n* add license header\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add license header\r\n\r\n* add license header\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add license header\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add some example\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add a section of README for stream decoder\r\n\r\n* Update StreamDecoder.java\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.lang.Object feign.stream.StreamDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException,feign.FeignException",
            "method_name_cc": "public Object feign.stream.StreamDecoder.decode(Response response, Type type)",
            "file": "core/src/main/java/feign/stream/StreamDecoder.java",
            "previous_method_cc": "public Object feign.stream.StreamDecoder.decode(Response response, Type type)",
            "previous_method_pd": "public java.lang.Object feign.stream.StreamDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException,feign.FeignException",
            "previous_file": "core/src/main/java/feign/stream/StreamDecoder.java",
            "previous_commit": "e1a70289cdc203707237e4642dc56e1a96e88e63",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -20.54794520547945,
                "p_value": 0.0,
                "effect_size": 0.05488743722418544,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1096948,
                    "after": 1148359
                }
            }
        }
    ],
    "23ee09ef88a02ead7c8c925cdab7b094053b3d9e": [
        {
            "commit_message": "Adds support for per request timeout options. Fixes #562 (#970)\n\n* Add Options UT\r\n\r\n* Ignore Options when set bodyIndex",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public java.lang.Object feign.SynchronousMethodHandler.invoke(java.lang.Object[]) throws java.lang.Throwable",
            "method_name_cc": "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)",
            "file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_method_cc": "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)",
            "previous_method_pd": "public java.lang.Object feign.SynchronousMethodHandler.invoke(java.lang.Object[]) throws java.lang.Throwable",
            "previous_file": "core/src/main/java/feign/SynchronousMethodHandler.java",
            "previous_commit": "2ee3f99624bad5ea6ba8390e5b3295c06734f4a4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.6643661460225205,
                "p_value": 1.5306764087083628e-148,
                "effect_size": 0.07478888721379294,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 66534,
                    "after": 101259
                }
            }
        }
    ],
    "37d973c00476c88731edd36733bc3d65763285ac": [
        {
            "commit_message": "GH-1172: Store expanded Header Template values as Literals (#1203)\n\nFixes #1172\r\n\r\nWhen a `HeaderTemplate` is expanded, the result is placed onto a new\r\n`RequestTemplate` via it's `header` method.  This results in the expanded\r\nresult being turned back into a `HeaderTemplate`, simply out of\r\nconvenience.  This behavior, while fine more general use cases, is\r\nproblematic if the header value contains braces `{` `}`, as this will\r\ncause the app to consider these values as new expressions.\r\n\r\nAt this point in the expansion process, there is no need to evaluate\r\nthe expanded values again, so this change allows a `Template` to be\r\ncreated from an existing List of `TemplateChunks`, allowing for callers\r\nto provide explicit `Literal` or `Expression` chunks directly into a\r\n`Template`, by passing the template parsing algorithms.\r\n\r\n`RequestTemplate#expand` has been updated to apply this logic for\r\n`HeaderTemplate` values only.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "187cba9c5d13335f3119cb4d778416c1b8c742d8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.238095238095238,
                "p_value": 0.117086967055472,
                "effect_size": 0.004552650055869542,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 79429,
                    "after": 78561
                }
            }
        }
    ],
    "b596abe348ee4a2ce71ba66fc9b3e3b6fb5236f7": [
        {
            "commit_message": "Set empty request body if it was null (#1778)\n\nCo-authored-by: Kevin Davis <kdavisk6@gmail.com>",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "method_name_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
            "previous_method_pd": "static okhttp3.Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request)",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "92b2f511a991031cf1e4a1839e08249a5841f9d7",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 20.219487861656134,
                "p_value": 2.3307278967509926e-267,
                "effect_size": -0.19231944015398691,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 23064,
                    "after": 21023
                }
            }
        }
    ],
    "318fb0e955b8cfcf64f70d6aeea0ba5795f8a7eb": [
        {
            "commit_message": "Updated Expression Patterns to allow brackets (#939)\n\n* Updated Expression Patterns to allow brackets\r\n\r\nFixes #928\r\n\r\nRelaxed the regular expression that is used to determine if a given\r\nvalue is an Expression per the URI Template Spec RFC 6570.  We already\r\ndeviated by allowing dashes to exist without pct-encoding, this change\r\nadds braces `[]` to this list.\r\n\r\nAlso included is the ability to set Collection Format per Query, overriding\r\nthe Template default.  This allows for mixed Collection formats in the\r\nsame template and provides a way for Contract extensions to determine\r\nwhich expansion type they want when parsing a contract.\r\n\r\n* Fixing Formatting\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.query(java.lang.String,java.lang.Iterable)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.query(java.lang.String,java.lang.Iterable)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "6771866f9d4ebea14b3ca16a38c12f5a3f0af128",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 38.075842696629216,
                "p_value": 0.0,
                "effect_size": -0.05650863556129358,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 496446,
                    "after": 454920
                }
            }
        }
    ],
    "b79d6fcf83bc56b6ab0459c0f63688a2b6197b28": [
        {
            "commit_message": "Use charset from response Content-Type header to decode  (#1302)\n\n* If charset is set in Content-type, we decode response using that charset\r\n\r\n* Java 8 compatibility\r\n\r\n* Format fix\r\n\r\n* Moving code to get charset to Response in order to be used by another\r\ndecoders",
            "benchmark": "feign.benchmark.DecoderIteratorsBenchmark.decode",
            "method_name_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "method_name_cc": "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)",
            "file": "jackson/src/main/java/feign/jackson/JacksonDecoder.java",
            "previous_method_cc": "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)",
            "previous_method_pd": "public java.lang.Object feign.jackson.JacksonDecoder.decode(feign.Response,java.lang.reflect.Type) throws java.io.IOException",
            "previous_file": "jackson/src/main/java/feign/jackson/JacksonDecoder.java",
            "previous_commit": "4cf1a5498513535499f956a4639481a26f65fc06",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.5617977528089888,
                "p_value": 0.0,
                "effect_size": -0.03237524177183654,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1179422,
                    "after": 846535
                }
            }
        }
    ],
    "fdc7bc2fb85ef6c816f36750ece1a18fa80d4ef3": [
        {
            "commit_message": "Add async behavior to OkHttpClient (#1629)\n\n* Add AsyncOkHttpClient implementation\r\n\r\n* Make OkHttpClient implement both Client and AsyncClient\r\n\r\nRemoves the need to share code in an abstract class.\r\n\r\n* Update mindmap\r\n\r\n* Update CHANGELOG.md\r\n\r\n* Remove jetbrains specific annotations",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request,feign.Request$Options) throws java.io.IOException",
            "method_name_cc": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)",
            "previous_method_pd": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request,feign.Request$Options) throws java.io.IOException",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "d27d385e1a1673446aa1f6a778a91fbaa2442679",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 6.8567740894607345,
                "p_value": 4.36452108473606e-143,
                "effect_size": -0.12665420331193472,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 28138,
                    "after": 25874
                }
            }
        }
    ],
    "f73fe7058a3a7da0aa307220e766f1fb2f4b58dd": [
        {
            "commit_message": "Include variables Query Parameter Names when listing template parameters (#1144)\n\nFixes #1089\r\n\r\nQuery Template names, which also happen to be templates, were not being\r\nconsidered when listing out all of the variable names in a Query Template.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedApi",
            "method_name_pd": "public java.util.List feign.template.QueryTemplate.getVariables()",
            "method_name_cc": "public List<String> feign.template.QueryTemplate.getVariables()",
            "file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_method_cc": "public List<String> feign.template.QueryTemplate.getVariables()",
            "previous_method_pd": "public java.util.List feign.template.QueryTemplate.getVariables()",
            "previous_file": "core/src/main/java/feign/template/QueryTemplate.java",
            "previous_commit": "a7b7c01806324126dd844a9a912e309754bc4dc9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 43.952474570476106,
                "p_value": 1.5207845515669472e-05,
                "effect_size": -0.6304985337243402,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 31,
                    "after": 33
                }
            }
        }
    ],
    "028ae86753324e379dcc13580e8f8ad5c45213a2": [
        {
            "commit_message": "Avoided url appending with slash when matrix parameter exists (#999)\n\n* Avoided url appending with slash when matrix parameter exists\r\n\r\n* Added UT to cover url appending with slash when matrix parameter exists\r\n",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.uri(java.lang.String,boolean)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.uri(java.lang.String,boolean)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "d3af6a9b5e6763660ec0ec4a9a9b72065b6dd70a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 7.227332457293036,
                "p_value": 0.0,
                "effect_size": -0.06506186355004666,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 488956,
                    "after": 476410
                }
            }
        }
    ],
    "9e23599df3325c407e752d9fd6fcd302637e9ab9": [
        {
            "commit_message": "Force followRedirects on the OkHttpClient when needed (#1130)\n\n",
            "benchmark": "feign.benchmark.RealRequestBenchmarks.query_feignUsingOkHttp",
            "method_name_pd": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request,feign.Request$Options) throws java.io.IOException",
            "method_name_cc": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)",
            "file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_method_cc": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)",
            "previous_method_pd": "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request,feign.Request$Options) throws java.io.IOException",
            "previous_file": "okhttp/src/main/java/feign/okhttp/OkHttpClient.java",
            "previous_commit": "cca3887ce0bb2562b0e6d6432731c9f5e946739e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.2866290525795511,
                "p_value": 0.04133462152035597,
                "effect_size": 0.00929479757021257,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 32500,
                    "after": 31747
                }
            }
        }
    ],
    "ce662052d788bb4c35f89c8f67a75cdaf3c68c83": [
        {
            "commit_message": "Removed Duplicate Expansion (#909)\n\nFixes #904\r\n\r\nQuery Template expanded twice.  This is unnecessary and would have\r\ncaused a performance issue at scale.",
            "benchmark": "feign.benchmark.WhatShouldWeCacheBenchmarks.buildAndQuery_fake_cachedFeign",
            "method_name_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "method_name_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_method_cc": "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
            "previous_method_pd": "public feign.RequestTemplate feign.RequestTemplate.resolve(java.util.Map)",
            "previous_file": "core/src/main/java/feign/RequestTemplate.java",
            "previous_commit": "6b8ed38ef5e8310bc5d93e7b2293d15762312d09",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -7.830423940149626,
                "p_value": 0.0,
                "effect_size": 0.29863787377565665,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 93634,
                    "after": 99330
                }
            }
        }
    ]
}