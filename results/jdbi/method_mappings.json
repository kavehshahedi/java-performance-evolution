{
    "49ae34ffafc78374f1f41fbc62a555683f271f9e": [
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "public boolean org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.accepts(java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "public boolean org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.accepts(Class<?> extensionType, Method method)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java",
            "previous_method_cc": "public boolean org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.accepts(Class<?> extensionType, Method method)",
            "previous_method_pd": "public boolean org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.accepts(java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 13.998466909580992,
                "p_value": 0.812432208131742,
                "effect_size": 0.04938271604938271,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 18,
                    "after": 18
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "public boolean org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.accepts(java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "public boolean org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.accepts(Class<?> extensionType, Method method)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java",
            "previous_method_cc": "public boolean org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.accepts(Class<?> extensionType, Method method)",
            "previous_method_pd": "public boolean org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.accepts(java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": 0.9647290140576806,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -97.63686986582492,
                "p_value": 1.8666414960722612e-06,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 18,
                    "after": 14
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "private java.util.Iterator org.jdbi.v3.sqlobject.statement.internal.SqlBatchHandler.zipArgs(java.lang.reflect.Method,java.lang.Object[])",
            "method_name_cc": "private Iterator<Object[]> zipArgs(Method method, Object[] args)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_method_cc": "private Iterator<Object[]> zipArgs(Method method, Object[] args)",
            "previous_method_pd": "private java.util.Iterator org.jdbi.v3.sqlobject.statement.internal.SqlBatchHandler.zipArgs(java.lang.reflect.Method,java.lang.Object[])",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -13.562298075572413,
                "p_value": 3.903685107992434e-06,
                "effect_size": 0.2169009270730978,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 263,
                    "after": 356
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "public org.jdbi.v3.core.result.ResultIterator org.jdbi.v3.core.statement.PreparedBatch.executeAndGetModCount()",
            "method_name_cc": "public ResultIterator<Integer> org.jdbi.v3.core.statement.PreparedBatch.executeAndGetModCount()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "public ResultIterator<Integer> org.jdbi.v3.core.statement.PreparedBatch.executeAndGetModCount()",
            "previous_method_pd": "public org.jdbi.v3.core.result.ResultIterator org.jdbi.v3.core.statement.PreparedBatch.executeAndGetModCount()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -4.398560734283567,
                "p_value": 4.722385417566773e-28,
                "effect_size": 0.5052730977585607,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 285,
                    "after": 353
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "private java.util.function.Function org.jdbi.v3.core.config.ConfigRegistry.configFactory(java.lang.Class)",
            "method_name_cc": "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)",
            "file": "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java",
            "previous_method_cc": "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)",
            "previous_method_pd": "private java.util.function.Function org.jdbi.v3.core.config.ConfigRegistry.configFactory(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.465201465201465,
                "p_value": 0.0,
                "effect_size": 0.050416323216309566,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3467929,
                    "after": 3531400
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public static org.jdbi.v3.core.mapper.RowMapper org.jdbi.v3.core.mapper.reflect.BeanMapper.of(java.lang.Class)",
            "method_name_cc": "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.of(Class<T> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/BeanMapper.java",
            "previous_method_cc": "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.of(Class<T> type)",
            "previous_method_pd": "public static org.jdbi.v3.core.mapper.RowMapper org.jdbi.v3.core.mapper.reflect.BeanMapper.of(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/BeanMapper.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.038301415487094,
                "p_value": 0.3400858902842717,
                "effect_size": -0.2088888888888889,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 15,
                    "after": 15
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public static org.jdbi.v3.core.mapper.RowMapperFactory org.jdbi.v3.core.mapper.reflect.BeanMapper.factory(java.lang.Class)",
            "method_name_cc": "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.factory(Class<?> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/BeanMapper.java",
            "previous_method_cc": "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.factory(Class<?> type)",
            "previous_method_pd": "public static org.jdbi.v3.core.mapper.RowMapperFactory org.jdbi.v3.core.mapper.reflect.BeanMapper.factory(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/BeanMapper.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 12.915412731633493,
                "p_value": 0.28547630885188247,
                "effect_size": -0.2638888888888889,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.Mappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "public <T> Optional<RowMapper<T>> org.jdbi.v3.core.mapper.Mappers.findFor(QualifiedType<T> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/Mappers.java",
            "previous_method_cc": "public <T> Optional<RowMapper<T>> org.jdbi.v3.core.mapper.Mappers.findFor(QualifiedType<T> type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.Mappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/Mappers.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -2.7698863636363638,
                "p_value": 0.0,
                "effect_size": 0.1729691957353978,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1588126,
                    "after": 1612274
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.ColumnMappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "public <T> Optional<RowMapper<T>> org.jdbi.v3.core.mapper.Mappers.findFor(QualifiedType<T> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/Mappers.java",
            "previous_method_cc": "public <T> Optional<RowMapper<T>> org.jdbi.v3.core.mapper.Mappers.findFor(QualifiedType<T> type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.Mappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/Mappers.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": 0.016452509380861846,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -9.375,
                "p_value": 0.0,
                "effect_size": 0.21172535479838908,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1588126,
                    "after": 5193614
                }
            }
        },
        {
            "commit_message": "PMD 7 fixups\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByRandomCaseName",
            "method_name_pd": "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(org.jdbi.v3.core.statement.Binding)",
            "method_name_cc": "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(Binding binding)",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java",
            "previous_method_cc": "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(Binding binding)",
            "previous_method_pd": "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(org.jdbi.v3.core.statement.Binding)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java",
            "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.6054059695261955,
                "p_value": 3.7043662663842925e-09,
                "effect_size": 0.05184391089493644,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8638,
                    "after": 8613
                }
            }
        }
    ],
    "3ff1d141adf07ac7a4d0c3baecf6676c0c73be25": [
        {
            "commit_message": "Some small changes to extension framework\n\n- extension factories are by default virtual, use NON_VIRTUAL_FACTORY\n  flag instead of VIRTUAL_FACTORY flag\n- use INSTANCE for all singletons, replace FACTORY and HANDLER\n- rename buildExtensionInitData to buildExtensionMetadata\n- extension factory attach method has a default implementation that says\n\"unimplemented\". This matches the \"default virtual factory\" change.\n- ExtensionHandlerFactory is now a toplevel class\n- rename buildExtensionHandler to createExtensionHandler\n- provide default (empty) default methods for ConfigCustomizer interface\n- remove config method parameter from Extensions#findMetadata\n- Rename `CLASSES_ARE_SUPPORTED` feature flag to `DONT_USE_PROXY`.\n- Make ExtensionFactory a functional interface with apply()\n- rename UseExtensionCustomizer to UseExtensionHandlerCustomizer\n- name the annotation factories more consistently\n- introduce SimpleExtensionConfigurer, make most extension configurers\n  that behave the same for instance and method use extend it\n- rename `ExtensionCustomizationOrder` to `ExtensionHandlerCustomizationOrder`\n- document `NoSuchExtensionException`\n- Filter synthetic and default methods for user factories\n- Rename UseAnnotationHandlerFactory -> UseAnnotationExtensionHandlerFactory\n- make configure method in SimpleExtensionConfigurer public\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public org.jdbi.v3.core.extension.Extensions org.jdbi.v3.core.extension.Extensions.registerHandlerFactory(org.jdbi.v3.core.extension.ExtensionHandlerFactory)",
            "method_name_cc": "public Extensions org.jdbi.v3.core.extension.Extensions.registerHandlerFactory(ExtensionHandlerFactory extensionHandlerFactory)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java",
            "previous_method_cc": "public Extensions org.jdbi.v3.core.extension.Extensions.registerHandlerFactory(ExtensionHandlerFactory extensionHandlerFactory)",
            "previous_method_pd": "public org.jdbi.v3.core.extension.Extensions org.jdbi.v3.core.extension.Extensions.registerHandlerFactory(org.jdbi.v3.core.extension.ExtensionHandlerFactory)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java",
            "previous_commit": "2f9d5887e749c5b81a86d9d6d3c93a5424e02511",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "Some small changes to extension framework\n\n- extension factories are by default virtual, use NON_VIRTUAL_FACTORY\n  flag instead of VIRTUAL_FACTORY flag\n- use INSTANCE for all singletons, replace FACTORY and HANDLER\n- rename buildExtensionInitData to buildExtensionMetadata\n- extension factory attach method has a default implementation that says\n\"unimplemented\". This matches the \"default virtual factory\" change.\n- ExtensionHandlerFactory is now a toplevel class\n- rename buildExtensionHandler to createExtensionHandler\n- provide default (empty) default methods for ConfigCustomizer interface\n- remove config method parameter from Extensions#findMetadata\n- Rename `CLASSES_ARE_SUPPORTED` feature flag to `DONT_USE_PROXY`.\n- Make ExtensionFactory a functional interface with apply()\n- rename UseExtensionCustomizer to UseExtensionHandlerCustomizer\n- name the annotation factories more consistently\n- introduce SimpleExtensionConfigurer, make most extension configurers\n  that behave the same for instance and method use extend it\n- rename `ExtensionCustomizationOrder` to `ExtensionHandlerCustomizationOrder`\n- document `NoSuchExtensionException`\n- Filter synthetic and default methods for user factories\n- Rename UseAnnotationHandlerFactory -> UseAnnotationExtensionHandlerFactory\n- make configure method in SimpleExtensionConfigurer public\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public org.jdbi.v3.core.extension.ExtensionMetadata org.jdbi.v3.core.extension.ExtensionMetadata$Builder.build()",
            "method_name_cc": "public ExtensionMetadata build()",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/ExtensionMetadata.java",
            "previous_method_cc": "public ExtensionMetadata build()",
            "previous_method_pd": "public org.jdbi.v3.core.extension.ExtensionMetadata org.jdbi.v3.core.extension.ExtensionMetadata$Builder.build()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/ExtensionMetadata.java",
            "previous_commit": "2f9d5887e749c5b81a86d9d6d3c93a5424e02511",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -13.75403115702907,
                "p_value": 0.01657492674985327,
                "effect_size": 0.5833333333333334,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        }
    ],
    "2e1d2244c8affd3aab76ec2b9dcbf898845343c0": [
        {
            "commit_message": "Rewrite sqlobject extension\n\nUse the new extension framework, deprecate all the sqlobject specific\npieces. They still work fine, but new code should use the extension\nframework directly.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(java.lang.Class)",
            "method_name_cc": "public boolean org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.accepts(Class<?> extensionType)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java",
            "previous_method_cc": "public boolean org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.accepts(Class<?> extensionType)",
            "previous_method_pd": "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(java.lang.Class)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java",
            "previous_commit": "88eeb97188f6bde7ea5654051591f9f03c16eb73",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 8.587997461966387,
                "p_value": 0.2066257355790212,
                "effect_size": -0.20164609053497942,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 27,
                    "after": 27
                }
            }
        },
        {
            "commit_message": "Rewrite sqlobject extension\n\nUse the new extension framework, deprecate all the sqlobject specific\npieces. They still work fine, but new code should use the extension\nframework directly.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private static org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizerFactory org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.instantiateFactory(java.lang.annotation.Annotation)",
            "method_name_cc": "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java",
            "previous_method_cc": "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)",
            "previous_method_pd": "private static org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizerFactory org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.instantiateFactory(java.lang.annotation.Annotation)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java",
            "previous_commit": "88eeb97188f6bde7ea5654051591f9f03c16eb73",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -4.546671100333336,
                "p_value": 0.5111961767470183,
                "effect_size": 0.055290858725761775,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 95,
                    "after": 95
                }
            }
        }
    ],
    "2ec145e817273a3795ee0157a46825f2ce46b7f9": [
        {
            "commit_message": "Update the remaining ExtensionConfigurer\n\nApply the patterns from #2416 to all the remaining configurers.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private static java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(java.lang.Class,java.lang.reflect.Method,java.util.stream.Stream,org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory$ConfigurerMethod)",
            "method_name_cc": "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Method method, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_method_cc": "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)",
            "previous_method_pd": "private static java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(java.lang.Class,java.util.stream.Stream,org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory$ConfigurerMethod)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_commit": "c247ce52e9b852e6c7bbfcb3db7dc74cc648221c",
            "performance_diff": -0.05569057215903728,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -17.780957610830676,
                "p_value": 0.23780984856574683,
                "effect_size": 0.08700787401574803,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 127,
                    "after": 120
                }
            }
        },
        {
            "commit_message": "Update the remaining ExtensionConfigurer\n\nApply the patterns from #2416 to all the remaining configurers.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(java.lang.Class)",
            "method_name_cc": "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(Class<?> extensionType)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_method_cc": "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(Class<?> extensionType)",
            "previous_method_pd": "public java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_commit": "c247ce52e9b852e6c7bbfcb3db7dc74cc648221c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -16.201136368064784,
                "p_value": 0.11235119769046395,
                "effect_size": 0.3888888888888889,
                "effect_size_interpretation": "medium",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        },
        {
            "commit_message": "Update the remaining ExtensionConfigurer\n\nApply the patterns from #2416 to all the remaining configurers.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(Class<?> extensionType, Method method)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_method_cc": "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(Class<?> extensionType, Method method)",
            "previous_method_pd": "public java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_commit": "c247ce52e9b852e6c7bbfcb3db7dc74cc648221c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -14.894138695261574,
                "p_value": 0.8746415872409593,
                "effect_size": -0.012280701754385965,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 114,
                    "after": 110
                }
            }
        }
    ],
    "f4df5c78432d3aa787ccda9f226eb968b8320f3a": [
        {
            "commit_message": "Improve config customizer performance\n\nAllow config customizers that do not need the config object itself to\ncreate internal state at metadata creation time and cache that state as\npart of the extension type metadata. This moves the creation of a\nclass (and potentially other expensive operations) away from the\ninvocation of extension methods.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(java.lang.Class)",
            "method_name_cc": "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(Class<?> extensionType)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_method_cc": "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(Class<?> extensionType)",
            "previous_method_pd": "public java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_commit": "a4f874e0aa3681825e5ee2f0ebd8855be2d877d3",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -6.403350798992805,
                "p_value": 0.21449380778351745,
                "effect_size": 0.3055555555555556,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        },
        {
            "commit_message": "Improve config customizer performance\n\nAllow config customizers that do not need the config object itself to\ncreate internal state at metadata creation time and cache that state as\npart of the extension type metadata. This moves the creation of a\nclass (and potentially other expensive operations) away from the\ninvocation of extension methods.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(Class<?> extensionType, Method method)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_method_cc": "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(Class<?> extensionType, Method method)",
            "previous_method_pd": "public java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_commit": "a4f874e0aa3681825e5ee2f0ebd8855be2d877d3",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -32.94512736499162,
                "p_value": 0.13026872210295382,
                "effect_size": 0.11603570329332102,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 114,
                    "after": 114
                }
            }
        }
    ],
    "ea2b134b0e51adff268c9c3bffe14509aefd9cb8": [
        {
            "commit_message": "error-prone: ClassNewInstance fixes\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private static org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizerFactory org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.instantiateFactory(java.lang.annotation.Annotation)",
            "method_name_cc": "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java",
            "previous_method_cc": "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)",
            "previous_method_pd": "private static org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizerFactory org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.instantiateFactory(java.lang.annotation.Annotation)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java",
            "previous_commit": "4385e2b21e790541f9d36cae07162385620fa217",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -12.258881936184517,
                "p_value": 0.050986018740757054,
                "effect_size": 0.16359649122807018,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 96,
                    "after": 95
                }
            }
        }
    ],
    "3bc60f46fe9f8907681b56e736678da25f5b6b52": [
        {
            "commit_message": "Make object creation more efficient\n\nCentralize c'tor lookup algorithms and object instantiation, choose\nc'tor explicitly, not by try-and-exception.\n\nRemoves a large amount of reflection-related code from all over core\nand sqlobject.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private java.util.function.Function org.jdbi.v3.core.config.ConfigRegistry.configFactory(java.lang.Class)",
            "method_name_cc": "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)",
            "file": "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java",
            "previous_method_cc": "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)",
            "previous_method_pd": "private java.util.function.Function org.jdbi.v3.core.config.ConfigRegistry.configFactory(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java",
            "previous_commit": "3a8b8cc0bf7cb5821a8dae9c7d2975808f6931bb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1.2302284710017575,
                "p_value": 0.0,
                "effect_size": -0.14832469693407718,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6062110,
                    "after": 6014236
                }
            }
        },
        {
            "commit_message": "Make object creation more efficient\n\nCentralize c'tor lookup algorithms and object instantiation, choose\nc'tor explicitly, not by try-and-exception.\n\nRemoves a large amount of reflection-related code from all over core\nand sqlobject.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private static org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizerFactory org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.instantiateFactory(java.lang.annotation.Annotation)",
            "method_name_cc": "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java",
            "previous_method_cc": "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)",
            "previous_method_pd": "private static org.jdbi.v3.sqlobject.customizer.SqlStatementCustomizerFactory org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.instantiateFactory(java.lang.annotation.Annotation)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java",
            "previous_commit": "3a8b8cc0bf7cb5821a8dae9c7d2975808f6931bb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 14.173614516920058,
                "p_value": 0.26627135463077956,
                "effect_size": -0.10069909266696415,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 81,
                    "after": 83
                }
            }
        },
        {
            "commit_message": "Make object creation more efficient\n\nCentralize c'tor lookup algorithms and object instantiation, choose\nc'tor explicitly, not by try-and-exception.\n\nRemoves a large amount of reflection-related code from all over core\nand sqlobject.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.createExtensionHandler(java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "public Optional<ExtensionHandler> org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.createExtensionHandler(Class<?> extensionType, Method method)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java",
            "previous_method_cc": "public Optional<ExtensionHandler> org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.createExtensionHandler(Class<?> extensionType, Method method)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.createExtensionHandler(java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java",
            "previous_commit": "3a8b8cc0bf7cb5821a8dae9c7d2975808f6931bb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.92818309365135,
                "p_value": 0.5854108837940221,
                "effect_size": -0.05547785547785548,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 65,
                    "after": 66
                }
            }
        },
        {
            "commit_message": "Make object creation more efficient\n\nCentralize c'tor lookup algorithms and object instantiation, choose\nc'tor explicitly, not by try-and-exception.\n\nRemoves a large amount of reflection-related code from all over core\nand sqlobject.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public org.jdbi.v3.core.extension.ExtensionHandler org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerCustomizer.customize(org.jdbi.v3.core.extension.ExtensionHandler,java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "public ExtensionHandler org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerCustomizer.customize(ExtensionHandler delegate, Class<?> extensionType, Method method)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerCustomizer.java",
            "previous_method_cc": "public ExtensionHandler org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerCustomizer.customize(ExtensionHandler delegate, Class<?> extensionType, Method method)",
            "previous_method_pd": "public org.jdbi.v3.core.extension.ExtensionHandler org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerCustomizer.customize(org.jdbi.v3.core.extension.ExtensionHandler,java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerCustomizer.java",
            "previous_commit": "3a8b8cc0bf7cb5821a8dae9c7d2975808f6931bb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.540403583386119,
                "p_value": 0.7608063267176501,
                "effect_size": -0.0325,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 60,
                    "after": 60
                }
            }
        },
        {
            "commit_message": "Make object creation more efficient\n\nCentralize c'tor lookup algorithms and object instantiation, choose\nc'tor explicitly, not by try-and-exception.\n\nRemoves a large amount of reflection-related code from all over core\nand sqlobject.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private static java.util.Collection org.jdbi.v3.sqlobject.SqlObjectCustomizerFactory.buildConfigCustomizer(java.util.stream.Stream,org.jdbi.v3.sqlobject.SqlObjectCustomizerFactory$ConfigurerMethod)",
            "method_name_cc": "private static Collection<ConfigCustomizer> org.jdbi.v3.sqlobject.SqlObjectCustomizerFactory.buildConfigCustomizer(Stream<AnnotatedElement> elements, ConfigurerMethod consumer)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectCustomizerFactory.java",
            "previous_method_cc": "private static Collection<ConfigCustomizer> org.jdbi.v3.sqlobject.SqlObjectCustomizerFactory.buildConfigCustomizer(Stream<AnnotatedElement> elements, ConfigurerMethod consumer)",
            "previous_method_pd": "private static java.util.Collection org.jdbi.v3.sqlobject.SqlObjectCustomizerFactory.buildConfigCustomizer(java.util.stream.Stream,org.jdbi.v3.sqlobject.SqlObjectCustomizerFactory$ConfigurerMethod)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectCustomizerFactory.java",
            "previous_commit": "3a8b8cc0bf7cb5821a8dae9c7d2975808f6931bb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.2526008081850226,
                "p_value": 0.7356186316691715,
                "effect_size": -0.026739356178608516,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 107,
                    "after": 108
                }
            }
        },
        {
            "commit_message": "Make object creation more efficient\n\nCentralize c'tor lookup algorithms and object instantiation, choose\nc'tor explicitly, not by try-and-exception.\n\nRemoves a large amount of reflection-related code from all over core\nand sqlobject.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private static java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(java.lang.Class,java.lang.reflect.Method,java.util.stream.Stream,org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory$ConfigurerMethod)",
            "method_name_cc": "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Method method, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_method_cc": "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Method method, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)",
            "previous_method_pd": "private static java.util.Collection org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(java.lang.Class,java.lang.reflect.Method,java.util.stream.Stream,org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory$ConfigurerMethod)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java",
            "previous_commit": "3a8b8cc0bf7cb5821a8dae9c7d2975808f6931bb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 11.552828175026681,
                "p_value": 0.27246358075150634,
                "effect_size": -0.08650548696844994,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 108,
                    "after": 108
                }
            }
        }
    ],
    "636df165577a7d79d5345ff41f71d9d748289804": [
        {
            "commit_message": "support collection<class<>>\n\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "public org.jdbi.v3.core.enums.EnumStrategy org.jdbi.v3.core.internal.EnumStrategies.findStrategy(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "public <E extends Enum<E>> EnumStrategy org.jdbi.v3.core.internal.EnumStrategies.findStrategy(QualifiedType<E> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/internal/EnumStrategies.java",
            "previous_method_cc": "public <E extends Enum<E>> EnumStrategy org.jdbi.v3.core.internal.EnumStrategies.findStrategy(QualifiedType<E> type)",
            "previous_method_pd": "public org.jdbi.v3.core.enums.EnumStrategy org.jdbi.v3.core.internal.EnumStrategies.findStrategy(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/internal/EnumStrategies.java",
            "previous_commit": "97ea85393712bd44d1b3116dec37352b08098d6a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 19.11667765326302,
                "p_value": 0.0,
                "effect_size": -0.7635906436007251,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 425605,
                    "after": 508436
                }
            }
        }
    ],
    "c3c40e8759e9cfee20fe1bb55a4f95e0411eb0f8": [
        {
            "commit_message": "More doc changes\n\n- add a transaction chapter for handle operations\n- reshuffle sections a bit\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public boolean org.jdbi.v3.core.Handle.isInTransaction()",
            "method_name_cc": "public boolean org.jdbi.v3.core.Handle.isInTransaction()",
            "file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_method_cc": "public boolean org.jdbi.v3.core.Handle.isInTransaction()",
            "previous_method_pd": "public boolean org.jdbi.v3.core.Handle.isInTransaction()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_commit": "da9ea8f3f682f46ed60c6a8bfbbc392ec9115371",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 12.436738699559335,
                "p_value": 0.3036210266668159,
                "effect_size": -0.035434564108399236,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 567,
                    "after": 558
                }
            }
        },
        {
            "commit_message": "More doc changes\n\n- add a transaction chapter for handle operations\n- reshuffle sections a bit\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public org.jdbi.v3.core.Handle org.jdbi.v3.core.Handle.begin()",
            "method_name_cc": "public Handle org.jdbi.v3.core.Handle.begin()",
            "file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_method_cc": "public Handle org.jdbi.v3.core.Handle.begin()",
            "previous_method_pd": "public org.jdbi.v3.core.Handle org.jdbi.v3.core.Handle.begin()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_commit": "da9ea8f3f682f46ed60c6a8bfbbc392ec9115371",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.680101733744927,
                "p_value": 0.07626460135936435,
                "effect_size": -0.09059541984732825,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 262,
                    "after": 250
                }
            }
        },
        {
            "commit_message": "More doc changes\n\n- add a transaction chapter for handle operations\n- reshuffle sections a bit\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public org.jdbi.v3.core.Handle org.jdbi.v3.core.Handle.commit()",
            "method_name_cc": "public Handle org.jdbi.v3.core.Handle.commit()",
            "file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_method_cc": "public Handle org.jdbi.v3.core.Handle.commit()",
            "previous_method_pd": "public org.jdbi.v3.core.Handle org.jdbi.v3.core.Handle.commit()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_commit": "da9ea8f3f682f46ed60c6a8bfbbc392ec9115371",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.8315222408557458,
                "p_value": 0.020955059999679032,
                "effect_size": 0.12800778111388336,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 221,
                    "after": 214
                }
            }
        }
    ],
    "102876d0470d99bb45765a798bb9eaf4bc05674d": [
        {
            "commit_message": "Refactor the SqlObjectFactory\n\n- factor all the Generator specific code into\n  GeneratorSqlObjectFactory, a new ExtensionFactory that deals\n  specifically with the generated classes.\n- strip all code that is not specific to the SqlObject Proxy\n  extensions out of SqlObjectFactory\n- register both factories in SqlObjectModule, so no user visible changes\n- remove the specific code for generated classes (initData and lookupMethod)\n  out of the SqlObjectInitData, this is now in the generator factory. Leave deprecated\n  stubs in place for old, non-compiled classes. Those stubs will go away\n- move the threadlocal that holds the init data into the generator factory\n- move all init code for SqlObjectInitData into the class itself\n- move duplicate superTypes code also into JdbiClassUtils\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(org.jdbi.v3.core.Jdbi)",
            "method_name_cc": "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java",
            "previous_method_cc": "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)",
            "previous_method_pd": "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(org.jdbi.v3.core.Jdbi)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java",
            "previous_commit": "944192da9b5c605d83648e1a5a1b8fc461d28f0a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.719833881220825,
                "p_value": 0.623604884395689,
                "effect_size": -0.125,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        },
        {
            "commit_message": "Refactor the SqlObjectFactory\n\n- factor all the Generator specific code into\n  GeneratorSqlObjectFactory, a new ExtensionFactory that deals\n  specifically with the generated classes.\n- strip all code that is not specific to the SqlObject Proxy\n  extensions out of SqlObjectFactory\n- register both factories in SqlObjectModule, so no user visible changes\n- remove the specific code for generated classes (initData and lookupMethod)\n  out of the SqlObjectInitData, this is now in the generator factory. Leave deprecated\n  stubs in place for old, non-compiled classes. Those stubs will go away\n- move the threadlocal that holds the init data into the generator factory\n- move all init code for SqlObjectInitData into the class itself\n- move duplicate superTypes code also into JdbiClassUtils\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(java.lang.Class)",
            "method_name_cc": "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(Class<?> extensionType)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java",
            "previous_method_cc": "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(Class<?> extensionType)",
            "previous_method_pd": "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(java.lang.Class)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java",
            "previous_commit": "944192da9b5c605d83648e1a5a1b8fc461d28f0a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.670214630036275,
                "p_value": 0.9787085638915956,
                "effect_size": -0.005698005698005698,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 26,
                    "after": 27
                }
            }
        }
    ],
    "cd2e442d0b62e32be40ae814457b82cd81407edc": [
        {
            "commit_message": "error-prone: InlineFormatString fixes\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_commit": "3b0b5c60f6a5838d13a73a76b9196cbbef63bd2e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.8043947420051011,
                "p_value": 0.0,
                "effect_size": -0.08740634609397291,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1812783,
                    "after": 1781897
                }
            }
        },
        {
            "commit_message": "error-prone: InlineFormatString fixes\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public org.jdbi.v3.core.mapper.RowMapper org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext) throws java.sql.SQLException",
            "method_name_cc": "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_method_cc": "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
            "previous_method_pd": "public org.jdbi.v3.core.mapper.RowMapper org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext) throws java.sql.SQLException",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_commit": "3b0b5c60f6a5838d13a73a76b9196cbbef63bd2e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.6445753559155623,
                "p_value": 0.0,
                "effect_size": -0.14658975169961883,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1818533,
                    "after": 1872218
                }
            }
        }
    ],
    "332c97f566d31a8a511562d1124628fe87b2cc3e": [
        {
            "commit_message": "Mapper reworking\n\n- add tons of tests for PropagateNull so that it works in any given condition\n- align the logic in FieldMapper, Bean(Pojo)Mapper, ConstructorMapper and KotlinMapper\n- make PropagateNull logic much more readable, factor out helper functions and a null delegating mapper\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "public org.jdbi.v3.core.mapper.RowMapper org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext) throws java.sql.SQLException",
            "method_name_cc": "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_method_cc": "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
            "previous_method_pd": "public org.jdbi.v3.core.mapper.RowMapper org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext) throws java.sql.SQLException",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_commit": "c29349291c97dd2746dbebf88a8e820b85273e36",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.6322825399692892,
                "p_value": 0.0,
                "effect_size": -0.1188010711800694,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1969144,
                    "after": 1905765
                }
            }
        }
    ],
    "8bfe50b0bbea1b92dfa7c453a1b9c8cffe4ab7c5": [
        {
            "commit_message": "SqlObject: warm up argument bindings and return / collected types on first method call\n\nThis avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every new dao instance\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "public org.jdbi.v3.core.collector.JdbiCollectors org.jdbi.v3.core.collector.JdbiCollectors.register(org.jdbi.v3.core.collector.CollectorFactory)",
            "method_name_cc": "public JdbiCollectors org.jdbi.v3.core.collector.JdbiCollectors.register(CollectorFactory factory)",
            "file": "core/src/main/java/org/jdbi/v3/core/collector/JdbiCollectors.java",
            "previous_method_cc": "public JdbiCollectors org.jdbi.v3.core.collector.JdbiCollectors.register(CollectorFactory factory)",
            "previous_method_pd": "public org.jdbi.v3.core.collector.JdbiCollectors org.jdbi.v3.core.collector.JdbiCollectors.register(org.jdbi.v3.core.collector.CollectorFactory)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/collector/JdbiCollectors.java",
            "previous_commit": "5d6107f6451b73d0fa513aaaf01caf192f204038",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 13.580963435867673,
                "p_value": 0.21843326845237132,
                "effect_size": -0.11044176706827309,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 84,
                    "after": 83
                }
            }
        },
        {
            "commit_message": "SqlObject: warm up argument bindings and return / collected types on first method call\n\nThis avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every new dao instance\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "public org.jdbi.v3.sqlobject.customizer.SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(java.lang.annotation.Annotation,java.lang.Class,java.lang.reflect.Method,java.lang.reflect.Parameter,int,java.lang.reflect.Type)",
            "method_name_cc": "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindBeanFactory.java",
            "previous_method_cc": "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)",
            "previous_method_pd": "public org.jdbi.v3.sqlobject.customizer.SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(java.lang.annotation.Annotation,java.lang.Class,java.lang.reflect.Method,java.lang.reflect.Parameter,int,java.lang.reflect.Type)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindBeanFactory.java",
            "previous_commit": "5d6107f6451b73d0fa513aaaf01caf192f204038",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 16.957178841309823,
                "p_value": 0.4499549276146769,
                "effect_size": -0.13043478260869565,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 23,
                    "after": 24
                }
            }
        },
        {
            "commit_message": "SqlObject: warm up argument bindings and return / collected types on first method call\n\nThis avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every new dao instance\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "public org.jdbi.v3.sqlobject.customizer.SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindFactory.createForParameter(java.lang.annotation.Annotation,java.lang.Class,java.lang.reflect.Method,java.lang.reflect.Parameter,int,java.lang.reflect.Type)",
            "method_name_cc": "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindBeanFactory.java",
            "previous_method_cc": "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)",
            "previous_method_pd": "public org.jdbi.v3.sqlobject.customizer.SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(java.lang.annotation.Annotation,java.lang.Class,java.lang.reflect.Method,java.lang.reflect.Parameter,int,java.lang.reflect.Type)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindBeanFactory.java",
            "previous_commit": "5d6107f6451b73d0fa513aaaf01caf192f204038",
            "performance_diff": 0.8781097081880046,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -16.92863140218304,
                "p_value": 0.006495326701586082,
                "effect_size": 0.3884057971014493,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 23,
                    "after": 60
                }
            }
        },
        {
            "commit_message": "SqlObject: warm up argument bindings and return / collected types on first method call\n\nThis avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every new dao instance\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "public java.util.function.Supplier org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(java.lang.Object,java.lang.reflect.Method,org.jdbi.v3.core.extension.HandleSupplier,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java",
            "previous_method_cc": "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)",
            "previous_method_pd": "public java.util.function.Supplier org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(java.lang.Object,java.lang.reflect.Method,org.jdbi.v3.core.extension.HandleSupplier,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java",
            "previous_commit": "5d6107f6451b73d0fa513aaaf01caf192f204038",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 5.893574297188755,
                "p_value": 0.09962413303250219,
                "effect_size": -0.08851540616246499,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 225,
                    "after": 238
                }
            }
        },
        {
            "commit_message": "SqlObject: warm up argument bindings and return / collected types on first method call\n\nThis avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every new dao instance\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.collector.JdbiCollectors.findFactoryFor(java.lang.reflect.Type)",
            "method_name_cc": "private Optional<CollectorFactory> org.jdbi.v3.core.collector.JdbiCollectors.findFactoryFor(Type containerType)",
            "file": "core/src/main/java/org/jdbi/v3/core/collector/JdbiCollectors.java",
            "previous_method_cc": "private Optional<CollectorFactory> org.jdbi.v3.core.collector.JdbiCollectors.findFactoryFor(Type containerType)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.collector.JdbiCollectors.findFactoryFor(java.lang.reflect.Type)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/collector/JdbiCollectors.java",
            "previous_commit": "5d6107f6451b73d0fa513aaaf01caf192f204038",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -16.131469588213072,
                "p_value": 0.0,
                "effect_size": 0.8880980866494387,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 9887979,
                    "after": 10614800
                }
            }
        },
        {
            "commit_message": "SqlObject: warm up argument bindings and return / collected types on first method call\n\nThis avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every new dao instance\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(org.jdbi.v3.core.statement.Query,org.jdbi.v3.sqlobject.statement.internal.SqlObjectStatementConfiguration)",
            "method_name_cc": "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(Query q, SqlObjectStatementConfiguration cfg)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java",
            "previous_method_cc": "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(Query q, SqlObjectStatementConfiguration cfg)",
            "previous_method_pd": "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(org.jdbi.v3.core.statement.Query,org.jdbi.v3.sqlobject.statement.internal.SqlObjectStatementConfiguration)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java",
            "previous_commit": "5d6107f6451b73d0fa513aaaf01caf192f204038",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.35097981866042705,
                "p_value": 0.0,
                "effect_size": 0.03984835036876413,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4510683,
                    "after": 4658815
                }
            }
        }
    ],
    "fd7458fffbf80d054c8654c971019330c9958cbf": [
        {
            "commit_message": "Java language migration updates (use Java functional primitives, statement lambdas, method references, avoid unneccessary boxing, use Objects.equals, diamond operator without explicit type where permitted, fix raw usage of parametrized classes)\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(org.jdbi.v3.core.qualifier.QualifiedType,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public Optional<ColumnMapper<?>> org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(QualifiedType<?> givenType, ConfigRegistry config)",
            "file": "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumMapperFactory.java",
            "previous_method_cc": "public Optional<ColumnMapper<?>> org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(QualifiedType<?> givenType, ConfigRegistry config)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(org.jdbi.v3.core.qualifier.QualifiedType,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumMapperFactory.java",
            "previous_commit": "26a03d3479daead969d1010d893b91fb13af0af2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1.6350745188829403,
                "p_value": 0.0,
                "effect_size": -0.2085537613846229,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1905263,
                    "after": 1972365
                }
            }
        }
    ],
    "aca3c61ae6408843cbeb810f5a176c0f7802f094": [
        {
            "commit_message": "CharSequence support for Sql statements (#2047)\n- Allow CharSequence rather than String to pass sql statements to the library.\n- Add class org.jdbi.v3.core.Sql to write easy-to-read inline sql statements.\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public org.jdbi.v3.core.statement.PreparedBatch org.jdbi.v3.core.Handle.prepareBatch(java.lang.String)",
            "method_name_cc": "public PreparedBatch org.jdbi.v3.core.Handle.prepareBatch(String sql)",
            "file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_method_cc": "public PreparedBatch org.jdbi.v3.core.Handle.prepareBatch(String sql)",
            "previous_method_pd": "public org.jdbi.v3.core.statement.PreparedBatch org.jdbi.v3.core.Handle.prepareBatch(java.lang.String)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_commit": "3bb9314c5a361282798c5ff93620b98ef19ddcc6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 27.879206603729806,
                "p_value": 4.6382041892279345e-65,
                "effect_size": -0.8417829830472218,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 276,
                    "after": 271
                }
            }
        },
        {
            "commit_message": "CharSequence support for Sql statements (#2047)\n- Allow CharSequence rather than String to pass sql statements to the library.\n- Add class org.jdbi.v3.core.Sql to write easy-to-read inline sql statements.\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public org.jdbi.v3.core.statement.Call org.jdbi.v3.core.Handle.createCall(java.lang.String)",
            "method_name_cc": "public Call org.jdbi.v3.core.Handle.createCall(String sql)",
            "file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_method_cc": "public Call org.jdbi.v3.core.Handle.createCall(String sql)",
            "previous_method_pd": "public org.jdbi.v3.core.statement.Call org.jdbi.v3.core.Handle.createCall(java.lang.String)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_commit": "3bb9314c5a361282798c5ff93620b98ef19ddcc6",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 22.627517266170543,
                "p_value": 0.0005920421458944265,
                "effect_size": -0.8333333333333334,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        }
    ],
    "7e48900b945d09d540239a57fe0cd6bb9e0e5809": [
        {
            "commit_message": "Prepare for possible removal of the Closeable interface\n\nClean up the close logic, apply some of the incontroversial changes\nto base statement. Defer the actual decision on whether to remove\nthe interface for later.\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()",
            "method_name_cc": "public int[] org.jdbi.v3.core.statement.Batch.execute()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/Batch.java",
            "previous_method_cc": "public int[] org.jdbi.v3.core.statement.Batch.execute()",
            "previous_method_pd": "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/Batch.java",
            "previous_commit": "41e36ac574c79074eaea77f6df2dd3ab31299417",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -1.1043378378341744,
                "p_value": 4.100248686219419e-05,
                "effect_size": 0.22711108305452096,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 217,
                    "after": 219
                }
            }
        }
    ],
    "54aa57a1a019a8ec6eaef68f97511865e18202a2": [
        {
            "commit_message": "more readability changes\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.warm(org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.warm(ConfigRegistry config)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java",
            "previous_method_cc": "public void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.warm(ConfigRegistry config)",
            "previous_method_pd": "public void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.warm(org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java",
            "previous_commit": "78ec6aaebeeb55cbd5137e01d299237bd66ef539",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 16.307376588670714,
                "p_value": 0.5443701458566098,
                "effect_size": -0.1527777777777778,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        },
        {
            "commit_message": "more readability changes\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.configureReturner(org.jdbi.v3.core.statement.Update,org.jdbi.v3.sqlobject.statement.internal.SqlObjectStatementConfiguration)",
            "method_name_cc": "void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.configureReturner(Update u, SqlObjectStatementConfiguration cfg)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlUpdateHandler.java",
            "previous_method_cc": "void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.configureReturner(Update u, SqlObjectStatementConfiguration cfg)",
            "previous_method_pd": "void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.configureReturner(org.jdbi.v3.core.statement.Update,org.jdbi.v3.sqlobject.statement.internal.SqlObjectStatementConfiguration)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlUpdateHandler.java",
            "previous_commit": "78ec6aaebeeb55cbd5137e01d299237bd66ef539",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 6.655759462764559,
                "p_value": 0.1939308522824107,
                "effect_size": -0.3194444444444444,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        }
    ],
    "7e8090d9a5d50bd14acf776f4b3382842668f7a5": [
        {
            "commit_message": "Support resultset and outparameters\n\nLifts the restriction of using either a ResultSet or out parameter\nvalues from the OutParameters object. The ResultSet must be consumed\nfirst, though (as dictated by JDBC 3.0).\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public org.jdbi.v3.core.result.ResultIterator org.jdbi.v3.core.result.internal.ResultSetResultIterable.iterator()",
            "method_name_cc": "public ResultIterator<T> org.jdbi.v3.core.result.internal.ResultSetResultIterable<T>.iterator()",
            "file": "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterable.java",
            "previous_method_cc": "public ResultIterator<T> org.jdbi.v3.core.result.internal.ResultSetResultIterable<T>.iterator()",
            "previous_method_pd": "public org.jdbi.v3.core.result.ResultIterator org.jdbi.v3.core.result.internal.ResultSetResultIterable.iterator()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterable.java",
            "previous_commit": "627ab52d471ba92d69c7b278491ac571678236a1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.7872574148663494,
                "p_value": 0.0,
                "effect_size": 0.09192936584713389,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1084523,
                    "after": 1100920
                }
            }
        },
        {
            "commit_message": "Support resultset and outparameters\n\nLifts the restriction of using either a ResultSet or out parameter\nvalues from the OutParameters object. The ResultSet must be consumed\nfirst, though (as dictated by JDBC 3.0).\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public void org.jdbi.v3.core.result.internal.ResultSetResultIterator.close()",
            "method_name_cc": "public void org.jdbi.v3.core.result.internal.ResultSetResultIterator<T>.close()",
            "file": "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterator.java",
            "previous_method_cc": "public void org.jdbi.v3.core.result.internal.ResultSetResultIterator<T>.close()",
            "previous_method_pd": "public void org.jdbi.v3.core.result.internal.ResultSetResultIterator.close()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterator.java",
            "previous_commit": "627ab52d471ba92d69c7b278491ac571678236a1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.22346368715083798,
                "p_value": 0.0,
                "effect_size": 0.13066049520812328,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2671632,
                    "after": 2739995
                }
            }
        }
    ],
    "c1c9a29c822350e6fbe113e36e9dfac383637141": [
        {
            "commit_message": "antlr4!\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.lang.String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(java.lang.String,org.jdbi.v3.core.statement.StatementContext)",
            "method_name_cc": "public String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(String template, StatementContext ctx)",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/DefinedAttributeTemplateEngine.java",
            "previous_method_cc": "public String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(String template, StatementContext ctx)",
            "previous_method_pd": "public java.lang.String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(java.lang.String,org.jdbi.v3.core.statement.StatementContext)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/DefinedAttributeTemplateEngine.java",
            "previous_commit": "6f160871a9944c946fe77495f4b4796a83c8b072",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 11.524930243843261,
                "p_value": 0.0,
                "effect_size": -0.9001672451896034,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1319741,
                    "after": 428076
                }
            }
        },
        {
            "commit_message": "antlr4!\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "private org.jdbi.v3.core.statement.ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.internalParse(java.lang.String) throws java.lang.IllegalArgumentException",
            "method_name_cc": "private ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.internalParse(String sql)",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/ColonPrefixSqlParser.java",
            "previous_method_cc": "private ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.internalParse(String sql)",
            "previous_method_pd": "private org.jdbi.v3.core.statement.ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.internalParse(java.lang.String) throws java.lang.IllegalArgumentException",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/ColonPrefixSqlParser.java",
            "previous_commit": "6f160871a9944c946fe77495f4b4796a83c8b072",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1884.3072289156628,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1400191,
                    "after": 435145
                }
            }
        }
    ],
    "a1f5596dfa40202cbe01f93d4e3f43d88551e90a": [
        {
            "commit_message": "Replace Unmappable with JdbiProperty for skipping binding / mapping\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.createSpecializedRowMapper(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.createSpecializedRowMapper(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java",
            "previous_commit": "c048190ef53df9e46469d1c8b51cc8ea534eca2b",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.4490057729313663,
                "p_value": 0.0,
                "effect_size": 0.09972370349010345,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1930808,
                    "after": 1975501
                }
            }
        },
        {
            "commit_message": "Replace Unmappable with JdbiProperty for skipping binding / mapping\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "protected java.util.Optional org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getValue(java.lang.String,org.jdbi.v3.core.statement.StatementContext)",
            "method_name_cc": "protected Optional<TypedValue> org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getValue(String name, StatementContext ctx)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/internal/PojoPropertyArguments.java",
            "previous_method_cc": "protected Optional<TypedValue> org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getValue(String name, StatementContext ctx)",
            "previous_method_pd": "protected java.util.Optional org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getValue(java.lang.String,org.jdbi.v3.core.statement.StatementContext)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/internal/PojoPropertyArguments.java",
            "previous_commit": "c048190ef53df9e46469d1c8b51cc8ea534eca2b",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.320956576463185,
                "p_value": 0.0,
                "effect_size": 0.02238382750134428,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 11254314,
                    "after": 11017423
                }
            }
        }
    ],
    "a4c8a06909e6c884010eaecbe69cf071142c6ec0": [
        {
            "commit_message": "Enum types: don't use isEnum, check assignability instead\n\nit doesn't behave like you expect\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "static java.util.Optional org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(java.lang.reflect.Type)",
            "method_name_cc": "static <E extends Enum<E>> Optional<Class<E>> org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(Type type)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java",
            "previous_method_cc": "static <E extends Enum<E>> Optional<Class<E>> org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(Type type)",
            "previous_method_pd": "static java.util.Optional org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(java.lang.reflect.Type)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java",
            "previous_commit": "4eeb8346d00d2e87456444ad84e6c1c535a12baf",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.6384790374302236,
                "p_value": 0.010568177760186554,
                "effect_size": 0.1045895768542079,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 393,
                    "after": 405
                }
            }
        },
        {
            "commit_message": "Enum types: don't use isEnum, check assignability instead\n\nit doesn't behave like you expect\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(org.jdbi.v3.core.qualifier.QualifiedType,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public Optional<ColumnMapper<?>> org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(QualifiedType<?> givenType, ConfigRegistry config)",
            "file": "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumMapperFactory.java",
            "previous_method_cc": "public Optional<ColumnMapper<?>> org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(QualifiedType<?> givenType, ConfigRegistry config)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(org.jdbi.v3.core.qualifier.QualifiedType,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumMapperFactory.java",
            "previous_commit": "4eeb8346d00d2e87456444ad84e6c1c535a12baf",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.1312545322697607,
                "p_value": 0.0,
                "effect_size": 0.11071229038175974,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 277168,
                    "after": 266185
                }
            }
        }
    ],
    "3fc3b74c1199ed4b8fbc59dd52eb61a4d7cc4c8c": [
        {
            "commit_message": "QualifiedType: use new Java 10+ collection collectors if available, they're much faster\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByOrdinal",
            "method_name_pd": "public org.jdbi.v3.core.qualifier.QualifiedType org.jdbi.v3.core.qualifier.QualifiedType.withAnnotations(java.lang.Iterable)",
            "method_name_cc": "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.withAnnotations(Iterable<? extends Annotation> newQualifiers)",
            "file": "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java",
            "previous_method_cc": "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.withAnnotations(Iterable<? extends Annotation> newQualifiers)",
            "previous_method_pd": "public org.jdbi.v3.core.qualifier.QualifiedType org.jdbi.v3.core.qualifier.QualifiedType.withAnnotations(java.lang.Iterable)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java",
            "previous_commit": "a16675cba7415c61dd15004183d1ad4551c3c145",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -3.962416784794532,
                "p_value": 0.006569602687262049,
                "effect_size": -0.19321029847345636,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 132,
                    "after": 133
                }
            }
        }
    ],
    "c46b9bbd82fab5f7caa0c5cec5a8457a889a1222": [
        {
            "commit_message": "Remove Guava reflection code, use GeAnTyRef instead!\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public static java.lang.Class org.jdbi.v3.core.generic.GenericTypes.getErasedType(java.lang.reflect.Type)",
            "method_name_cc": "public static Class<?> org.jdbi.v3.core.generic.GenericTypes.getErasedType(Type type)",
            "file": "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java",
            "previous_method_cc": "public static Class<?> org.jdbi.v3.core.generic.GenericTypes.getErasedType(Type type)",
            "previous_method_pd": "public static java.lang.Class org.jdbi.v3.core.generic.GenericTypes.getErasedType(java.lang.reflect.Type)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java",
            "previous_commit": "b3bb5037c4b8e29711456a6b84c3530a9a970cb8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -11.439842209072978,
                "p_value": 0.0,
                "effect_size": 0.401148585026082,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2798068,
                    "after": 2773487
                }
            }
        },
        {
            "commit_message": "Remove Guava reflection code, use GeAnTyRef instead!\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public static java.util.Optional org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(java.lang.reflect.Type,java.lang.Class,int)",
            "method_name_cc": "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)",
            "file": "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java",
            "previous_method_cc": "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)",
            "previous_method_pd": "public static java.util.Optional org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(java.lang.reflect.Type,java.lang.Class,int)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java",
            "previous_commit": "b3bb5037c4b8e29711456a6b84c3530a9a970cb8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -23.66898148148148,
                "p_value": 0.0,
                "effect_size": 0.4887260437991981,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 768937,
                    "after": 728437
                }
            }
        }
    ],
    "35b33600afe69dade1c67096bf0bccee58eeb27a": [
        {
            "commit_message": "more renames\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private boolean org.jdbi.v3.core.result.ResultSetResultIterator.safeNext()",
            "method_name_cc": "private boolean org.jdbi.v3.core.result.ResultSetResultIterator<T>.safeNext()",
            "file": "core/src/main/java/org/jdbi/v3/core/result/ResultSetResultIterator.java",
            "previous_method_cc": "private boolean org.jdbi.v3.core.result.ResultSetResultIterator<T>.safeNext()",
            "previous_method_pd": "private boolean org.jdbi.v3.core.result.ResultSetResultIterator.safeNext()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/result/ResultSetResultIterator.java",
            "previous_commit": "6aa339523e6ce5e75173f42eebd0ad632ea85d67",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.0759162303664924,
                "p_value": 0.0,
                "effect_size": 0.09126466385774139,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7074062,
                    "after": 6353659
                }
            }
        }
    ],
    "18837218030f0549307e53fa73375fe5b0fd2ff2": [
        {
            "commit_message": "Add support for function arguments\n\nSimilar to `Consumer<...>` arguments, a function argument consumes the\nresults of a SQL query. The return value from applying the function is\nreturned by the SQL object method. This is especially useful for\ncollecting and managing streaming data as the function is called while\nthe database connection is live.\n\nAddresses #2326\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.SqlObjectOperationBenchmark.jdbiRegistered",
            "method_name_pd": "static org.jdbi.v3.sqlobject.statement.internal.ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java",
            "previous_method_cc": "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
            "previous_method_pd": "static org.jdbi.v3.sqlobject.statement.internal.ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java",
            "previous_commit": "f1eb375a715e918aee2db407523ee63443d02e94",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -6.255399426749244,
                "p_value": 0.23658409332187613,
                "effect_size": 0.2916666666666667,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        }
    ],
    "88eeb97188f6bde7ea5654051591f9f03c16eb73": [
        {
            "commit_message": "Rewrite of the core extension framework (#2285)\n\n* Rewrite of the core extension framework\r\n\r\nThe current extension framework is relatively simple. It supports\r\nattaching an extension interface which looks up a factory that then\r\nhas the responsibility of either looking up an implementation class or\r\ncreate a proxy to execute code for each method.\r\n\r\nDue to that simple structure, there are a number of inconsistencies,\r\nespecially around the extension context and wrapping each method from\r\nan interface.\r\n\r\nThe main reason for this is that most of the interesting functionality\r\nfor the extension code is not actually in the core/extension package\r\nbut in sqlobject. Extension is little more than just a scaffold that\r\nwas designed with sqlobject in mind.\r\n\r\nThere is nothing wrong with this. However, it is possible to move a\r\nlot of the \"interesting\" functionality from the sqlobject code into\r\nthe core package without losing backwards compatibility and then\r\nmaking it possible to implement additional functionality using\r\nextensions.\r\n\r\nSQL Objects uses three concepts:\r\n\r\n* Handlers. These are code pieces that are executed when an extension\r\n  method is called. This is the code for SQLUpdate, SQLQuery etc.\r\n* HandlerDecorators. These code pieces change the behavior of a\r\n  handler. Transactions are implemented as a decorator.\r\n* Configurers. These code pieces add or change the configuration for a\r\n  method before it is called. This configuration is then spliced into\r\n  the Handle through the ExtensionContext so that all code that runs\r\n  within the Handler method uses that modified\r\n  configuration. Configurers are used for the \"Use...\" annotations.\r\n\r\nNone of these concepts is SQLObject specific. This is generic code\r\nthat can be used for any extension. But by being split out of the core\r\nand part of the sqlobject module, it is not available to any other\r\nextension or has to be copied and pasted.\r\n\r\nWhile the change looks big, it is mostly moving existing code around\r\nand cleaning it up. It introduces three new concepts to the core:\r\n\r\n`ExtensionHandler` - This is equivalent to the SqlObject Handler\r\nclass.\r\n\r\n`ExtensionHandler.Factory` - SqlObject HandlerFactory, but with the\r\n`accepts / build` pattern.\r\n\r\n`@UseExtensionHandler` annotation - equivalent to `@SqlOperation`. It\r\nalso provides an `id` attribute to allow multiple extensions to\r\ndifferentiate between `@UseExtensionHandler` instances intended for\r\nthem or for another extension.\r\n\r\n`ExtensionHandlerCustomizer` - This is the equivalent of the SqlObject\r\n`HandleDecorator`\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject\r\n`@SqlMethodDecoratingAnnotation` annotation.\r\n\r\n`@ExtensionCustomizationOrder` - This is the equivalent of the\r\nSqlObject `@DecoratorOrder` annotation.\r\n\r\n`ExtensionConfigurer` - This is the equivalent of SqlObject\r\n`Configurer`. Literally.\r\n\r\n`ConfigCustomizer` - This is an explicit interface where the SqlObject\r\ncode uses `Consumer<ConfigRegistry>`. We are not consuming the\r\nregistry, but customizing it. Makes code more readable.\r\n\r\n`ConfigCustomizerFactory` - A factory class that creates a collection\r\nof `ConfigCustomizer` elements for an extension type or an extension\r\ntype method. That concept existed sprawled out in the\r\n`SqlObjectInitData` class but was not pluggable and hardcoded to the\r\n`Configurer` interface.\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject\r\n`@ConfiguringAnnotation`\r\n\r\n`ExtensionFactory` gets a lot of new things, all of them with defaults\r\nthat match the current code.\r\n* a set of flags to control extension factory behavior\r\n* bunch of getters for custom ExtensionHandlerFactories,\r\n  ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n\r\nThe `Extensions` configuration gets some new things:\r\n* methods to register ExtensionHandlerFactories,\r\n  ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n  globally\r\n* a method to retrieve metadata for a given extension type\r\n\r\n`ExtensionHandlerInvoker` takes the role of `InContextInvoker`. All\r\ninvokers are managed by the `ExtensionMetadata` class\r\n\r\n`ExtensionMetadata` takes the role of `SqlObjectInitData`. It contains\r\nall of the discovered functionality from an extension type. It builds\r\na map of `ExtensionHandler` objects that can be wrapped into an\r\n`ExtensionInvoker` with all customizers and configurers added. Those\r\n`ExtensionInvoker` classes are called through the Proxy when a method\r\nis invoked.\r\n\r\n`ExtensionFactoryDelegate` wraps the functionality of the old\r\nSqlObjectFactory code. It may simply delegate to the actual factory\r\ngenerated object or create the map of ExtensionHandlers with\r\ncorresponding ExtensionHandlerInvokers and wrap them into a proxy\r\nobject.\r\n\r\nSimilar to the SqlObject code, a number of \"glue\"\r\n`ExtensionHandlerFactory` instances are used to create method handlers\r\nthat are not managed by the extension specific code:\r\n\r\n* bridge methods\r\n* interface default methods\r\n* direct method invocations if the factory provides an actual object to attach to\r\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public org.jdbi.v3.core.extension.Extensions org.jdbi.v3.core.extension.Extensions.register(org.jdbi.v3.core.extension.ExtensionFactory)",
            "method_name_cc": "public Extensions org.jdbi.v3.core.extension.Extensions.register(ExtensionFactory factory)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java",
            "previous_method_cc": "public Extensions org.jdbi.v3.core.extension.Extensions.register(ExtensionFactory factory)",
            "previous_method_pd": "public org.jdbi.v3.core.extension.Extensions org.jdbi.v3.core.extension.Extensions.register(org.jdbi.v3.core.extension.ExtensionFactory)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java",
            "previous_commit": "365986b0670080b9025001ca472a9b0064b41b53",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.8261211262257664,
                "p_value": 0.8220573065882983,
                "effect_size": -0.037037037037037035,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 27,
                    "after": 27
                }
            }
        },
        {
            "commit_message": "Rewrite of the core extension framework (#2285)\n\n* Rewrite of the core extension framework\r\n\r\nThe current extension framework is relatively simple. It supports\r\nattaching an extension interface which looks up a factory that then\r\nhas the responsibility of either looking up an implementation class or\r\ncreate a proxy to execute code for each method.\r\n\r\nDue to that simple structure, there are a number of inconsistencies,\r\nespecially around the extension context and wrapping each method from\r\nan interface.\r\n\r\nThe main reason for this is that most of the interesting functionality\r\nfor the extension code is not actually in the core/extension package\r\nbut in sqlobject. Extension is little more than just a scaffold that\r\nwas designed with sqlobject in mind.\r\n\r\nThere is nothing wrong with this. However, it is possible to move a\r\nlot of the \"interesting\" functionality from the sqlobject code into\r\nthe core package without losing backwards compatibility and then\r\nmaking it possible to implement additional functionality using\r\nextensions.\r\n\r\nSQL Objects uses three concepts:\r\n\r\n* Handlers. These are code pieces that are executed when an extension\r\n  method is called. This is the code for SQLUpdate, SQLQuery etc.\r\n* HandlerDecorators. These code pieces change the behavior of a\r\n  handler. Transactions are implemented as a decorator.\r\n* Configurers. These code pieces add or change the configuration for a\r\n  method before it is called. This configuration is then spliced into\r\n  the Handle through the ExtensionContext so that all code that runs\r\n  within the Handler method uses that modified\r\n  configuration. Configurers are used for the \"Use...\" annotations.\r\n\r\nNone of these concepts is SQLObject specific. This is generic code\r\nthat can be used for any extension. But by being split out of the core\r\nand part of the sqlobject module, it is not available to any other\r\nextension or has to be copied and pasted.\r\n\r\nWhile the change looks big, it is mostly moving existing code around\r\nand cleaning it up. It introduces three new concepts to the core:\r\n\r\n`ExtensionHandler` - This is equivalent to the SqlObject Handler\r\nclass.\r\n\r\n`ExtensionHandler.Factory` - SqlObject HandlerFactory, but with the\r\n`accepts / build` pattern.\r\n\r\n`@UseExtensionHandler` annotation - equivalent to `@SqlOperation`. It\r\nalso provides an `id` attribute to allow multiple extensions to\r\ndifferentiate between `@UseExtensionHandler` instances intended for\r\nthem or for another extension.\r\n\r\n`ExtensionHandlerCustomizer` - This is the equivalent of the SqlObject\r\n`HandleDecorator`\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject\r\n`@SqlMethodDecoratingAnnotation` annotation.\r\n\r\n`@ExtensionCustomizationOrder` - This is the equivalent of the\r\nSqlObject `@DecoratorOrder` annotation.\r\n\r\n`ExtensionConfigurer` - This is the equivalent of SqlObject\r\n`Configurer`. Literally.\r\n\r\n`ConfigCustomizer` - This is an explicit interface where the SqlObject\r\ncode uses `Consumer<ConfigRegistry>`. We are not consuming the\r\nregistry, but customizing it. Makes code more readable.\r\n\r\n`ConfigCustomizerFactory` - A factory class that creates a collection\r\nof `ConfigCustomizer` elements for an extension type or an extension\r\ntype method. That concept existed sprawled out in the\r\n`SqlObjectInitData` class but was not pluggable and hardcoded to the\r\n`Configurer` interface.\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject\r\n`@ConfiguringAnnotation`\r\n\r\n`ExtensionFactory` gets a lot of new things, all of them with defaults\r\nthat match the current code.\r\n* a set of flags to control extension factory behavior\r\n* bunch of getters for custom ExtensionHandlerFactories,\r\n  ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n\r\nThe `Extensions` configuration gets some new things:\r\n* methods to register ExtensionHandlerFactories,\r\n  ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n  globally\r\n* a method to retrieve metadata for a given extension type\r\n\r\n`ExtensionHandlerInvoker` takes the role of `InContextInvoker`. All\r\ninvokers are managed by the `ExtensionMetadata` class\r\n\r\n`ExtensionMetadata` takes the role of `SqlObjectInitData`. It contains\r\nall of the discovered functionality from an extension type. It builds\r\na map of `ExtensionHandler` objects that can be wrapped into an\r\n`ExtensionInvoker` with all customizers and configurers added. Those\r\n`ExtensionInvoker` classes are called through the Proxy when a method\r\nis invoked.\r\n\r\n`ExtensionFactoryDelegate` wraps the functionality of the old\r\nSqlObjectFactory code. It may simply delegate to the actual factory\r\ngenerated object or create the map of ExtensionHandlers with\r\ncorresponding ExtensionHandlerInvokers and wrap them into a proxy\r\nobject.\r\n\r\nSimilar to the SqlObject code, a number of \"glue\"\r\n`ExtensionHandlerFactory` instances are used to create method handlers\r\nthat are not managed by the extension specific code:\r\n\r\n* bridge methods\r\n* interface default methods\r\n* direct method invocations if the factory provides an actual object to attach to\r\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.extension.Extensions.findFactoryFor(java.lang.Class)",
            "method_name_cc": "private Optional<ExtensionFactory> org.jdbi.v3.core.extension.Extensions.findFactoryFor(Class<?> extensionType)",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java",
            "previous_method_cc": "private Optional<ExtensionFactory> org.jdbi.v3.core.extension.Extensions.findFactoryFor(Class<?> extensionType)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.extension.Extensions.findFactoryFor(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java",
            "previous_commit": "365986b0670080b9025001ca472a9b0064b41b53",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -8.839682054814997,
                "p_value": 0.522108153372518,
                "effect_size": 0.102880658436214,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 27,
                    "after": 27
                }
            }
        }
    ],
    "ad92f3f4c1f90ed5dd6027ad50bbaae20e796df2": [
        {
            "commit_message": "BaseStatement: why do we need a helper method for close()?\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public void org.jdbi.v3.core.statement.BaseStatement.close()",
            "method_name_cc": "public void org.jdbi.v3.core.statement.BaseStatement<This>.close()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/BaseStatement.java",
            "previous_method_cc": "public void org.jdbi.v3.core.statement.BaseStatement<This>.close()",
            "previous_method_pd": "public void org.jdbi.v3.core.statement.BaseStatement.close()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/BaseStatement.java",
            "previous_commit": "8ae6d5a570090606921558c4e5a5484105563985",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "BaseStatement: why do we need a helper method for close()?\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()",
            "method_name_cc": "public int[] org.jdbi.v3.core.statement.Batch.execute()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/Batch.java",
            "previous_method_cc": "public int[] org.jdbi.v3.core.statement.Batch.execute()",
            "previous_method_pd": "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/Batch.java",
            "previous_commit": "8ae6d5a570090606921558c4e5a5484105563985",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.031890487493976855,
                "p_value": 0.05047954096876554,
                "effect_size": -0.10246948623332387,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 221,
                    "after": 271
                }
            }
        }
    ],
    "4385e2b21e790541f9d36cae07162385620fa217": [
        {
            "commit_message": "error-prone: OperatorPrecedence fixes\n\nPMD and error prone disagree over parentheses, see also https://xkcd.com/297/\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(java.lang.Object)",
            "method_name_cc": "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(Object maybeIterable)",
            "file": "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java",
            "previous_method_cc": "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(Object maybeIterable)",
            "previous_method_pd": "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(java.lang.Object)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java",
            "previous_commit": "97bb752eba3dfe8ea17c2bc36c7f93d722496943",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -3.448320617457272,
                "p_value": 0.00038244673626799865,
                "effect_size": 0.1568291476991799,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 342,
                    "after": 343
                }
            }
        },
        {
            "commit_message": "error-prone: OperatorPrecedence fixes\n\nPMD and error prone disagree over parentheses, see also https://xkcd.com/297/\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_commit": "97bb752eba3dfe8ea17c2bc36c7f93d722496943",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.7012035583464156,
                "p_value": 0.0,
                "effect_size": -0.12091057085162968,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2107322,
                    "after": 2099296
                }
            }
        }
    ],
    "3a412462c8eaa96558bd7d585a7fbc6a3302361e": [
        {
            "commit_message": "Clarify uppercase/lowercase conversions\n\n- Make row name conversions configurable (same as MapMapper) with the current strategy being the default.\n- Replace one String#toUpperCase use with Character.toUpperCase, to match Introspector#decapitalize\n- Use Locale.ROOT in all the tests.\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "public org.jdbi.v3.core.mapper.RowMapper org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext) throws java.sql.SQLException",
            "method_name_cc": "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_method_cc": "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
            "previous_method_pd": "public org.jdbi.v3.core.mapper.RowMapper org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize(java.sql.ResultSet,org.jdbi.v3.core.statement.StatementContext) throws java.sql.SQLException",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_commit": "646ccb570d88e7811a86b327b344f104aba96812",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -30.958094886468523,
                "p_value": 0.0,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1568695,
                    "after": 1878097
                }
            }
        }
    ],
    "5db5d130637dabdd93cae7fb506722ff670bed7b": [
        {
            "commit_message": "Add one-time init methods to row and column mappers (#1863)\n\nAdd one-time init methods to row and column mappers\r\n\r\nAllow creation-time initialization of row and column mappers. Also\r\nmake the config registry available to the factory methods on the\r\ncodec interface.\r\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.RowMappers.findFor(java.lang.reflect.Type)",
            "method_name_cc": "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java",
            "previous_method_cc": "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.RowMappers.findFor(java.lang.reflect.Type)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java",
            "previous_commit": "76df0bb175537381391988854eeb4aa0b85f2eb8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.28046557285093254,
                "p_value": 1.3802065427548788e-242,
                "effect_size": 0.024635378186038167,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1222625,
                    "after": 1208045
                }
            }
        },
        {
            "commit_message": "Add one-time init methods to row and column mappers (#1863)\n\nAdd one-time init methods to row and column mappers\r\n\r\nAllow creation-time initialization of row and column mappers. Also\r\nmake the config registry available to the factory methods on the\r\ncodec interface.\r\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.ColumnMappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java",
            "previous_method_cc": "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.ColumnMappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java",
            "previous_commit": "76df0bb175537381391988854eeb4aa0b85f2eb8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.36674816625916873,
                "p_value": 4.300144002817425e-149,
                "effect_size": 0.010222386595783567,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4319335,
                    "after": 4309691
                }
            }
        }
    ],
    "aa2c7fb5f4825ec029818d4d1db17dca3f0a8dcf": [
        {
            "commit_message": "SqlObject Consumer: accept Stream, Iterator consumer types\n\nFixes #2169\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "static org.jdbi.v3.sqlobject.statement.internal.ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java",
            "previous_method_cc": "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
            "previous_method_pd": "static org.jdbi.v3.sqlobject.statement.internal.ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java",
            "previous_commit": "67ab4cb83cd95122ebc7775f50f77bcbf49f1435",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.30018373314701235,
                "p_value": 0.6919513053594877,
                "effect_size": -0.05110336817653891,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 41,
                    "after": 42
                }
            }
        }
    ],
    "37b8329ccc9e5332b01445413af1cd74e9f9da26": [
        {
            "commit_message": "Arguments: don't prePrepare types, it's too expensive in the common case\n\n~20% improvement on H2.fluentSelectOne\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentSelectOne",
            "method_name_pd": "public org.jdbi.v3.core.argument.Arguments org.jdbi.v3.core.argument.Arguments.register(org.jdbi.v3.core.argument.QualifiedArgumentFactory)",
            "method_name_cc": "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_method_cc": "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
            "previous_method_pd": "public org.jdbi.v3.core.argument.Arguments org.jdbi.v3.core.argument.Arguments.register(org.jdbi.v3.core.argument.QualifiedArgumentFactory)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_commit": "e47563598f53387c6406c558a23ae66deaaaff1e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -30.960217102604076,
                "p_value": 1.3266881916299966e-06,
                "effect_size": 0.29817666387475034,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 187,
                    "after": 166
                }
            }
        },
        {
            "commit_message": "Arguments: don't prePrepare types, it's too expensive in the common case\n\n~20% improvement on H2.fluentSelectOne\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentSelectOne",
            "method_name_pd": "public void org.jdbi.v3.core.argument.Arguments.setRegistry(org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public void org.jdbi.v3.core.argument.Arguments.setRegistry(ConfigRegistry registry)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_method_cc": "public void org.jdbi.v3.core.argument.Arguments.setRegistry(ConfigRegistry registry)",
            "previous_method_pd": "public void org.jdbi.v3.core.argument.Arguments.setRegistry(org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_commit": "e47563598f53387c6406c558a23ae66deaaaff1e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -78.88927216281476,
                "p_value": 0.0,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4477058,
                    "after": 4265082
                }
            }
        },
        {
            "commit_message": "Arguments: don't prePrepare types, it's too expensive in the common case\n\n~20% improvement on H2.fluentSelectOne\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentSelectOne",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.argument.Arguments.findFor(org.jdbi.v3.core.qualifier.QualifiedType,java.lang.Object)",
            "method_name_cc": "public Optional<Argument> org.jdbi.v3.core.argument.Arguments.findFor(QualifiedType<?> type, Object value)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_method_cc": "public Optional<Argument> org.jdbi.v3.core.argument.Arguments.findFor(QualifiedType<?> type, Object value)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.argument.Arguments.findFor(org.jdbi.v3.core.qualifier.QualifiedType,java.lang.Object)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_commit": "e47563598f53387c6406c558a23ae66deaaaff1e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 155.60808844922897,
                "p_value": 0.07198743531789906,
                "effect_size": -0.28669410150891633,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 27,
                    "after": 27
                }
            }
        },
        {
            "commit_message": "Arguments: don't prePrepare types, it's too expensive in the common case\n\n~20% improvement on H2.fluentSelectOne\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentSelectOne",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.argument.Arguments.prepareFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.Arguments.prepareFor(QualifiedType<?> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_method_cc": "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.Arguments.prepareFor(QualifiedType<?> type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.argument.Arguments.prepareFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_commit": "e47563598f53387c6406c558a23ae66deaaaff1e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 216.76724137931035,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3930644,
                    "after": 4589646
                }
            }
        }
    ],
    "f2eb8dc4dccba41ffe546b2afdf0e95e19009488": [
        {
            "commit_message": "some minor fixes based on sonarqube\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "method_name_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_method_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "ed5f7daeca2588256e66f7003a0ef4029af100dd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.7380626335605701,
                "p_value": 0.981196111782016,
                "effect_size": -0.0012646605339292829,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 271,
                    "after": 213
                }
            }
        }
    ],
    "23195040b5ab492c97dad48f2c7ba962861e6231": [
        {
            "commit_message": "Re-prepare factories on each copy of Arguments, so that they can get updated configuration\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public org.jdbi.v3.core.argument.Arguments org.jdbi.v3.core.argument.Arguments.register(org.jdbi.v3.core.argument.QualifiedArgumentFactory)",
            "method_name_cc": "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_method_cc": "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
            "previous_method_pd": "public org.jdbi.v3.core.argument.Arguments org.jdbi.v3.core.argument.Arguments.register(org.jdbi.v3.core.argument.QualifiedArgumentFactory)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_commit": "afc6bc9e975d2d4edf27b5f242b51d4109a9e361",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.756341641439689,
                "p_value": 0.11687393409509157,
                "effect_size": 0.22727272727272727,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 32,
                    "after": 33
                }
            }
        },
        {
            "commit_message": "Re-prepare factories on each copy of Arguments, so that they can get updated configuration\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public void org.jdbi.v3.core.argument.Arguments.setRegistry(org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public void org.jdbi.v3.core.argument.Arguments.setRegistry(ConfigRegistry registry)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_method_cc": "public void org.jdbi.v3.core.argument.Arguments.setRegistry(ConfigRegistry registry)",
            "previous_method_pd": "public void org.jdbi.v3.core.argument.Arguments.setRegistry(org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_commit": "afc6bc9e975d2d4edf27b5f242b51d4109a9e361",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 196.0179554011005,
                "p_value": 0.0,
                "effect_size": -0.9999524879865738,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2631272,
                    "after": 1443931
                }
            }
        }
    ],
    "3e802fe235a322339c6ad64a987bc818dc916aa3": [
        {
            "commit_message": "Simplify the default method logic\n\nInterfaces can not override any method from Object and the extension\nmetadata is only created for interfaces. So there is no need to do any\nchecking.\n\nRip out all of the check logic, add constant methods (except for\ntoString).\n\nCache the finalizer if present in extension metadata.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public org.jdbi.v3.core.extension.ExtensionMetadata org.jdbi.v3.core.extension.ExtensionMetadata$Builder.build()",
            "method_name_cc": "public ExtensionMetadata build()",
            "file": "core/src/main/java/org/jdbi/v3/core/extension/ExtensionMetadata.java",
            "previous_method_cc": "public ExtensionMetadata build()",
            "previous_method_pd": "public org.jdbi.v3.core.extension.ExtensionMetadata org.jdbi.v3.core.extension.ExtensionMetadata$Builder.build()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/extension/ExtensionMetadata.java",
            "previous_commit": "2f734d4c7b167b4429d88b0677a4a412e625b345",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.15440804193753804,
                "p_value": 0.8398599725400034,
                "effect_size": 0.05555555555555555,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        }
    ],
    "e7a819593ff7bdcf71aa8ff8fe2a8ac7f95972c0": [
        {
            "commit_message": "@BindPojo: support binding Pojo<T> properties of type T\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "org.jdbi.v3.core.statement.PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.bindNamedArgumentFinder(org.jdbi.v3.core.argument.internal.NamedArgumentFinderFactory,java.lang.String,java.lang.Object,java.lang.reflect.Type,java.util.function.Supplier)",
            "method_name_cc": "PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.bindNamedArgumentFinder(NamedArgumentFinderFactory<?> factory, String prefix, Object value, Type type, Supplier<NamedArgumentFinder> backupArgumentFinder)",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.bindNamedArgumentFinder(NamedArgumentFinderFactory<?> factory, String prefix, Object value, Supplier<NamedArgumentFinder> backupArgumentFinder)",
            "previous_method_pd": "org.jdbi.v3.core.statement.PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.bindNamedArgumentFinder(org.jdbi.v3.core.argument.internal.NamedArgumentFinderFactory,java.lang.String,java.lang.Object,java.util.function.Supplier)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "3171d4e11f228fa5620e55e5fe6e5f50a3e06027",
            "performance_diff": -0.2737204202522858,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -2.417582417582418,
                "p_value": 0.0,
                "effect_size": 0.27190806746851476,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7602729,
                    "after": 5423157
                }
            }
        }
    ],
    "1952c9bbf6f0e3a077319c5f348147d8f74fe0ca": [
        {
            "commit_message": "Code readability changes\n\nReplace a number of single-letter variables with more speaking names.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(org.jdbi.v3.core.Jdbi)",
            "method_name_cc": "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java",
            "previous_method_cc": "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)",
            "previous_method_pd": "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(org.jdbi.v3.core.Jdbi)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java",
            "previous_commit": "3e87d847592475d2b13e3d01a14c22e773077deb",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 9.440590156301816,
                "p_value": 0.7950121719642381,
                "effect_size": -0.06944444444444445,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        }
    ],
    "e344a717c7c09fba3f3b59b81d31c4b2c98e9d01": [
        {
            "commit_message": "PropagateNull annotation for BeanMapper, ConstructorMapper, and FieldMapper\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java",
            "previous_commit": "30bd11b4525536c835c6e80eeb501bec510c0179",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 21.255495348123915,
                "p_value": 0.0,
                "effect_size": -0.9999987840527799,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 998434,
                    "after": 972524
                }
            }
        }
    ],
    "0634052524cf5b229be3852fd90eaf141925f082": [
        {
            "commit_message": "add `@Unmappable` to disable property mapping of read-only properties like `@Value.Derived`\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_commit": "3abb4aeabbbd38193f203e4d813a95bb2243de65",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 5.747126436781609,
                "p_value": 0.0,
                "effect_size": -0.5003439020353617,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 453798,
                    "after": 459860
                }
            }
        }
    ],
    "2e32aca8e753b81d7a315c91c85cd327686f9e5f": [
        {
            "commit_message": "Enforce exact signatures for consumer arguments\n\nOnly allow exact Consumer<Stream<T>> and Consumer<Iterator<T>> argument types,\nadd reasonable error messages.\n\nAdd a minor correctness change for the consumers (close the stream right after stream/iterator callback ends).\n\nAdd a bunch of tests\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "static org.jdbi.v3.sqlobject.statement.internal.ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java",
            "previous_method_cc": "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
            "previous_method_pd": "static org.jdbi.v3.sqlobject.statement.internal.ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java",
            "previous_commit": "e24d27ffcbc8624f2139226e9fd757bfa6e6191f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.12416213259244631,
                "p_value": 0.653648596816913,
                "effect_size": -0.05853658536585366,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 40,
                    "after": 41
                }
            }
        },
        {
            "commit_message": "Enforce exact signatures for consumer arguments\n\nOnly allow exact Consumer<Stream<T>> and Consumer<Iterator<T>> argument types,\nadd reasonable error messages.\n\nAdd a minor correctness change for the consumers (close the stream right after stream/iterator callback ends).\n\nAdd a bunch of tests\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "private static java.lang.Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.checkResult(java.lang.Object,org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "private static Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.checkResult(Object result, QualifiedType<?> type)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java",
            "previous_method_cc": "private static Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.checkResult(Object result, QualifiedType<?> type)",
            "previous_method_pd": "private static java.lang.Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.checkResult(java.lang.Object,org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java",
            "previous_commit": "e24d27ffcbc8624f2139226e9fd757bfa6e6191f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.6432398274583075,
                "p_value": 0.38373262766250305,
                "effect_size": -0.19111111111111112,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 15,
                    "after": 15
                }
            }
        }
    ],
    "73e848b941e198e6a195230343d2aa20404f1b14": [
        {
            "commit_message": "Json support: map sql 'null' to and from json 'null'\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "private static org.jdbi.v3.core.mapper.ColumnMapper org.jdbi.v3.core.mapper.OptionalMapperFactory.optionalMapper(org.jdbi.v3.core.mapper.ColumnGetter,java.util.function.Supplier,java.util.function.Function)",
            "method_name_cc": "private static <Opt, Box> ColumnMapper<?> org.jdbi.v3.core.mapper.OptionalMapperFactory.optionalMapper(ColumnGetter<Box> columnGetter, Supplier<Opt> empty, Function<Box, Opt> present)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/OptionalMapperFactory.java",
            "previous_method_cc": "private static <Opt, Box> ColumnMapper<?> org.jdbi.v3.core.mapper.OptionalMapperFactory.optionalMapper(ColumnGetter<Box> columnGetter, Supplier<Opt> empty, Function<Box, Opt> present)",
            "previous_method_pd": "private static org.jdbi.v3.core.mapper.ColumnMapper org.jdbi.v3.core.mapper.OptionalMapperFactory.optionalMapper(org.jdbi.v3.core.mapper.ColumnGetter,java.util.function.Supplier,java.util.function.Function)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/OptionalMapperFactory.java",
            "previous_commit": "036e41878e9edde3345af5237dd4820aa5efa722",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.754084625052367,
                "p_value": 0.0,
                "effect_size": -0.033994358317557774,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1513458,
                    "after": 1523193
                }
            }
        }
    ],
    "911beea21bbf94d7929f28cfe468a7aa534bd940": [
        {
            "commit_message": "fixup deviations from copy-constructor config pattern",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public org.jdbi.v3.core.qualifier.Qualifiers org.jdbi.v3.core.qualifier.Qualifiers.createCopy()",
            "method_name_cc": "public Qualifiers org.jdbi.v3.core.qualifier.Qualifiers.createCopy()",
            "file": "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java",
            "previous_method_cc": "public Qualifiers org.jdbi.v3.core.qualifier.Qualifiers.createCopy()",
            "previous_method_pd": "public org.jdbi.v3.core.qualifier.Qualifiers org.jdbi.v3.core.qualifier.Qualifiers.createCopy()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java",
            "previous_commit": "157c83b86b209b3e549e6f8caa5618b6008ce3e4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 4.133148404993065,
                "p_value": 0.0,
                "effect_size": -0.20485694796798914,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1433189,
                    "after": 1408831
                }
            }
        }
    ],
    "c886fc2c4910bc822fa696e802aabc4373c5d306": [
        {
            "commit_message": "JdbiClassUtils: add a MethodHandle based findConstructor\n\nFixes #2427\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.attach",
            "method_name_pd": "private java.util.function.Function org.jdbi.v3.core.config.ConfigRegistry.configFactory(java.lang.Class)",
            "method_name_cc": "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)",
            "file": "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java",
            "previous_method_cc": "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)",
            "previous_method_pd": "private java.util.function.Function org.jdbi.v3.core.config.ConfigRegistry.configFactory(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java",
            "previous_commit": "d5de5b062b2cc6100eb08e34f22ddfd697fd285c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.6897069872276482,
                "p_value": 0.0,
                "effect_size": 0.14151507012267933,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7253647,
                    "after": 8512669
                }
            }
        }
    ],
    "55ae3628f95a17f4ad6443e1c46cdd1bb7efc400": [
        {
            "commit_message": "code review, thanks @Alexey1Gavrilov\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public int org.jdbi.v3.core.qualifier.QualifiedType.hashCode()",
            "method_name_cc": "public int org.jdbi.v3.core.qualifier.QualifiedType<T>.hashCode()",
            "file": "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java",
            "previous_method_cc": "public int org.jdbi.v3.core.qualifier.QualifiedType<T>.hashCode()",
            "previous_method_pd": "public int org.jdbi.v3.core.qualifier.QualifiedType.hashCode()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java",
            "previous_commit": "75c9675a789d7dd5e22a0ba1be4242052056de6f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.53475935828877,
                "p_value": 0.0,
                "effect_size": -0.05434946518003966,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 12624940,
                    "after": 12350238
                }
            }
        }
    ],
    "84143048e2a0366b3c9ef6f2d558815b3627cc6d": [
        {
            "commit_message": "Transaction callbacks: move from Handles to Handle, so nested transactions work correctly\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public org.jdbi.v3.core.Handle org.jdbi.v3.core.Handle.commit()",
            "method_name_cc": "public Handle org.jdbi.v3.core.Handle.commit()",
            "file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_method_cc": "public Handle org.jdbi.v3.core.Handle.commit()",
            "previous_method_pd": "public org.jdbi.v3.core.Handle org.jdbi.v3.core.Handle.commit()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_commit": "391d7e62938d8b3f27dd0883d8956c04b8e62ae2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.6412028264186441,
                "p_value": 0.02521192391410265,
                "effect_size": -0.12379037325625236,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 218,
                    "after": 219
                }
            }
        }
    ],
    "fcf111b1ed4a9e380095eb84457a9126fbe5a0d7": [
        {
            "commit_message": "clean up TypedValue a bit\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public final java.util.Optional org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.find(java.lang.String,org.jdbi.v3.core.statement.StatementContext)",
            "method_name_cc": "public final Optional<Argument> org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.find(String name, StatementContext ctx)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/internal/ObjectPropertyNamedArgumentFinder.java",
            "previous_method_cc": "public final Optional<Argument> org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.find(String name, StatementContext ctx)",
            "previous_method_pd": "public final java.util.Optional org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.find(java.lang.String,org.jdbi.v3.core.statement.StatementContext)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/internal/ObjectPropertyNamedArgumentFinder.java",
            "previous_commit": "7ebe0347cc657ecea00b8d9bfe70b0ab99122586",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.8152634766808,
                "p_value": 0.0,
                "effect_size": 0.00996060169637664,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 11277105,
                    "after": 11153876
                }
            }
        }
    ],
    "320164473d02fd6905cf73ba8cd35ee91f16adde": [
        {
            "commit_message": "SqlObject decorators, @Transactional: support annotating types\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "public org.jdbi.v3.sqlobject.Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(org.jdbi.v3.sqlobject.Handler,java.lang.Class,java.lang.reflect.Method)",
            "method_name_cc": "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java",
            "previous_method_cc": "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)",
            "previous_method_pd": "public org.jdbi.v3.sqlobject.Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(org.jdbi.v3.sqlobject.Handler,java.lang.Class,java.lang.reflect.Method)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java",
            "previous_commit": "065703a91b6e682904babe5a398cbd63d938d8dd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 26.713285915549196,
                "p_value": 0.017617329498379512,
                "effect_size": -0.2318840579710145,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 72,
                    "after": 69
                }
            }
        }
    ],
    "214adffa372cf96af9abb6c46a09652b5669b859": [
        {
            "commit_message": "Fix resource leaks in script and sqlobject\n\n    - close the internal batch statement inside the script statement\n    - attach all generated statements to the handle. They will be cleaned\n      when the handle is cleaned up\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public java.lang.Object org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.invoke(java.lang.Object,java.lang.Object[],org.jdbi.v3.core.extension.HandleSupplier)",
            "method_name_cc": "public Object invoke(Object target, Object[] args, HandleSupplier hs)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java",
            "previous_method_cc": "public Object invoke(Object target, Object[] args, HandleSupplier hs)",
            "previous_method_pd": "public java.lang.Object org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.invoke(java.lang.Object,java.lang.Object[],org.jdbi.v3.core.extension.HandleSupplier)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java",
            "previous_commit": "6d5cb88becd002c7ec71b67599d482f795b91044",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -14.215352349893259,
                "p_value": 0.22772123760157525,
                "effect_size": 0.2048611111111111,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 24,
                    "after": 24
                }
            }
        }
    ],
    "1f00a3599e934f5eb221747ac58a7ffdd6091b4b": [
        {
            "commit_message": "More parameter renames to make code readable\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "public static org.jdbi.v3.core.result.ResultProducer org.jdbi.v3.core.result.ResultProducers.returningResults()",
            "method_name_cc": "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningResults()",
            "file": "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java",
            "previous_method_cc": "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningResults()",
            "previous_method_pd": "public static org.jdbi.v3.core.result.ResultProducer org.jdbi.v3.core.result.ResultProducers.returningResults()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java",
            "previous_commit": "485daed744305de2c67ba56f755dc5ef79591ae5",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1.8958687040181097,
                "p_value": 0.0,
                "effect_size": -0.23249585125370092,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1850870,
                    "after": 1871948
                }
            }
        }
    ],
    "ef3b9eb31557ba34c06ff62c127b2d4ca4ad836d": [
        {
            "commit_message": "Batch ops should give access to modified row count (#2069)\n\nAdd `executePreparedBatch` to supersede `executeAndReturnGeneratedKeys`,\r\nwhich allows access to the modified row count after execution. Also add\r\na convenience method to the iterable that allows splitting up the list\r\nof results into per-batch sets.\r\n\r\nAddresses the problems described in #2060\r\n\r\nBased on a proposal by @doppelrittberger (Markus Ritter)",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "method_name_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_method_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "33571778c0a1b3997847557ead84b41eef316776",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -5.537148599327903,
                "p_value": 1.4667466076866517e-46,
                "effect_size": 0.7425125530781278,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 257,
                    "after": 241
                }
            }
        }
    ],
    "6a1a3d87e984e6ddfc8b861acca39376a9b1a043": [
        {
            "commit_message": "remove BaseStatement#addCleanable\n\nthis is only a passthru for getContext().addCleanable() and provides no\nvalue. As this is an internal method, we can just remove it.\n\nUse getContext().addCleanable() directly.\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "method_name_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_method_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "b2f18bd91ff4a6b4bd6de88f445503b78c3ad2a3",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1.8237830581180403,
                "p_value": 3.225474744438484e-06,
                "effect_size": -0.23878167867937689,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 253,
                    "after": 255
                }
            }
        }
    ],
    "49498d0456ef9dbfe5611df4f7ee5a50c6f3a98b": [
        {
            "commit_message": "Clean up statement builder usage\n\n- Call close methods consistently on all paths in BAtch, Call and SqlStatement\n- deprecate statement/sql close method, replace with specific close methods for\n  PreparedStatement and Statement that also take the StatementContext\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "method_name_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_method_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "97f2bac90ada5f5eb4aeb37f632581979d0cf084",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -0.6280116591838174,
                "p_value": 0.004496509894256534,
                "effect_size": -0.152587204496611,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 263,
                    "after": 207
                }
            }
        }
    ],
    "f18eaaf9f16ae9499d98e584738be9327ea3b424": [
        {
            "commit_message": "TemplateEngines: cache\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.lang.String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(java.lang.String,org.jdbi.v3.core.statement.StatementContext)",
            "method_name_cc": "public String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(String template, StatementContext ctx)",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/DefinedAttributeTemplateEngine.java",
            "previous_method_cc": "public String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(String template, StatementContext ctx)",
            "previous_method_pd": "public java.lang.String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(java.lang.String,org.jdbi.v3.core.statement.StatementContext)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/DefinedAttributeTemplateEngine.java",
            "previous_commit": "722c4ddcb5aad57364d7803061afa0b56d6c5911",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -30.998282114907425,
                "p_value": 0.0,
                "effect_size": 0.9999950152154252,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1228646,
                    "after": 1099605
                }
            }
        }
    ],
    "ab0b3710a0a209df8eaab9a69e93f1a9a870bc2a": [
        {
            "commit_message": "*Mappers: cache misses as well as hits\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.RowMappers.findFor(java.lang.reflect.Type)",
            "method_name_cc": "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java",
            "previous_method_cc": "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.RowMappers.findFor(java.lang.reflect.Type)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java",
            "previous_commit": "7131783d84c1b01dc73096d93d814adc36a964fe",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.6707807888382077,
                "p_value": 0.0,
                "effect_size": 0.11338464838944808,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 550604,
                    "after": 797644
                }
            }
        },
        {
            "commit_message": "*Mappers: cache misses as well as hits\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.ColumnMappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java",
            "previous_method_cc": "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.ColumnMappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java",
            "previous_commit": "7131783d84c1b01dc73096d93d814adc36a964fe",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.9364026531408505,
                "p_value": 0.0,
                "effect_size": 0.04456795044433795,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1807595,
                    "after": 2769975
                }
            }
        }
    ],
    "cc3847b646d2e71b80624e86428af4cab2c95f68": [
        {
            "commit_message": "RowMapper, ColumnMapper.findFor: reduce Stream usage in hot path\n\nThis showed up as an allocation hotspot in our app since finding mappers is one of the most common Jdbi ops\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.RowMappers.findFor(java.lang.reflect.Type)",
            "method_name_cc": "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java",
            "previous_method_cc": "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.RowMappers.findFor(java.lang.reflect.Type)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java",
            "previous_commit": "773dc9edefcda3e6439af2c7368c0b5717f607ec",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -3.3276931754089114,
                "p_value": 0.0,
                "effect_size": 0.39698110862643426,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1110599,
                    "after": 1174245
                }
            }
        },
        {
            "commit_message": "RowMapper, ColumnMapper.findFor: reduce Stream usage in hot path\n\nThis showed up as an allocation hotspot in our app since finding mappers is one of the most common Jdbi ops\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.ColumnMappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java",
            "previous_method_cc": "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.ColumnMappers.findFor(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java",
            "previous_commit": "773dc9edefcda3e6439af2c7368c0b5717f607ec",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.6955810147299509,
                "p_value": 1.7447751501977029e-22,
                "effect_size": 0.00396313089519072,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3968724,
                    "after": 4113158
                }
            }
        }
    ],
    "c283af4884c4ac9996e23b4d6c776cd426a66148": [
        {
            "commit_message": "Rename sharedArgs to argsArray as it's initialized everytime\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "private java.util.Iterator org.jdbi.v3.sqlobject.statement.internal.SqlBatchHandler.zipArgs(java.lang.reflect.Method,java.lang.Object[])",
            "method_name_cc": "private Iterator<Object[]> zipArgs(Method method, Object[] args)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_method_cc": "private Iterator<Object[]> zipArgs(Method method, Object[] args)",
            "previous_method_pd": "private java.util.Iterator org.jdbi.v3.sqlobject.statement.internal.SqlBatchHandler.zipArgs(java.lang.reflect.Method,java.lang.Object[])",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_commit": "ca0bf68014866c16e37e3fe8383281d22e3f5c17",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.9643107458026698,
                "p_value": 0.9463429550983945,
                "effect_size": 0.0037174721189591076,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 269,
                    "after": 188
                }
            }
        }
    ],
    "aad0b605631763fa4262f43a960fc8c92f9ecc4f": [
        {
            "commit_message": "AbstractArgumentFactory: factor out instance test\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.argument.AbstractArgumentFactory.prepare(java.lang.reflect.Type,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.prepare(Type type, ConfigRegistry config)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java",
            "previous_method_cc": "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.prepare(Type type, ConfigRegistry config)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.argument.AbstractArgumentFactory.prepare(java.lang.reflect.Type,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java",
            "previous_commit": "7e17875ad4d061a31c1c9cd04ce31b7433831509",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -13.229681841193191,
                "p_value": 1.6807708413888188e-11,
                "effect_size": 0.2628639829295584,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 415,
                    "after": 463
                }
            }
        },
        {
            "commit_message": "AbstractArgumentFactory: factor out instance test\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "public final java.util.Optional org.jdbi.v3.core.argument.AbstractArgumentFactory.build(java.lang.reflect.Type,java.lang.Object,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public final Optional<Argument> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.build(Type type, Object value, ConfigRegistry config)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java",
            "previous_method_cc": "public final Optional<Argument> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.build(Type type, Object value, ConfigRegistry config)",
            "previous_method_pd": "public final java.util.Optional org.jdbi.v3.core.argument.AbstractArgumentFactory.build(java.lang.reflect.Type,java.lang.Object,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java",
            "previous_commit": "7e17875ad4d061a31c1c9cd04ce31b7433831509",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -14.6841692698279,
                "p_value": 8.024922777833863e-17,
                "effect_size": 0.3194343692269003,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 429,
                    "after": 482
                }
            }
        }
    ],
    "3c1a53624454bbdb1b466fd56e2bc9f837893cd7": [
        {
            "commit_message": "Clean up a couple of warnings\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_commit": "8c1228a27b25ca3bd285f76c3a3d0ed092b61195",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -1.0657644322266864,
                "p_value": 0.0,
                "effect_size": 0.2906166233910866,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 719292,
                    "after": 942747
                }
            }
        }
    ],
    "9571fb7441a21cbd1828f3c2a955de941246910f": [
        {
            "commit_message": "Handle: add new onCommit and onRollback transactional callbacks\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "public org.jdbi.v3.core.Handle org.jdbi.v3.core.Handle.commit()",
            "method_name_cc": "public Handle org.jdbi.v3.core.Handle.commit()",
            "file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_method_cc": "public Handle org.jdbi.v3.core.Handle.commit()",
            "previous_method_pd": "public org.jdbi.v3.core.Handle org.jdbi.v3.core.Handle.commit()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_commit": "8380ab2a62ab44d606c8f04bf5e183df7ae40ed4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.26328012319750704,
                "p_value": 0.7330632038795478,
                "effect_size": -0.01679028552674762,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 277,
                    "after": 275
                }
            }
        }
    ],
    "4eeb8346d00d2e87456444ad84e6c1c535a12baf": [
        {
            "commit_message": "QualifiedArgumentFactory: fix typo\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public org.jdbi.v3.core.argument.Arguments org.jdbi.v3.core.argument.Arguments.register(org.jdbi.v3.core.argument.QualifiedArgumentFactory)",
            "method_name_cc": "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_method_cc": "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
            "previous_method_pd": "public org.jdbi.v3.core.argument.Arguments org.jdbi.v3.core.argument.Arguments.register(org.jdbi.v3.core.argument.QualifiedArgumentFactory)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java",
            "previous_commit": "1fdb5a32a4044e33f6f20a32ddd78887f2796b4f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -13.23268309099138,
                "p_value": 0.2780034191086941,
                "effect_size": 0.15508021390374332,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 34,
                    "after": 33
                }
            }
        }
    ],
    "3d4f00664113bf7f4f2add6cf6be197016c9ffbe": [
        {
            "commit_message": "Clarify the logic for AbstractArgumentFactory.\n\nDocument that the abstract build method must return an argument\ninstance. Align the implementation of build() and prepare().\n\nAddresses #2249\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.argument.AbstractArgumentFactory.prepare(java.lang.reflect.Type,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.prepare(Type type, ConfigRegistry config)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java",
            "previous_method_cc": "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.prepare(Type type, ConfigRegistry config)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.argument.AbstractArgumentFactory.prepare(java.lang.reflect.Type,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java",
            "previous_commit": "e4a149a3ac476eb29bdd533c1390a2f9ab84f883",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.4691635255433475,
                "p_value": 0.015761699085502442,
                "effect_size": 0.018625398345512655,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 11173,
                    "after": 11233
                }
            }
        },
        {
            "commit_message": "Clarify the logic for AbstractArgumentFactory.\n\nDocument that the abstract build method must return an argument\ninstance. Align the implementation of build() and prepare().\n\nAddresses #2249\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "public final java.util.Optional org.jdbi.v3.core.argument.AbstractArgumentFactory.build(java.lang.reflect.Type,java.lang.Object,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public final Optional<Argument> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.build(Type type, Object value, ConfigRegistry config)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java",
            "previous_method_cc": "public final Optional<Argument> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.build(Type type, Object value, ConfigRegistry config)",
            "previous_method_pd": "public final java.util.Optional org.jdbi.v3.core.argument.AbstractArgumentFactory.build(java.lang.reflect.Type,java.lang.Object,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java",
            "previous_commit": "e4a149a3ac476eb29bdd533c1390a2f9ab84f883",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.7153948115887143,
                "p_value": 0.35898327853594314,
                "effect_size": 0.025955308549543584,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 820,
                    "after": 847
                }
            }
        }
    ],
    "b67e223d4f21d3f57a45eedacdf4535adae109b1": [
        {
            "commit_message": "Refactor ResultProducers\n\n- Unify the methods returning ResultProducer<ResultBearing>\n- expose createResultBearing which can be used in other places to create\n  ResultSet objects (e.g. in the Oracle code)\n\nFixes #2222\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "public static org.jdbi.v3.core.result.ResultProducer org.jdbi.v3.core.result.ResultProducers.returningResults()",
            "method_name_cc": "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningResults()",
            "file": "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java",
            "previous_method_cc": "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningResults()",
            "previous_method_pd": "public static org.jdbi.v3.core.result.ResultProducer org.jdbi.v3.core.result.ResultProducers.returningResults()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java",
            "previous_commit": "059422d24a0a814b0f08b4d7d7b168d5c9d39826",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.7239952718676123,
                "p_value": 0.0,
                "effect_size": -0.09195260425180313,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6384073,
                    "after": 6355446
                }
            }
        }
    ],
    "c74cf4b6c69b01e9e72d4c2cf206a27b022f68cf": [
        {
            "commit_message": "New `@Definition` feature also supports definitions from supertypes\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.SqlObjectOperationBenchmark.jdbiRegistered",
            "method_name_pd": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(org.jdbi.v3.core.extension.ExtensionMetadata$Builder)",
            "method_name_cc": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java",
            "previous_method_cc": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)",
            "previous_method_pd": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(org.jdbi.v3.core.extension.ExtensionMetadata$Builder)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java",
            "previous_commit": "d61fca55c875178c6849d2043c67c61e73cc2f29",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 28.143814795117756,
                "p_value": 0.1460335202810438,
                "effect_size": -0.2465277777777778,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 24,
                    "after": 24
                }
            }
        }
    ],
    "110b71d27f398f8e44e09fff8e228aa59d9cb394": [
        {
            "commit_message": "Rework the SqlBatchHandler\n\nGet rid of the blank \"hasNext()\" call, clarify the logic and factor\nout the anonymous inner class into a method local inner class (yes,\nsuch a thing exists).\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public java.lang.Object org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.invoke(java.lang.Object,java.lang.Object[],org.jdbi.v3.core.extension.HandleSupplier)",
            "method_name_cc": "public Object invoke(Object target, Object[] args, HandleSupplier h)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_method_cc": "public Object invoke(Object target, Object[] args, HandleSupplier h)",
            "previous_method_pd": "public java.lang.Object org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.invoke(java.lang.Object,java.lang.Object[],org.jdbi.v3.core.extension.HandleSupplier)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_commit": "e802af792b4c5480d9dadc29bc4b0aaa50a6ef6a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 11.467894902065206,
                "p_value": 0.5706867047301827,
                "effect_size": -0.09722222222222222,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 24,
                    "after": 24
                }
            }
        }
    ],
    "94d22c6f706ab22ba7b281bc45a3ebd1c79cb485": [
        {
            "commit_message": "Fix sonar reported bugs and critical issues\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "java.lang.reflect.Type org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.getParameterType(java.lang.reflect.Parameter)",
            "method_name_cc": "Type getParameterType(Parameter parameter)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_method_cc": "Type getParameterType(Parameter parameter)",
            "previous_method_pd": "java.lang.reflect.Type org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.getParameterType(java.lang.reflect.Parameter)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_commit": "c153940f581c0c7f6f748d9cff57efce9885ce2b",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -17.845891952178764,
                "p_value": 0.005167702736460786,
                "effect_size": 0.23081683168316833,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 101,
                    "after": 96
                }
            }
        }
    ],
    "78dbaf119bed28ccd3de304893ea3ac10a0b36e3": [
        {
            "commit_message": "SqlObject: add `@Definition` annotation for defining computed constants\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.SqlObjectOperationBenchmark.jdbiRegistered",
            "method_name_pd": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(org.jdbi.v3.core.extension.ExtensionMetadata$Builder)",
            "method_name_cc": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java",
            "previous_method_cc": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)",
            "previous_method_pd": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(org.jdbi.v3.core.extension.ExtensionMetadata$Builder)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java",
            "previous_commit": "648740caa354f8de3e0fe8a48a44a4abba40941e",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.137855597181727,
                "p_value": 0.1488365468767095,
                "effect_size": -0.23765432098765432,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 27,
                    "after": 24
                }
            }
        }
    ],
    "1288ce9ddb493e388cc5fb7a15d6ebb0efd7530a": [
        {
            "commit_message": "Primitives argument factory: also check for NullArgument\n\nFixes #1901\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "private java.lang.Object org.jdbi.v3.core.argument.PrimitivesArgumentFactory.checkForNull(org.jdbi.v3.core.config.ConfigRegistry,java.lang.reflect.Type,java.lang.Object)",
            "method_name_cc": "private Object org.jdbi.v3.core.argument.PrimitivesArgumentFactory.checkForNull(ConfigRegistry cfg, Type type, Object value)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/PrimitivesArgumentFactory.java",
            "previous_method_cc": "private Object org.jdbi.v3.core.argument.PrimitivesArgumentFactory.checkForNull(ConfigRegistry cfg, Type type, Object value)",
            "previous_method_pd": "private java.lang.Object org.jdbi.v3.core.argument.PrimitivesArgumentFactory.checkForNull(org.jdbi.v3.core.config.ConfigRegistry,java.lang.reflect.Type,java.lang.Object)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/PrimitivesArgumentFactory.java",
            "previous_commit": "34fc3b4387fb3eee4c1addaa7e38a2d0ccca0bac",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.6824121034986677,
                "p_value": 0.3224521816992436,
                "effect_size": -0.03894539614561028,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 400,
                    "after": 467
                }
            }
        }
    ],
    "611c8ba9c77447bbf1053d5d9859e869b5f24d9b": [
        {
            "commit_message": "review remarks\n\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "private static org.jdbi.v3.core.mapper.ColumnMapper org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(org.jdbi.v3.core.mapper.ColumnGetter)",
            "method_name_cc": "private static <T> ColumnMapper<T> org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(ColumnGetter<T> getter)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/PrimitiveMapperFactory.java",
            "previous_method_cc": "private static <T> ColumnMapper<T> org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(ColumnGetter<T> getter)",
            "previous_method_pd": "private static org.jdbi.v3.core.mapper.ColumnMapper org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(org.jdbi.v3.core.mapper.ColumnGetter)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/PrimitiveMapperFactory.java",
            "previous_commit": "92d76f1d2b36fe94a9390f112dd139f0f8a35b60",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.6782945736434108,
                "p_value": 0.0,
                "effect_size": 0.08292976937945361,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5495260,
                    "after": 5455968
                }
            }
        }
    ],
    "849006140a0b2f853ec97f4ca1b1ba6fc5ea2030": [
        {
            "commit_message": "GenericTypes.box; QualifiedType.mapType cleanup\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_commit": "da0c4935b72564c722a0d16179e0a0a1918dbed5",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1.571688784803539,
                "p_value": 0.0,
                "effect_size": -0.3545655095184838,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 995379,
                    "after": 1024559
                }
            }
        }
    ],
    "9f823afd66bc552998b5cf27b645fc9fcd908e2a": [
        {
            "commit_message": "fix sonar flagged code smells\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "public static java.util.function.Consumer org.jdbi.v3.core.internal.exceptions.Unchecked.consumer(org.jdbi.v3.core.internal.exceptions.CheckedConsumer)",
            "method_name_cc": "public static <T> Consumer<T> org.jdbi.v3.core.internal.exceptions.Unchecked.consumer(CheckedConsumer<T> checkedConsumer)",
            "file": "core/src/main/java/org/jdbi/v3/core/internal/exceptions/Unchecked.java",
            "previous_method_cc": "public static <T> Consumer<T> org.jdbi.v3.core.internal.exceptions.Unchecked.consumer(CheckedConsumer<T> checkedConsumer)",
            "previous_method_pd": "public static java.util.function.Consumer org.jdbi.v3.core.internal.exceptions.Unchecked.consumer(org.jdbi.v3.core.internal.exceptions.CheckedConsumer)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/internal/exceptions/Unchecked.java",
            "previous_commit": "82047081bb0f9f21f4b83be0cccdc5adf242c347",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.061678954977885,
                "p_value": 0.5833604667027033,
                "effect_size": -0.1388888888888889,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        }
    ],
    "563240d50d60eed0c811e565a694d49ae477cab3": [
        {
            "commit_message": "AbstractSqlObjectFactory: extract constants\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.attach",
            "method_name_pd": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(org.jdbi.v3.core.extension.ExtensionMetadata$Builder)",
            "method_name_cc": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java",
            "previous_method_cc": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)",
            "previous_method_pd": "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(org.jdbi.v3.core.extension.ExtensionMetadata$Builder)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java",
            "previous_commit": "8f74600d14ebf55794eddc9a130a0613b82b178d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 48.129952754719824,
                "p_value": 0.7270001590318517,
                "effect_size": -0.05864197530864197,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 24,
                    "after": 27
                }
            }
        }
    ],
    "2db70ef664628c66e1496de135259a0390dea1f6": [
        {
            "commit_message": "@Unmappable: skip property entirely\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_commit": "10ff3192606d0288efecd38fbf7e5b687450a8c0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.4255973746282432,
                "p_value": 0.0,
                "effect_size": 0.049402111650097155,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 473602,
                    "after": 464280
                }
            }
        }
    ],
    "da0c4935b72564c722a0d16179e0a0a1918dbed5": [
        {
            "commit_message": "Immutables: respect `@Value.Default` when mapping nulled primitives\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "method_name_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_method_cc": "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
            "previous_method_pd": "private java.util.Optional org.jdbi.v3.core.mapper.reflect.internal.PojoMapper.specialize0(org.jdbi.v3.core.statement.StatementContext,java.util.List,java.util.List,java.util.List)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java",
            "previous_commit": "7ab58945bc0e85916aa6861f899385f0bd9977b9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1.4080100125156445,
                "p_value": 0.0,
                "effect_size": -0.2773069767476677,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1066961,
                    "after": 1016717
                }
            }
        }
    ],
    "7e511593f4c3fc75f98809f8b1ab2db54c45bdf2": [
        {
            "commit_message": "fix potential NPE\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentInsertGeneratedKeyBindBean",
            "method_name_pd": "java.lang.reflect.Type org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.getParameterType(java.lang.reflect.Parameter)",
            "method_name_cc": "Type getParameterType(Parameter parameter)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_method_cc": "Type getParameterType(Parameter parameter)",
            "previous_method_pd": "java.lang.reflect.Type org.jdbi.v3.sqlobject.statement.internal.CustomizingStatementHandler.getParameterType(java.lang.reflect.Parameter)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java",
            "previous_commit": "da7e51f7bd51b2638e4e439e1016db236f9bc349",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -8.126975071871973,
                "p_value": 0.08528644636808748,
                "effect_size": 0.14203257060399918,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 99,
                    "after": 98
                }
            }
        }
    ],
    "7131783d84c1b01dc73096d93d814adc36a964fe": [
        {
            "commit_message": "AnnotationSqlLocator: computation is surprisingly expensive due to annotation and stream usage, so cache it\n~20% improvement on H2 sqlobject insert bean benchmark\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.fluentSelectOne",
            "method_name_pd": "public java.lang.String org.jdbi.v3.sqlobject.locator.AnnotationSqlLocator.locate(java.lang.Class,java.lang.reflect.Method,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public String org.jdbi.v3.sqlobject.locator.AnnotationSqlLocator.locate(Class<?> sqlObjectType, Method method, ConfigRegistry config)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/AnnotationSqlLocator.java",
            "previous_method_cc": "public String org.jdbi.v3.sqlobject.locator.AnnotationSqlLocator.locate(Class<?> sqlObjectType, Method method, ConfigRegistry config)",
            "previous_method_pd": "public java.lang.String org.jdbi.v3.sqlobject.locator.AnnotationSqlLocator.locate(java.lang.Class,java.lang.reflect.Method,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/AnnotationSqlLocator.java",
            "previous_commit": "a137852d7c25d4966771be957d8e6e86b7435cb8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 7.006232718333784,
                "p_value": 0.2602362026171888,
                "effect_size": -0.2777777777777778,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 12,
                    "after": 12
                }
            }
        }
    ],
    "722c4ddcb5aad57364d7803061afa0b56d6c5911": [
        {
            "commit_message": "QualifiedType: cache hashCode\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapUnqualifiedBean",
            "method_name_pd": "public int org.jdbi.v3.core.qualifier.QualifiedType.hashCode()",
            "method_name_cc": "public int org.jdbi.v3.core.qualifier.QualifiedType<T>.hashCode()",
            "file": "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java",
            "previous_method_cc": "public int org.jdbi.v3.core.qualifier.QualifiedType<T>.hashCode()",
            "previous_method_pd": "public int org.jdbi.v3.core.qualifier.QualifiedType.hashCode()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java",
            "previous_commit": "0d3903d819631d3e7a1f9f8c000e91f4b9e14306",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -1.4231499051233396,
                "p_value": 0.0,
                "effect_size": 0.1727725849919258,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 11917001,
                    "after": 11985902
                }
            }
        }
    ],
    "d5df6a3753459cc375b9021b0836ef4843b5410b": [
        {
            "commit_message": "Batch insert: fix inserting constant 'null'\n\nFixes #1761\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(java.lang.Object)",
            "method_name_cc": "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(Object maybeIterable)",
            "file": "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java",
            "previous_method_cc": "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(Object maybeIterable)",
            "previous_method_pd": "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(java.lang.Object)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java",
            "previous_commit": "ad2ccfcc82cc05cf1a5a99d7fab7e705cc133bed",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.8527802409325864,
                "p_value": 0.04327963607012559,
                "effect_size": 0.10236116024053767,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 257,
                    "after": 264
                }
            }
        }
    ],
    "c05f5782d9517eeae37c3cd9bf7f73781566b686": [
        {
            "commit_message": "EnumArgumentFactory: skip computing erased type since any generic type is definitionally not an Enum\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByExactName",
            "method_name_pd": "static java.util.Optional org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(java.lang.reflect.Type)",
            "method_name_cc": "static <E extends Enum<E>> Optional<Class<E>> org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(Type type)",
            "file": "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java",
            "previous_method_cc": "static <E extends Enum<E>> Optional<Class<E>> org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(Type type)",
            "previous_method_pd": "static java.util.Optional org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(java.lang.reflect.Type)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java",
            "previous_commit": "506b8d28fd110728410f8b5f950e7bfa7c349fe8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -2.85788643276566,
                "p_value": 1.1684816942546005e-75,
                "effect_size": 0.16888842452236222,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8008,
                    "after": 7832
                }
            }
        }
    ],
    "be9a4e7ce2e3b01aa6df6400b512727b272053e7": [
        {
            "commit_message": "PreparedBatch: Correct context lookup\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "java.util.function.Function org.jdbi.v3.core.statement.PreparedBatch.buildArgument(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "Function<Object, Argument> org.jdbi.v3.core.statement.PreparedBatch.buildArgument(QualifiedType<?> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "Function<Object, Argument> org.jdbi.v3.core.statement.PreparedBatch.buildArgument(QualifiedType<?> type)",
            "previous_method_pd": "java.util.function.Function org.jdbi.v3.core.statement.PreparedBatch.buildArgument(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "d3f89859e3395a6e31ec57eb3544b5c8cc82f13a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -13.69326325848065,
                "p_value": 0.00015074868242523126,
                "effect_size": 0.04991083002662617,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3897,
                    "after": 3793
                }
            }
        }
    ],
    "7e13a4078e938b8b91ad049b6116a671fe209a9e": [
        {
            "commit_message": "TemplateEngine: use size-limited Caffeine cache so we don't keep an unbounded number of templates\n\nFixes #1776\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "method_name_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_method_pd": "private org.jdbi.v3.core.statement.PreparedBatch$ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "471ddbe74c322c76b0d218cdcaa0cd1317298b69",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 3.3405341284530974,
                "p_value": 3.6344631374130734e-12,
                "effect_size": -0.3844767612421944,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 214,
                    "after": 223
                }
            }
        }
    ],
    "b074c8d411963855c28a0fbbb47ccfa213d08eaa": [
        {
            "commit_message": "JdbiConfig: MethodHandle lookup cannot be public since it loads user code\n\nthis causes a LinkageError:\n\n```\nCaused by: java.lang.LinkageError: loader constraint violation:\n  when resolving method 'void org.jdbi.v3.core.argument.Arguments.<init>(org.jdbi.v3.core.config.ConfigRegistry)'\n  the class loader 'bootstrap' of the current class, java/lang/Object, and the class loader\n  com.paywholesail.components.testutil.IntegrationRuleClassLoader @7b222230 for the method's defining class,\n  org/jdbi/v3/core/argument/Arguments, have different Class objects for the type org/jdbi/v3/core/config/ConfigRegistry\n  used in the signature (java.lang.Object is in module java.base of loader 'bootstrap';\n  org.jdbi.v3.core.argument.Arguments is in unnamed module of loader\n  com.paywholesail.components.testutil.IntegrationRuleClassLoader @7b222230, parent loader 'platform')\n```\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.qualifiedType1",
            "method_name_pd": "private java.util.function.Function org.jdbi.v3.core.config.ConfigRegistry.configFactory(java.lang.Class)",
            "method_name_cc": "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)",
            "file": "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java",
            "previous_method_cc": "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)",
            "previous_method_pd": "private java.util.function.Function org.jdbi.v3.core.config.ConfigRegistry.configFactory(java.lang.Class)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java",
            "previous_commit": "bb02b6c6c92da4a496c3d5eb9f838f188552eeec",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 7.113711571831606,
                "p_value": 0.7872977333846636,
                "effect_size": -0.03616042077580539,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 39,
                    "after": 39
                }
            }
        }
    ],
    "efe05cea987dbbc21155f0914ad60de83a33a3d0": [
        {
            "commit_message": "Parse annotations in c'tor\n\ndon't need to wait until runtime to throw error.\n",
            "benchmark": "org.jdbi.v3.benchmark.sqlobject.H2SqlObjectV3Benchmark.sqlobjectSelectOne",
            "method_name_pd": "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(org.jdbi.v3.core.statement.Query,org.jdbi.v3.sqlobject.statement.internal.SqlObjectStatementConfiguration)",
            "method_name_cc": "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(Query q, SqlObjectStatementConfiguration cfg)",
            "file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java",
            "previous_method_cc": "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(Query q, SqlObjectStatementConfiguration cfg)",
            "previous_method_pd": "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(org.jdbi.v3.core.statement.Query,org.jdbi.v3.sqlobject.statement.internal.SqlObjectStatementConfiguration)",
            "previous_file": "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java",
            "previous_commit": "1952c9bbf6f0e3a077319c5f348147d8f74fe0ca",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.14660606949127694,
                "p_value": 2.6954120886177468e-185,
                "effect_size": -0.009411729802298761,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6255483,
                    "after": 6432709
                }
            }
        }
    ],
    "2513227afc55f8261a70092fb0582a89e6c6f5c0": [
        {
            "commit_message": "Raise exception if a positional query param is missing\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumMapperBenchmark.mapByRandomCaseName",
            "method_name_pd": "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(org.jdbi.v3.core.statement.Binding)",
            "method_name_cc": "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(Binding binding)",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java",
            "previous_method_cc": "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(Binding binding)",
            "previous_method_pd": "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(org.jdbi.v3.core.statement.Binding)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java",
            "previous_commit": "57a93ae3fcd4165c0ede9a3af4566b8d933033ed",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 25.049452333854923,
                "p_value": 1.3890316531595897e-91,
                "effect_size": -0.17884861235351077,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 8496,
                    "after": 8678
                }
            }
        }
    ],
    "5a33a0fa036d47920deba8cc0e1aa00312b90036": [
        {
            "commit_message": "Switch Mockito to proxy-only mode and disable byte-buddy agent\n\nAlternative approach to 22-ea\n",
            "benchmark": "org.jdbi.v3.benchmark.EnumBenchmark.mapEnumCaseSensitive",
            "method_name_pd": "public java.sql.Connection org.jdbi.v3.core.Handle.getConnection()",
            "method_name_cc": "public Connection org.jdbi.v3.core.Handle.getConnection()",
            "file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_method_cc": "public Connection org.jdbi.v3.core.Handle.getConnection()",
            "previous_method_pd": "public java.sql.Connection org.jdbi.v3.core.Handle.getConnection()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/Handle.java",
            "previous_commit": "68c5edb7c0bc33aa99ecd4827a98b873e68a4ca0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.7000799405019946,
                "p_value": 0.8034625743147712,
                "effect_size": 0.057777777777777775,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 15,
                    "after": 15
                }
            }
        }
    ],
    "a8daa89c784dca865a92ee20d2747cda625be326": [
        {
            "commit_message": "OptionalMapperFactory: specialize created OptionalMappers so they don't lookup the mapper every row\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "public java.util.Optional org.jdbi.v3.core.mapper.OptionalMapperFactory.build(java.lang.reflect.Type,org.jdbi.v3.core.config.ConfigRegistry)",
            "method_name_cc": "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.OptionalMapperFactory.build(Type type, ConfigRegistry config)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/OptionalMapperFactory.java",
            "previous_method_cc": "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.OptionalMapperFactory.build(Type type, ConfigRegistry config)",
            "previous_method_pd": "public java.util.Optional org.jdbi.v3.core.mapper.OptionalMapperFactory.build(java.lang.reflect.Type,org.jdbi.v3.core.config.ConfigRegistry)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/OptionalMapperFactory.java",
            "previous_commit": "9de046f425e0fe0e1c0b6242d24717003632e6cd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 3.938172043010753,
                "p_value": 0.0,
                "effect_size": -0.4406206385408059,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1067222,
                    "after": 1006117
                }
            }
        }
    ],
    "cbb1910461481b9538bc613de68c129f90781473": [
        {
            "commit_message": "suppress exception if Statement close method raises\n",
            "benchmark": "org.jdbi.v3.core.EnumBenchmark.mapEnumCaseInsensitive",
            "method_name_pd": "public static org.jdbi.v3.core.result.ResultProducer org.jdbi.v3.core.result.ResultProducers.returningUpdateCount()",
            "method_name_cc": "public static ResultProducer<Integer> org.jdbi.v3.core.result.ResultProducers.returningUpdateCount()",
            "file": "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java",
            "previous_method_cc": "public static ResultProducer<Integer> org.jdbi.v3.core.result.ResultProducers.returningUpdateCount()",
            "previous_method_pd": "public static org.jdbi.v3.core.result.ResultProducer org.jdbi.v3.core.result.ResultProducers.returningUpdateCount()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java",
            "previous_commit": "ffd756adc63d5178bdc2b6084fccd969f26b23b4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.143027050105212,
                "p_value": 7.75417651710804e-05,
                "effect_size": -0.042716425170619535,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5685,
                    "after": 5728
                }
            }
        }
    ],
    "a53d152527e7faa4e91553a0625235024b2da862": [
        {
            "commit_message": "Fix GenericType resolution in parameterized classes\n\nPort the code from geantryref.TypeToken#extractType for classes passed\ninto GenericType.\n\nFixes #2305\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.neq1To0",
            "method_name_pd": "public static java.util.Optional org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(java.lang.reflect.Type,java.lang.Class,int)",
            "method_name_cc": "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)",
            "file": "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java",
            "previous_method_cc": "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)",
            "previous_method_pd": "public static java.util.Optional org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(java.lang.reflect.Type,java.lang.Class,int)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java",
            "previous_commit": "118c1cce647dc717961ac66392f0ea8f77cc1eb9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -9.832040188013423,
                "p_value": 0.14999297257278157,
                "effect_size": 0.2839506172839506,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 18,
                    "after": 18
                }
            }
        }
    ],
    "d9cb04e81cb1feac3a676b1da829e3f95df8a029": [
        {
            "commit_message": "PreparedBatch: test and fix nested non-prepareable arguments\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiBean",
            "method_name_pd": "java.util.function.Function org.jdbi.v3.core.statement.PreparedBatch.buildArgument(org.jdbi.v3.core.qualifier.QualifiedType)",
            "method_name_cc": "Function<Object, Argument> org.jdbi.v3.core.statement.PreparedBatch.buildArgument(QualifiedType<?> type)",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "Function<Object, Argument> org.jdbi.v3.core.statement.PreparedBatch.buildArgument(QualifiedType<?> type)",
            "previous_method_pd": "java.util.function.Function org.jdbi.v3.core.statement.PreparedBatch.buildArgument(org.jdbi.v3.core.qualifier.QualifiedType)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "a4848d506b4979bc07effbd14b49c82aa93df0d1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -33.148608451163355,
                "p_value": 1.7926714531296117e-35,
                "effect_size": 0.1658834927595835,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3510,
                    "after": 4011
                }
            }
        }
    ],
    "b241bd338fc9ee981dd2dde890fe4e1266155a91": [
        {
            "commit_message": "style fix\n",
            "benchmark": "org.jdbi.v3.benchmark.BeanBindingBenchmark.batchJdbiMap",
            "method_name_pd": "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()",
            "method_name_cc": "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()",
            "file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_method_cc": "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()",
            "previous_method_pd": "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java",
            "previous_commit": "87a6b20b5ec7d0c17a266ab60e40064133d9c772",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -0.5375978023097256,
                "p_value": 4.5846672409167294e-06,
                "effect_size": 0.24347348659275264,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 259,
                    "after": 218
                }
            }
        }
    ],
    "37f4bcce158acc4472dbefdaf0220068da0018f1": [
        {
            "commit_message": "fix #1270: forbid nulls for primitives\n\n\n\n",
            "benchmark": "org.jdbi.v3.benchmark.QualifiersBenchmark.mapQualifiedBean",
            "method_name_pd": "private static org.jdbi.v3.core.mapper.ColumnMapper org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(org.jdbi.v3.core.mapper.ColumnGetter)",
            "method_name_cc": "private static <T> ColumnMapper<T> org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(ColumnGetter<T> getter)",
            "file": "core/src/main/java/org/jdbi/v3/core/mapper/PrimitiveMapperFactory.java",
            "previous_method_cc": "private static <T> ColumnMapper<T> org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(ColumnGetter<T> getter)",
            "previous_method_pd": "private static org.jdbi.v3.core.mapper.ColumnMapper org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(org.jdbi.v3.core.mapper.ColumnGetter)",
            "previous_file": "core/src/main/java/org/jdbi/v3/core/mapper/PrimitiveMapperFactory.java",
            "previous_commit": "731356ca3d58ed8782c6290f785555fd74aad787",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.38259206121472983,
                "p_value": 1.0907685683855162e-05,
                "effect_size": 0.0017048643250834302,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3802167,
                    "after": 5326787
                }
            }
        }
    ]
}