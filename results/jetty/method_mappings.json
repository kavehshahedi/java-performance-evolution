{
    "9a14de058da715f2d08c2bff58b548a39045ea85": [
        {
            "commit_message": "Fix #6860 IPv6 Format (#6861) (#6885)\n\nFix #6860 IPv6 format by adding an extensible HttpChannel method\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\nCo-authored-by: Lachlan Roberts <lachlan@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "public static java.lang.String org.eclipse.jetty.util.HostPort.normalizeHost(java.lang.String)",
            "method_name_cc": "public static String org.eclipse.jetty.util.HostPort.normalizeHost(String host)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/HostPort.java",
            "previous_method_cc": "public static String org.eclipse.jetty.util.HostPort.normalizeHost(String host)",
            "previous_method_pd": "public static java.lang.String org.eclipse.jetty.util.HostPort.normalizeHost(java.lang.String)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/HostPort.java",
            "previous_commit": "f12c5b668cb16816db126a4674ad4b1ee79e3421",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.2608243420810803,
                "p_value": 0.8766349003139949,
                "effect_size": -0.024444444444444446,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 30,
                    "after": 30
                }
            }
        }
    ],
    "5a24f900644f62b5746bbd05cfef7418df7bfbf0": [
        {
            "commit_message": "Improve cleanup of deflater/inflater pools for PerMessageDeflateExtension\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "protected void org.eclipse.jetty.util.compression.CompressionPool.doStart() throws java.lang.Exception",
            "method_name_cc": "protected void org.eclipse.jetty.util.compression.CompressionPool<T>.doStart()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_method_cc": "protected void org.eclipse.jetty.util.compression.CompressionPool<T>.doStart()",
            "previous_method_pd": "protected void org.eclipse.jetty.util.compression.CompressionPool.doStart() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_commit": "c34483e52b04e310d541765a2d14995831477b3c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.681814231310286,
                "p_value": 1.0,
                "effect_size": 0.0,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 10,
                    "after": 12
                }
            }
        },
        {
            "commit_message": "Improve cleanup of deflater/inflater pools for PerMessageDeflateExtension\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public void org.eclipse.jetty.util.compression.CompressionPool.doStop() throws java.lang.Exception",
            "method_name_cc": "public void org.eclipse.jetty.util.compression.CompressionPool<T>.doStop()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.compression.CompressionPool<T>.doStop()",
            "previous_method_pd": "public void org.eclipse.jetty.util.compression.CompressionPool.doStop() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_commit": "c34483e52b04e310d541765a2d14995831477b3c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 28.72189998202719,
                "p_value": 0.00014348670002530618,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 9,
                    "after": 12
                }
            }
        }
    ],
    "385d943b0c29445da704763da7d107325b3d99d2": [
        {
            "commit_message": "Fix #12104 Empty Connection Header\n\nFix #12104 by better handling of `close` and `keep-alive` values in the HttpGenerator, so that we never add an empty field.\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "private void org.eclipse.jetty.http.HttpGenerator.generateHeaders(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean)",
            "method_name_cc": "private void org.eclipse.jetty.http.HttpGenerator.generateHeaders(ByteBuffer header, ByteBuffer content, boolean last)",
            "file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java",
            "previous_method_cc": "private void org.eclipse.jetty.http.HttpGenerator.generateHeaders(ByteBuffer header, ByteBuffer content, boolean last)",
            "previous_method_pd": "private void org.eclipse.jetty.http.HttpGenerator.generateHeaders(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean)",
            "previous_file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java",
            "previous_commit": "58cfe7709fbcea5cbcaa389bfe52f0470a253ad7",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.5742296918767508,
                "p_value": 9.280306008934215e-111,
                "effect_size": -0.015592033618136282,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1365137,
                    "after": 1377407
                }
            }
        }
    ],
    "6188757500f2e27bb03c70b27c2d713e5ae90613": [
        {
            "commit_message": "#11932 fix bug in case of invalid action + add test\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "private void org.eclipse.jetty.util.IteratingCallback.processing()",
            "method_name_cc": "private void org.eclipse.jetty.util.IteratingCallback.processing()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/IteratingCallback.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.IteratingCallback.processing()",
            "previous_method_pd": "private void org.eclipse.jetty.util.IteratingCallback.processing()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/IteratingCallback.java",
            "previous_commit": "bae2e8f9bc17e222bcf8da5ff8c3da2c14a4f68c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.0422084843316988,
                "p_value": 0.0,
                "effect_size": 0.09216656933833121,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1371613,
                    "after": 1439162
                }
            }
        }
    ],
    "57604d09558443dd80346f7bc63980481c2dea3c": [
        {
            "commit_message": "Issue #4572 - Mechanical Change to use org.slf4j\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start() throws java.lang.Exception",
            "method_name_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_method_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start()",
            "previous_method_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_commit": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.4719638073275587,
                "p_value": 0.6777007346481969,
                "effect_size": -0.03111111111111111,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 120,
                    "after": 120
                }
            }
        },
        {
            "commit_message": "Issue #4572 - Mechanical Change to use org.slf4j\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.doStop() throws java.lang.Exception",
            "method_name_cc": "protected void org.eclipse.jetty.osgi.boot.BundleContextProvider.doStop()",
            "file": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/BundleContextProvider.java",
            "previous_method_cc": "protected void org.eclipse.jetty.osgi.boot.BundleContextProvider.doStop()",
            "previous_method_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.doStop() throws java.lang.Exception",
            "previous_file": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/BundleContextProvider.java",
            "previous_commit": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -11.833994763924467,
                "p_value": 0.16935636101210727,
                "effect_size": 0.19327731092436976,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 34,
                    "after": 35
                }
            }
        },
        {
            "commit_message": "Issue #4572 - Mechanical Change to use org.slf4j\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private java.lang.Runnable org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produceTask()",
            "method_name_cc": "private Runnable org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produceTask()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_method_cc": "private Runnable org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produceTask()",
            "previous_method_pd": "private java.lang.Runnable org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.produceTask()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_commit": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.8798543689320388,
                "p_value": 0.0,
                "effect_size": -0.02147366295177053,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7013020,
                    "after": 7031924
                }
            }
        },
        {
            "commit_message": "Issue #4572 - Mechanical Change to use org.slf4j\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.execute(java.lang.Runnable)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.execute(Runnable task)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.execute(Runnable task)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.execute(java.lang.Runnable)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_commit": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.5749544243444117,
                "p_value": 1.3179935098913855e-16,
                "effect_size": 0.005292419525004473,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1612174,
                    "after": 1645367
                }
            }
        },
        {
            "commit_message": "Issue #4572 - Mechanical Change to use org.slf4j\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean wasPending)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean wasPending)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_commit": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.925882696235775,
                "p_value": 9.896463021595515e-139,
                "effect_size": 0.01168752952797952,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3054188,
                    "after": 3082041
                }
            }
        },
        {
            "commit_message": "Issue #4572 - Mechanical Change to use org.slf4j\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(java.lang.Runnable)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(Runnable task)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(Runnable task)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(java.lang.Runnable)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_commit": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.5578717107379525,
                "p_value": 1.3644446479549913e-225,
                "effect_size": -0.021756562242170475,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1455890,
                    "after": 1440310
                }
            }
        },
        {
            "commit_message": "Issue #4572 - Mechanical Change to use org.slf4j\n\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "8b7e64915f9e6d7be6ca69cc1143931e1b35fde2",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.574525124304012,
                "p_value": 0.6548536371937834,
                "effect_size": 0.09210526315789473,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 19,
                    "after": 16
                }
            }
        }
    ],
    "692c01750057ca2cd1a54aaf6b07700364c1a62b": [
        {
            "commit_message": "Fixes #4058 - Review Locker.\n\nRemoves the Locker class, replaced by AutoLock.\nRemoved usages of Locker.isLocked() from the session code\nsince it was not necessary.\nTook the chance to do a little code cleanup.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "method_name_cc": "public void org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produce()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ExecuteProduceConsume.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produce()",
            "previous_method_pd": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ExecuteProduceConsume.java",
            "previous_commit": "103a5065c9864c6ec9a9cb4ea509364311a9318d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.8539141827710448,
                "p_value": 7.27692604518268e-23,
                "effect_size": 0.003803875776590672,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4385066,
                    "after": 4547404
                }
            }
        },
        {
            "commit_message": "Fixes #4058 - Review Locker.\n\nRemoves the Locker class, replaced by AutoLock.\nRemoved usages of Locker.isLocked() from the session code\nsince it was not necessary.\nTook the chance to do a little code cleanup.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public void org.eclipse.jetty.util.thread.strategy.ProduceExecuteConsume.produce()",
            "method_name_cc": "public void org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produce()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ExecuteProduceConsume.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produce()",
            "previous_method_pd": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ExecuteProduceConsume.java",
            "previous_commit": "103a5065c9864c6ec9a9cb4ea509364311a9318d",
            "performance_diff": 0.6162838925390093,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.560104814936128,
                "p_value": 0.0,
                "effect_size": -0.11740598769581082,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4385066,
                    "after": 2119464
                }
            }
        }
    ],
    "6201d3b1072b05d9e683377f5741f467a44089fa": [
        {
            "commit_message": "Non blocking ReservedThreadExecutor (#6535) (#6559)\n\nA call to offer must never block, nor even yield, since to do so give an opportunity for the allocated CPU core to change, defeating the whole purpose of the class.\r\nThere is also some reasonable level of diagnostic warnings if a reserved thread misses too many offers consecutively, based on tracking the state of the reserved thread.\r\n\r\nRemove the stack data structure entirely.  ReservedThreads all poll the same SynchronousQueue and tryExecute does a non blocking offer.\r\n\r\nAdded test for busy shrinking\r\n\r\nRemember last time we hit zero reserved threads\r\n\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ReservedThreadPoolBenchmark.testFew",
            "method_name_pd": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.setIdleTimeout(long,java.util.concurrent.TimeUnit)",
            "method_name_cc": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.setIdleTimeout(long idleTime, TimeUnit idleTimeUnit)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.setIdleTimeout(long idleTime, TimeUnit idleTimeUnit)",
            "previous_method_pd": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.setIdleTimeout(long,java.util.concurrent.TimeUnit)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "d8a890f71ee66b3c0932155ba742f696c44ae434",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -11.961883016498254,
                "p_value": 0.5166025822370435,
                "effect_size": 0.12962962962962962,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 18,
                    "after": 18
                }
            }
        },
        {
            "commit_message": "Non blocking ReservedThreadExecutor (#6535) (#6559)\n\nA call to offer must never block, nor even yield, since to do so give an opportunity for the allocated CPU core to change, defeating the whole purpose of the class.\r\nThere is also some reasonable level of diagnostic warnings if a reserved thread misses too many offers consecutively, based on tracking the state of the reserved thread.\r\n\r\nRemove the stack data structure entirely.  ReservedThreads all poll the same SynchronousQueue and tryExecute does a non blocking offer.\r\n\r\nAdded test for busy shrinking\r\n\r\nRemember last time we hit zero reserved threads\r\n\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ReservedThreadPoolBenchmark.testFew",
            "method_name_pd": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.doStart() throws java.lang.Exception",
            "method_name_cc": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.doStart()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.doStart()",
            "previous_method_pd": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.doStart() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "d8a890f71ee66b3c0932155ba742f696c44ae434",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 10.56942487081404,
                "p_value": 0.9369558676699575,
                "effect_size": 0.018518518518518517,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 18,
                    "after": 18
                }
            }
        },
        {
            "commit_message": "Non blocking ReservedThreadExecutor (#6535) (#6559)\n\nA call to offer must never block, nor even yield, since to do so give an opportunity for the allocated CPU core to change, defeating the whole purpose of the class.\r\nThere is also some reasonable level of diagnostic warnings if a reserved thread misses too many offers consecutively, based on tracking the state of the reserved thread.\r\n\r\nRemove the stack data structure entirely.  ReservedThreads all poll the same SynchronousQueue and tryExecute does a non blocking offer.\r\n\r\nAdded test for busy shrinking\r\n\r\nRemember last time we hit zero reserved threads\r\n\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ReservedThreadPoolBenchmark.testFew",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "d8a890f71ee66b3c0932155ba742f696c44ae434",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.44782803403493054,
                "p_value": 1.1713992340496308e-78,
                "effect_size": 0.024117288737738145,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 413828,
                    "after": 394820
                }
            }
        },
        {
            "commit_message": "Non blocking ReservedThreadExecutor (#6535) (#6559)\n\nA call to offer must never block, nor even yield, since to do so give an opportunity for the allocated CPU core to change, defeating the whole purpose of the class.\r\nThere is also some reasonable level of diagnostic warnings if a reserved thread misses too many offers consecutively, based on tracking the state of the reserved thread.\r\n\r\nRemove the stack data structure entirely.  ReservedThreads all poll the same SynchronousQueue and tryExecute does a non blocking offer.\r\n\r\nAdded test for busy shrinking\r\n\r\nRemember last time we hit zero reserved threads\r\n\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ReservedThreadPoolBenchmark.testFew",
            "method_name_pd": "public boolean org.eclipse.jetty.util.thread.ReservedThreadExecutor.tryExecute(java.lang.Runnable)",
            "method_name_cc": "public boolean org.eclipse.jetty.util.thread.ReservedThreadExecutor.tryExecute(Runnable task)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "public boolean org.eclipse.jetty.util.thread.ReservedThreadExecutor.tryExecute(Runnable task)",
            "previous_method_pd": "public boolean org.eclipse.jetty.util.thread.ReservedThreadExecutor.tryExecute(java.lang.Runnable)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "d8a890f71ee66b3c0932155ba742f696c44ae434",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.16963528413910092,
                "p_value": 1.1953754774472609e-71,
                "effect_size": 0.009461968612784333,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2402745,
                    "after": 2368887
                }
            }
        },
        {
            "commit_message": "Non blocking ReservedThreadExecutor (#6535) (#6559)\n\nA call to offer must never block, nor even yield, since to do so give an opportunity for the allocated CPU core to change, defeating the whole purpose of the class.\r\nThere is also some reasonable level of diagnostic warnings if a reserved thread misses too many offers consecutively, based on tracking the state of the reserved thread.\r\n\r\nRemove the stack data structure entirely.  ReservedThreads all poll the same SynchronousQueue and tryExecute does a non blocking offer.\r\n\r\nAdded test for busy shrinking\r\n\r\nRemember last time we hit zero reserved threads\r\n\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ReservedThreadPoolBenchmark.testFew",
            "method_name_pd": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.doStop() throws java.lang.Exception",
            "method_name_cc": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.doStop()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.doStop()",
            "previous_method_pd": "public void org.eclipse.jetty.util.thread.ReservedThreadExecutor.doStop() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "d8a890f71ee66b3c0932155ba742f696c44ae434",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 29.320605225039703,
                "p_value": 0.05976860866093005,
                "effect_size": -0.37037037037037035,
                "effect_size_interpretation": "medium",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 18,
                    "after": 18
                }
            }
        }
    ],
    "fc9cbda52f6173df73ffe28db8e4cbef0e711932": [
        {
            "commit_message": "Improved handling of 100 Continue (#12113)\n\n* Now `HttpClient` removed the `Expect` header if there is no request content.\r\n* Changed AbstractProxyServlet and ProxyHandler check for request content: now the Content-Type header is not taken into consideration.\r\n* Now the server avoids sending the 100 Continue response if there is no request content.\r\n* Now the request body is not defaulted if missing, but just kept null.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public static boolean org.eclipse.jetty.util.StringUtil.isBlank(java.lang.String)",
            "method_name_cc": "public static boolean org.eclipse.jetty.util.StringUtil.isBlank(String str)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java",
            "previous_method_cc": "public static boolean org.eclipse.jetty.util.StringUtil.isBlank(String str)",
            "previous_method_pd": "public static boolean org.eclipse.jetty.util.StringUtil.isBlank(java.lang.String)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java",
            "previous_commit": "8277051776bcb55d852a7b1dfb9b68584283ad2b",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -99.19744821288916,
                "p_value": 2.691729148386271e-25,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 36,
                    "after": 1341338
                }
            }
        },
        {
            "commit_message": "Improved handling of 100 Continue (#12113)\n\n* Now `HttpClient` removed the `Expect` header if there is no request content.\r\n* Changed AbstractProxyServlet and ProxyHandler check for request content: now the Content-Type header is not taken into consideration.\r\n* Now the server avoids sending the 100 Continue response if there is no request content.\r\n* Now the request body is not defaulted if missing, but just kept null.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public static boolean org.eclipse.jetty.util.StringUtil.isNotBlank(java.lang.String)",
            "method_name_cc": "public static boolean org.eclipse.jetty.util.StringUtil.isNotBlank(String str)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java",
            "previous_method_cc": "public static boolean org.eclipse.jetty.util.StringUtil.isNotBlank(String str)",
            "previous_method_pd": "public static boolean org.eclipse.jetty.util.StringUtil.isNotBlank(java.lang.String)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java",
            "previous_commit": "8277051776bcb55d852a7b1dfb9b68584283ad2b",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 27.983980547808052,
                "p_value": 0.0,
                "effect_size": -0.7882107157644208,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1339772,
                    "after": 1308006
                }
            }
        }
    ],
    "750584bc853d9ba300f8d3fb2433158f0968ebbf": [
        {
            "commit_message": "Experiment with ArrayByteBufferPool performance (#11426)\n\n* Experiment with ArrayByteBufferPool\r\n\r\nNo overall size accounting\r\nreserved buffer release always checks max memory\r\nreleased buffers check max memory 1% of the time.\r\nonly a single thread can check memory at once.\r\nsingle pass through buckets so no looping forever.\r\n\r\n* Experiment with ArrayByteBufferPool\r\n\r\nupdates from review\r\n\r\n* JMH updates\r\n\r\n* updates from review\r\n\r\n* Fixed comments.\r\nFixed call to recordEvict().\r\nRemoved unused methods.\r\nMethod getAvailable*Memory() no longer JMX-enabled, as they are the same as get*Memory().\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.io.jmh.ArrayByteBufferPoolBenchmark.inputFixedCapacityOutputRandomCapacityMigrating",
            "method_name_pd": "private long org.eclipse.jetty.io.ArrayByteBufferPool.getMemory(boolean)",
            "method_name_cc": "private long org.eclipse.jetty.io.ArrayByteBufferPool.getMemory(boolean direct)",
            "file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "private long org.eclipse.jetty.io.ArrayByteBufferPool.getMemory(boolean direct)",
            "previous_method_pd": "private long org.eclipse.jetty.io.ArrayByteBufferPool.getMemory(boolean)",
            "previous_file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "509ede1d8587372dbbd8acf9ee4a2145269bd6c4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -60.09146341463415,
                "p_value": 9.216672737015683e-09,
                "effect_size": 1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 11,
                    "after": 1063548
                }
            }
        },
        {
            "commit_message": "Experiment with ArrayByteBufferPool performance (#11426)\n\n* Experiment with ArrayByteBufferPool\r\n\r\nNo overall size accounting\r\nreserved buffer release always checks max memory\r\nreleased buffers check max memory 1% of the time.\r\nonly a single thread can check memory at once.\r\nsingle pass through buckets so no looping forever.\r\n\r\n* Experiment with ArrayByteBufferPool\r\n\r\nupdates from review\r\n\r\n* JMH updates\r\n\r\n* updates from review\r\n\r\n* Fixed comments.\r\nFixed call to recordEvict().\r\nRemoved unused methods.\r\nMethod getAvailable*Memory() no longer JMX-enabled, as they are the same as get*Memory().\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.io.jmh.ArrayByteBufferPoolBenchmark.inputFixedCapacityOutputRandomCapacityMigrating",
            "method_name_pd": "private void org.eclipse.jetty.io.ArrayByteBufferPool.reserve(org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket,org.eclipse.jetty.io.RetainableByteBuffer)",
            "method_name_cc": "private void org.eclipse.jetty.io.ArrayByteBufferPool.reserve(RetainedBucket bucket, RetainableByteBuffer buffer)",
            "file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "private void org.eclipse.jetty.io.ArrayByteBufferPool.reserve(RetainedBucket bucket, RetainableByteBuffer buffer)",
            "previous_method_pd": "private void org.eclipse.jetty.io.ArrayByteBufferPool.reserve(org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket,org.eclipse.jetty.io.RetainableByteBuffer)",
            "previous_file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "509ede1d8587372dbbd8acf9ee4a2145269bd6c4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 66.75868590427966,
                "p_value": 2.0301939844858426e-15,
                "effect_size": -0.9409722222222222,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 48,
                    "after": 48
                }
            }
        },
        {
            "commit_message": "Experiment with ArrayByteBufferPool performance (#11426)\n\n* Experiment with ArrayByteBufferPool\r\n\r\nNo overall size accounting\r\nreserved buffer release always checks max memory\r\nreleased buffers check max memory 1% of the time.\r\nonly a single thread can check memory at once.\r\nsingle pass through buckets so no looping forever.\r\n\r\n* Experiment with ArrayByteBufferPool\r\n\r\nupdates from review\r\n\r\n* JMH updates\r\n\r\n* updates from review\r\n\r\n* Fixed comments.\r\nFixed call to recordEvict().\r\nRemoved unused methods.\r\nMethod getAvailable*Memory() no longer JMX-enabled, as they are the same as get*Memory().\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.io.jmh.ArrayByteBufferPoolBenchmark.inputFixedCapacityOutputRandomCapacityMigrating",
            "method_name_pd": "private void org.eclipse.jetty.io.ArrayByteBufferPool.release(org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket,org.eclipse.jetty.util.Pool$Entry)",
            "method_name_cc": "private void org.eclipse.jetty.io.ArrayByteBufferPool.release(RetainedBucket bucket, Pool.Entry<RetainableByteBuffer> entry)",
            "file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "private void org.eclipse.jetty.io.ArrayByteBufferPool.release(RetainedBucket bucket, Pool.Entry<RetainableByteBuffer> entry)",
            "previous_method_pd": "private void org.eclipse.jetty.io.ArrayByteBufferPool.release(org.eclipse.jetty.io.ArrayByteBufferPool$RetainedBucket,org.eclipse.jetty.util.Pool$Entry)",
            "previous_file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "509ede1d8587372dbbd8acf9ee4a2145269bd6c4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.0,
                "p_value": 7.63778687631635e-128,
                "effect_size": 0.00183923384325843,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 116443733,
                    "after": 111701632
                }
            }
        }
    ],
    "a089fbf3ea41320a7906c0759f7d72e0db97c20f": [
        {
            "commit_message": "Fixes #9778 - Jetty 12 - Remove WriteFlusher.Listener. (#11839)\n\n* Fixes #9778 - Jetty 12 - Remove WriteFlusher.Listener.\r\n\r\nThis listener is not necessary anymore, as the min data rate checks have been moved to a StatisticsHandler.MinimumDataRateHandler.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "protected java.nio.ByteBuffer[] org.eclipse.jetty.io.WriteFlusher.flush(java.net.SocketAddress,java.nio.ByteBuffer[]) throws java.io.IOException",
            "method_name_cc": "protected ByteBuffer[] org.eclipse.jetty.io.WriteFlusher.flush(SocketAddress address, ByteBuffer[] buffers)",
            "file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/WriteFlusher.java",
            "previous_method_cc": "protected ByteBuffer[] org.eclipse.jetty.io.WriteFlusher.flush(SocketAddress address, ByteBuffer[] buffers)",
            "previous_method_pd": "protected java.nio.ByteBuffer[] org.eclipse.jetty.io.WriteFlusher.flush(java.net.SocketAddress,java.nio.ByteBuffer[]) throws java.io.IOException",
            "previous_file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/WriteFlusher.java",
            "previous_commit": "bc03176224569a845b900e9283093fc387daf337",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.1922337562475971,
                "p_value": 7.682834951806006e-14,
                "effect_size": -0.005212389249659875,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1387198,
                    "after": 1355760
                }
            }
        }
    ],
    "b4483d3b2a42e858bf783eb92a602711f26e192c": [
        {
            "commit_message": "fix ArithmeticException \"/ by zero\"\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.Pool.acquire()",
            "method_name_cc": "public Entry org.eclipse.jetty.util.Pool<T>.acquire()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_method_cc": "public Entry org.eclipse.jetty.util.Pool<T>.acquire()",
            "previous_method_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.Pool.acquire()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_commit": "741ad918e41cad3541faf916c6aeab09b79be251",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 6.664530599166933,
                "p_value": 0.0,
                "effect_size": -0.039673366224622496,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6561154,
                    "after": 6082966
                }
            }
        }
    ],
    "4a6c2744a0d4ff404daee0a521e88ae386356e06": [
        {
            "commit_message": "Grow request queue instead of pre-allocating it\n\nTo avoid excess allocation, in particular for higher values of\n`MaxRequestsQueuedPerDestination`, the per-destination request queue is\nnow initialized with a capacity of 32 entries and configured to grow 32\nentries at a time until the maximum is reached.\n\nResolves #8319.\n",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "protected java.util.Queue org.eclipse.jetty.client.HttpDestination.newExchangeQueue(org.eclipse.jetty.client.HttpClient)",
            "method_name_cc": "protected Queue<HttpExchange> org.eclipse.jetty.client.HttpDestination.newExchangeQueue(HttpClient client)",
            "file": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java",
            "previous_method_cc": "protected Queue<HttpExchange> org.eclipse.jetty.client.HttpDestination.newExchangeQueue(HttpClient client)",
            "previous_method_pd": "protected java.util.Queue org.eclipse.jetty.client.HttpDestination.newExchangeQueue(org.eclipse.jetty.client.HttpClient)",
            "previous_file": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpDestination.java",
            "previous_commit": "eb6ff577ae5a7168f7f31d3c59febc3499b5c3a8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.1362392339631255,
                "p_value": 0.38373262766250305,
                "effect_size": 0.19111111111111112,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 15,
                    "after": 15
                }
            }
        }
    ],
    "77ad0189ba10e7080646cc4fcf2b04b15d6004bc": [
        {
            "commit_message": "Fixes #8532 - Review System.nanoTime() usages. (#8535)\n\n* Fixes #8532 - Review System.nanoTime() usages.\r\n\r\nIntroduced o.e.j.util.NanoTime class to deal with nanoTimes.\r\n\r\nNow NanoTime.now() should be used instead of System.nanoTime(),\r\nand various <unit>[elapsed|since|until]() methods to calculate nanoTimes.\r\n\r\nFurthermore, comparing 2 nanoTimes should be done via isBefore(),\r\nrather than using the < operator, which is wrong as specified in\r\nthe System.nanoTime() javadocs.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ReservedThreadPoolBenchmark.testFew",
            "method_name_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.startThread()",
            "method_name_cc": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.startThread()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java",
            "previous_method_cc": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.startThread()",
            "previous_method_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.startThread()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java",
            "previous_commit": "df2826f0c3b84328e619341d82aae36ac1de55b0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -10.846755423144959,
                "p_value": 0.005979080828722522,
                "effect_size": 0.2864949258391881,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 61,
                    "after": 63
                }
            }
        },
        {
            "commit_message": "Fixes #8532 - Review System.nanoTime() usages. (#8535)\n\n* Fixes #8532 - Review System.nanoTime() usages.\r\n\r\nIntroduced o.e.j.util.NanoTime class to deal with nanoTimes.\r\n\r\nNow NanoTime.now() should be used instead of System.nanoTime(),\r\nand various <unit>[elapsed|since|until]() methods to calculate nanoTimes.\r\n\r\nFurthermore, comparing 2 nanoTimes should be done via isBefore(),\r\nrather than using the < operator, which is wrong as specified in\r\nthe System.nanoTime() javadocs.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ReservedThreadPoolBenchmark.testFew",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "df2826f0c3b84328e619341d82aae36ac1de55b0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.6917972610475787,
                "p_value": 8.806610722413285e-63,
                "effect_size": -0.018827607009217106,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 518462,
                    "after": 533756
                }
            }
        },
        {
            "commit_message": "Fixes #8532 - Review System.nanoTime() usages. (#8535)\n\n* Fixes #8532 - Review System.nanoTime() usages.\r\n\r\nIntroduced o.e.j.util.NanoTime class to deal with nanoTimes.\r\n\r\nNow NanoTime.now() should be used instead of System.nanoTime(),\r\nand various <unit>[elapsed|since|until]() methods to calculate nanoTimes.\r\n\r\nFurthermore, comparing 2 nanoTimes should be done via isBefore(),\r\nrather than using the < operator, which is wrong as specified in\r\nthe System.nanoTime() javadocs.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ReservedThreadPoolBenchmark.testFew",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.QueuedThreadPool.joinThreads(long) throws java.lang.InterruptedException",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.QueuedThreadPool.joinThreads(long stopByNanos)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.QueuedThreadPool.joinThreads(long stopByNanos)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.QueuedThreadPool.joinThreads(long) throws java.lang.InterruptedException",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java",
            "previous_commit": "df2826f0c3b84328e619341d82aae36ac1de55b0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 54.24652883108787,
                "p_value": 0.692486835516168,
                "effect_size": -0.08024691358024691,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 18,
                    "after": 18
                }
            }
        }
    ],
    "e80063112045ed95263a3c00e0a18d671e04d833": [
        {
            "commit_message": "Weak reference concurrent pool (#10787)\n\n* The Pool is now a list of Holder instances, each with a WeakReference and a strong reference to an Entry.\r\n* Removed thread-local cache from Pool.\r\n* Avoid using deprecated ConcurrentPool constructors.\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "protected void org.eclipse.jetty.util.compression.CompressionPool.doStart() throws java.lang.Exception",
            "method_name_cc": "protected void org.eclipse.jetty.util.compression.CompressionPool<T>.doStart()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_method_cc": "protected void org.eclipse.jetty.util.compression.CompressionPool<T>.doStart()",
            "previous_method_pd": "protected void org.eclipse.jetty.util.compression.CompressionPool.doStart() throws java.lang.Exception",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_commit": "67c5fbcd60a9d3843f024b60f8edd1e12a359e29",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.133212878534506,
                "p_value": 0.6231762238821174,
                "effect_size": -0.14,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 10,
                    "after": 10
                }
            }
        },
        {
            "commit_message": "Weak reference concurrent pool (#10787)\n\n* The Pool is now a list of Holder instances, each with a WeakReference and a strong reference to an Entry.\r\n* Removed thread-local cache from Pool.\r\n* Avoid using deprecated ConcurrentPool constructors.\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.ConcurrentPool.acquire()",
            "method_name_cc": "public Entry<P> org.eclipse.jetty.util.ConcurrentPool<P>.acquire()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_method_cc": "public Entry<P> org.eclipse.jetty.util.ConcurrentPool<P>.acquire()",
            "previous_method_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.ConcurrentPool.acquire()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_commit": "67c5fbcd60a9d3843f024b60f8edd1e12a359e29",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.860775588048315,
                "p_value": 0.0,
                "effect_size": -0.019086360316875002,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4705396,
                    "after": 4547868
                }
            }
        },
        {
            "commit_message": "Weak reference concurrent pool (#10787)\n\n* The Pool is now a list of Holder instances, each with a WeakReference and a strong reference to an Entry.\r\n* Removed thread-local cache from Pool.\r\n* Avoid using deprecated ConcurrentPool constructors.\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.ConcurrentPool.reserve()",
            "method_name_cc": "public Entry<P> org.eclipse.jetty.util.ConcurrentPool<P>.reserve()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_method_cc": "public Entry<P> org.eclipse.jetty.util.ConcurrentPool<P>.reserve()",
            "previous_method_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.ConcurrentPool.reserve()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_commit": "67c5fbcd60a9d3843f024b60f8edd1e12a359e29",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 5.932906181422474,
                "p_value": 5.319220225917509e-06,
                "effect_size": -0.5425531914893617,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 48,
                    "after": 47
                }
            }
        },
        {
            "commit_message": "Weak reference concurrent pool (#10787)\n\n* The Pool is now a list of Holder instances, each with a WeakReference and a strong reference to an Entry.\r\n* Removed thread-local cache from Pool.\r\n* Avoid using deprecated ConcurrentPool constructors.\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "private boolean org.eclipse.jetty.util.ConcurrentPool.release(org.eclipse.jetty.util.Pool$Entry)",
            "method_name_cc": "private boolean org.eclipse.jetty.util.ConcurrentPool<P>.release(Entry<P> entry)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_method_cc": "private boolean org.eclipse.jetty.util.ConcurrentPool<P>.release(Entry<P> entry)",
            "previous_method_pd": "private boolean org.eclipse.jetty.util.ConcurrentPool.release(org.eclipse.jetty.util.Pool$Entry)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_commit": "67c5fbcd60a9d3843f024b60f8edd1e12a359e29",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.4302059496567507,
                "p_value": 1.250760955016439e-274,
                "effect_size": -0.013468153515340751,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4683594,
                    "after": 4534852
                }
            }
        },
        {
            "commit_message": "Weak reference concurrent pool (#10787)\n\n* The Pool is now a list of Holder instances, each with a WeakReference and a strong reference to an Entry.\r\n* Removed thread-local cache from Pool.\r\n* Avoid using deprecated ConcurrentPool constructors.\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "private boolean org.eclipse.jetty.util.ConcurrentPool.terminate(org.eclipse.jetty.util.Pool$Entry)",
            "method_name_cc": "private boolean org.eclipse.jetty.util.ConcurrentPool<P>.terminate(Entry<P> entry)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_method_cc": "private boolean org.eclipse.jetty.util.ConcurrentPool<P>.terminate(Entry<P> entry)",
            "previous_method_pd": "private boolean org.eclipse.jetty.util.ConcurrentPool.terminate(org.eclipse.jetty.util.Pool$Entry)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_commit": "67c5fbcd60a9d3843f024b60f8edd1e12a359e29",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -9.51048951048951,
                "p_value": 0.12421319079078692,
                "effect_size": 0.21141975308641975,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 36,
                    "after": 36
                }
            }
        }
    ],
    "5dc024298672b227c720961440c2b1787535714f": [
        {
            "commit_message": "Issue #5287 - Changes from review & fix broken tests from NPE\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.compression.CompressionPool$Entry org.eclipse.jetty.util.compression.CompressionPool.acquire()",
            "method_name_cc": "public Entry org.eclipse.jetty.util.compression.CompressionPool<T>.acquire()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_method_cc": "public Entry org.eclipse.jetty.util.compression.CompressionPool<T>.acquire()",
            "previous_method_pd": "public org.eclipse.jetty.util.compression.CompressionPool$Entry org.eclipse.jetty.util.compression.CompressionPool.acquire()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_commit": "d241c6694be97614f040ec9d0f8c8b34b0247d23",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.5820989401515866,
                "p_value": 5.9357263833112285e-77,
                "effect_size": -0.015146161244181945,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1044697,
                    "after": 962327
                }
            }
        }
    ],
    "551710e9bbb1a917dea38c4bcfde3ab08455a1e6": [
        {
            "commit_message": "Improve shutdown of non-persistent HTTP/1 connections #12212 (#12216)\n\n* Improve shutdown of non-persistent HTTP/1 connections\r\n\r\n + shutdown in SendCallback\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "void org.eclipse.jetty.server.internal.HttpConnection.releaseRequestBuffer()",
            "method_name_cc": "void org.eclipse.jetty.server.internal.HttpConnection.releaseRequestBuffer()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "void org.eclipse.jetty.server.internal.HttpConnection.releaseRequestBuffer()",
            "previous_method_pd": "void org.eclipse.jetty.server.internal.HttpConnection.releaseRequestBuffer()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "5439f17ff6dc161bb92aae6071580b569b8f4383",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.7921146953405016,
                "p_value": 2.888275601181497e-199,
                "effect_size": -0.014376793391809752,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2957603,
                    "after": 2894254
                }
            }
        },
        {
            "commit_message": "Improve shutdown of non-persistent HTTP/1 connections #12212 (#12216)\n\n* Improve shutdown of non-persistent HTTP/1 connections\r\n\r\n + shutdown in SendCallback\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "5439f17ff6dc161bb92aae6071580b569b8f4383",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.5016482728966604,
                "p_value": 1.0895271815577155e-23,
                "effect_size": -0.0075111171034264795,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1169070,
                    "after": 1210727
                }
            }
        },
        {
            "commit_message": "Improve shutdown of non-persistent HTTP/1 connections #12212 (#12216)\n\n* Improve shutdown of non-persistent HTTP/1 connections\r\n\r\n + shutdown in SendCallback\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpChannelState$HandlerInvoker.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "5439f17ff6dc161bb92aae6071580b569b8f4383",
            "performance_diff": 0.6720369113070235,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -78.17113372509674,
                "p_value": 0.0,
                "effect_size": 0.999991629130809,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1169070,
                    "after": 1411441
                }
            }
        },
        {
            "commit_message": "Improve shutdown of non-persistent HTTP/1 connections #12212 (#12216)\n\n* Improve shutdown of non-persistent HTTP/1 connections\r\n\r\n + shutdown in SendCallback\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpChannelState$ChannelCallback.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "5439f17ff6dc161bb92aae6071580b569b8f4383",
            "performance_diff": -3.8813494216963402,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 780.1920596244804,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1169070,
                    "after": 1368245
                }
            }
        },
        {
            "commit_message": "Improve shutdown of non-persistent HTTP/1 connections #12212 (#12216)\n\n* Improve shutdown of non-persistent HTTP/1 connections\r\n\r\n + shutdown in SendCallback\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpChannelState$ChannelResponse.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "5439f17ff6dc161bb92aae6071580b569b8f4383",
            "performance_diff": -0.06827881554227355,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -8.34169413788161,
                "p_value": 0.0,
                "effect_size": 0.07219588371699888,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1169070,
                    "after": 1415754
                }
            }
        },
        {
            "commit_message": "Improve shutdown of non-persistent HTTP/1 connections #12212 (#12216)\n\n* Improve shutdown of non-persistent HTTP/1 connections\r\n\r\n + shutdown in SendCallback\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpConnection$HttpStreamOverHTTP1.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "5439f17ff6dc161bb92aae6071580b569b8f4383",
            "performance_diff": 0.6293012082894801,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -75.26157374229612,
                "p_value": 0.0,
                "effect_size": 0.999518770621068,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1169070,
                    "after": 1357954
                }
            }
        },
        {
            "commit_message": "Improve shutdown of non-persistent HTTP/1 connections #12212 (#12216)\n\n* Improve shutdown of non-persistent HTTP/1 connections\r\n\r\n + shutdown in SendCallback\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpConnection.onFillable()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.onFillable()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.onFillable()",
            "previous_method_pd": "public void org.eclipse.jetty.server.internal.HttpConnection.onFillable()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "5439f17ff6dc161bb92aae6071580b569b8f4383",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.0561714331467502,
                "p_value": 0.0,
                "effect_size": 0.052811484532792635,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1435500,
                    "after": 1385534
                }
            }
        },
        {
            "commit_message": "Improve shutdown of non-persistent HTTP/1 connections #12212 (#12216)\n\n* Improve shutdown of non-persistent HTTP/1 connections\r\n\r\n + shutdown in SendCallback\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "5439f17ff6dc161bb92aae6071580b569b8f4383",
            "performance_diff": -4.011332765675758,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 2146.3093019922603,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1169070,
                    "after": 1385996
                }
            }
        }
    ],
    "c55363d43f6a2e0c9e20c16c7a7e3f427df877df": [
        {
            "commit_message": "cleanups of DateCache (#10176)\n\n* improve the formatting for precise ms in DateCache\r\n* return original format string with DateCache.getFormatString\r\n* calculate index in tick constructor because format strings can be different size\r\n* use two ticks so that switching between seconds is less likely going to have cache miss\r\n* use boolean instead of index to denote if sub second is needed\r\n* remove formatWithoutCache and replace with doFormat as it doesn't work with sub second time\r\n* allow the option of not having sub second precision\r\n* use two separate formatters for the prefix/suffix around the SSS format code\r\n* use a simple class to store both ticks in DateCache\r\n* rename DateCache.Tick.getString(long) to format()\r\n\r\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>",
            "benchmark": "org.eclipse.jetty.util.jmh.DateCacheBenchmark.testDateCacheFormatNow",
            "method_name_pd": "public java.lang.String org.eclipse.jetty.util.DateCache.formatNow(long)",
            "method_name_cc": "public String org.eclipse.jetty.util.DateCache.formatNow(long now)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/DateCache.java",
            "previous_method_cc": "public String org.eclipse.jetty.util.DateCache.formatNow(long now)",
            "previous_method_pd": "public java.lang.String org.eclipse.jetty.util.DateCache.formatNow(long)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/DateCache.java",
            "previous_commit": "3a85b66ee498d7ab07e708b502d5f96d2fc65cc1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.2717391304347826,
                "p_value": 5.125008459123406e-41,
                "effect_size": -0.006610902294275791,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2791576,
                    "after": 2698109
                }
            }
        },
        {
            "commit_message": "cleanups of DateCache (#10176)\n\n* improve the formatting for precise ms in DateCache\r\n* return original format string with DateCache.getFormatString\r\n* calculate index in tick constructor because format strings can be different size\r\n* use two ticks so that switching between seconds is less likely going to have cache miss\r\n* use boolean instead of index to denote if sub second is needed\r\n* remove formatWithoutCache and replace with doFormat as it doesn't work with sub second time\r\n* allow the option of not having sub second precision\r\n* use two separate formatters for the prefix/suffix around the SSS format code\r\n* use a simple class to store both ticks in DateCache\r\n* rename DateCache.Tick.getString(long) to format()\r\n\r\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>",
            "benchmark": "org.eclipse.jetty.util.jmh.DateCacheBenchmark.testDateCacheNow",
            "method_name_pd": "public java.lang.String org.eclipse.jetty.util.DateCache.format(long)",
            "method_name_cc": "public String org.eclipse.jetty.util.DateCache.format(long inDate)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/DateCache.java",
            "previous_method_cc": "public String org.eclipse.jetty.util.DateCache.format(long inDate)",
            "previous_method_pd": "public java.lang.String org.eclipse.jetty.util.DateCache.format(long)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/DateCache.java",
            "previous_commit": "3a85b66ee498d7ab07e708b502d5f96d2fc65cc1",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "cleanups of DateCache (#10176)\n\n* improve the formatting for precise ms in DateCache\r\n* return original format string with DateCache.getFormatString\r\n* calculate index in tick constructor because format strings can be different size\r\n* use two ticks so that switching between seconds is less likely going to have cache miss\r\n* use boolean instead of index to denote if sub second is needed\r\n* remove formatWithoutCache and replace with doFormat as it doesn't work with sub second time\r\n* allow the option of not having sub second precision\r\n* use two separate formatters for the prefix/suffix around the SSS format code\r\n* use a simple class to store both ticks in DateCache\r\n* rename DateCache.Tick.getString(long) to format()\r\n\r\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>",
            "benchmark": "org.eclipse.jetty.util.jmh.DateCacheBenchmark.testDateCacheNow",
            "method_name_pd": "public java.lang.String org.eclipse.jetty.util.DateCache.format(java.util.Date)",
            "method_name_cc": "public String org.eclipse.jetty.util.DateCache.format(Date inDate)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/DateCache.java",
            "previous_method_cc": "public String org.eclipse.jetty.util.DateCache.format(Date inDate)",
            "previous_method_pd": "public java.lang.String org.eclipse.jetty.util.DateCache.format(java.util.Date)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/DateCache.java",
            "previous_commit": "3a85b66ee498d7ab07e708b502d5f96d2fc65cc1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -4.77366255144033,
                "p_value": 0.0,
                "effect_size": -0.03524526827760152,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2580753,
                    "after": 835286
                }
            }
        }
    ],
    "d241c6694be97614f040ec9d0f8c8b34b0247d23": [
        {
            "commit_message": "Issue #5287 - Pool the entries instead of just the Deflater/Inflaters\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.compression.CompressionPool$Entry org.eclipse.jetty.util.compression.CompressionPool.acquire()",
            "method_name_cc": "public Entry org.eclipse.jetty.util.compression.CompressionPool<T>.acquire()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_method_cc": "public Entry org.eclipse.jetty.util.compression.CompressionPool<T>.acquire()",
            "previous_method_pd": "public org.eclipse.jetty.util.compression.CompressionPool$Entry org.eclipse.jetty.util.compression.CompressionPool.acquire()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_commit": "21576f2312a0a4e16f79841160ec3b635e4f9c8a",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.8269319191981117,
                "p_value": 0.0014730070953976237,
                "effect_size": 0.0025933546990080628,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1024369,
                    "after": 981285
                }
            }
        }
    ],
    "aa09b8b7bda7ec28544cac509da6d8b084c8edd7": [
        {
            "commit_message": "Issue #6974 - allow empty buffers to be pooled\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\n",
            "benchmark": "org.eclipse.jetty.util.ArrayByteBufferPoolBenchmark.testAcquireRelease",
            "method_name_pd": "protected int org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int)",
            "method_name_cc": "protected int org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int capacity)",
            "file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "protected int org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int capacity)",
            "previous_method_pd": "protected int org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int)",
            "previous_file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "377d0d131eb45d6a443175c13f1b65eb8efcd952",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 1.02890739833415,
                "p_value": 0.0,
                "effect_size": -0.10771673072682855,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 22346821,
                    "after": 21825246
                }
            }
        },
        {
            "commit_message": "Issue #6974 - allow empty buffers to be pooled\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\n",
            "benchmark": "org.eclipse.jetty.util.ArrayByteBufferPoolBenchmark.testAcquireRelease",
            "method_name_pd": "private org.eclipse.jetty.io.ByteBufferPool$Bucket org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int,boolean)",
            "method_name_cc": "private ByteBufferPool.Bucket org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int capacity, boolean direct)",
            "file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "private ByteBufferPool.Bucket org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int capacity, boolean direct)",
            "previous_method_pd": "private org.eclipse.jetty.io.ByteBufferPool$Bucket org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int,boolean)",
            "previous_file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "377d0d131eb45d6a443175c13f1b65eb8efcd952",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 1.2385919165580181,
                "p_value": 0.0,
                "effect_size": -0.21038255180834955,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 10945699,
                    "after": 10746566
                }
            }
        }
    ],
    "d2df0fc2e9eff2ba40fb75a594b11aa98470f06c": [
        {
            "commit_message": "Fixes after review of #4975.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.Pool.reserve(int)",
            "method_name_cc": "public Entry org.eclipse.jetty.util.Pool<T>.reserve(int maxReservations)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_method_cc": "public Entry org.eclipse.jetty.util.Pool<T>.reserve(int maxReservations)",
            "previous_method_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.Pool.reserve(int)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_commit": "2fe01626a5a54583c844b92ae96aa32664366fb1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 11.804406440828874,
                "p_value": 0.008636855241951538,
                "effect_size": -0.10590253050372692,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 413,
                    "after": 408
                }
            }
        },
        {
            "commit_message": "Fixes after review of #4975.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "public void org.eclipse.jetty.util.Pool.close()",
            "method_name_cc": "public void org.eclipse.jetty.util.Pool<T>.close()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.Pool<T>.close()",
            "previous_method_pd": "public void org.eclipse.jetty.util.Pool.close()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_commit": "2fe01626a5a54583c844b92ae96aa32664366fb1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.904585681310569,
                "p_value": 0.6784245040488326,
                "effect_size": -0.09523809523809523,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 15,
                    "after": 14
                }
            }
        }
    ],
    "474136de57eb8b6dfc851e85e81ad944430ecf46": [
        {
            "commit_message": " #9311 Add Queued and Compound Pool implementations\n\nThis adds a QueuedPool that can wrap any other pool and provided a queue of Entries as a kind of cache.\n",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.ConcurrentPool.reserve()",
            "method_name_cc": "public Entry<P> org.eclipse.jetty.util.ConcurrentPool<P>.reserve()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_method_cc": "public Entry<P> org.eclipse.jetty.util.ConcurrentPool<P>.reserve()",
            "previous_method_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.ConcurrentPool.reserve()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_commit": "e819809723ad8f6a5f18ec87dbe809247b2ebb33",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 4.978429357369422,
                "p_value": 0.0010999734513744968,
                "effect_size": -0.4034552845528455,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 48,
                    "after": 41
                }
            }
        }
    ],
    "b2203115e2ea2e488f982cf281e4e32c11db335f": [
        {
            "commit_message": "Fixes #7240 - Clarify and javadoc InvocationType. (#7241)\n\n* Fixes #7240 - Clarify and javadoc InvocationType.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(java.lang.Runnable,boolean)",
            "method_name_cc": "private SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(Runnable task, boolean nonBlocking)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(Runnable task, boolean nonBlocking)",
            "previous_method_pd": "private org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(java.lang.Runnable,boolean)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "05d9febeaf0b9cbfbe82d6f7b63b7deb72b9876c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.211177604219495,
                "p_value": 0.0,
                "effect_size": -0.02406610510305858,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4369180,
                    "after": 4312206
                }
            }
        }
    ],
    "e2b00bd4e00fdd1e8f40b109e68a8b8f10eb6616": [
        {
            "commit_message": "Improved non-blocking algorithm of AdaptiveExecutionStrategy.\n\nNow only starting one pending producer also in case of CAS failures.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(java.lang.Runnable,boolean)",
            "method_name_cc": "private SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(Runnable task, boolean nonBlocking)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(Runnable task, boolean nonBlocking)",
            "previous_method_pd": "private org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(java.lang.Runnable,boolean)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "deb4f3a8e810f9448577e1e154c1db337d32b6d8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.1198778315092899,
                "p_value": 3.4494788989527646e-46,
                "effect_size": 0.005254968217974389,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4947203,
                    "after": 4882962
                }
            }
        }
    ],
    "089e51f0bc02b63490e1038e0ec23d1d43adf9a8": [
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start() throws java.lang.Exception",
            "method_name_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_method_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start()",
            "previous_method_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_commit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.5960913148632008,
                "p_value": 0.5302738699613767,
                "effect_size": 0.04694444444444444,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 120,
                    "after": 120
                }
            }
        },
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.stop() throws java.lang.Exception",
            "method_name_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.stop()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_method_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.stop()",
            "previous_method_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.stop() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_commit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 8.729240707212945,
                "p_value": 0.8335751784903751,
                "effect_size": 0.016632373113854595,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 108,
                    "after": 108
                }
            }
        },
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.doStop() throws java.lang.Exception",
            "method_name_cc": "protected void org.eclipse.jetty.server.AcceptRateLimit.doStop()",
            "file": "jetty-server/src/main/java/org/eclipse/jetty/server/AcceptRateLimit.java",
            "previous_method_cc": "protected void org.eclipse.jetty.server.AcceptRateLimit.doStop()",
            "previous_method_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.doStop() throws java.lang.Exception",
            "previous_file": "jetty-server/src/main/java/org/eclipse/jetty/server/AcceptRateLimit.java",
            "previous_commit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 4.342775904015657,
                "p_value": 0.042633096724049566,
                "effect_size": -0.2935606060606061,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 32,
                    "after": 33
                }
            }
        },
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private boolean org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(boolean)",
            "method_name_cc": "private boolean org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(boolean nonBlocking)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_method_cc": "private boolean org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(boolean nonBlocking)",
            "previous_method_pd": "private boolean org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(boolean)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_commit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.8779382611158312,
                "p_value": 0.09757604432061738,
                "effect_size": -0.0005143840539444075,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 6959021,
                    "after": 6872788
                }
            }
        },
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\nUpdates after review.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean wasPending)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean wasPending)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_commit": "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.3427366200896388,
                "p_value": 3.3317154347270826e-42,
                "effect_size": -0.0059731487394782835,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3486611,
                    "after": 3439480
                }
            }
        }
    ],
    "0ee0716d3345970c24534c1183f9f986506b3bd0": [
        {
            "commit_message": "Various cleanups of StringUtil and TypeUtil (#10082)\n\n* Various cleanups of StringUtil and TypeUtil\r\n\r\nRemoved deprecated and unused methods\r\nMoved charset handling to MimeTypes\r\nresolve IDE warnings\r\n\r\n* updates from review",
            "benchmark": "org.eclipse.jetty.util.TrieBenchmark.testPut",
            "method_name_pd": "public static java.lang.String org.eclipse.jetty.util.StringUtil.asciiToLowerCase(java.lang.String)",
            "method_name_cc": "public static String org.eclipse.jetty.util.StringUtil.asciiToLowerCase(String s)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java",
            "previous_method_cc": "public static String org.eclipse.jetty.util.StringUtil.asciiToLowerCase(String s)",
            "previous_method_pd": "public static java.lang.String org.eclipse.jetty.util.StringUtil.asciiToLowerCase(java.lang.String)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/StringUtil.java",
            "previous_commit": "bd80297f7e2471c1995672ba0566259486aebcda",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.78064012490242,
                "p_value": 0.0,
                "effect_size": 0.04293783294567893,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 45998470,
                    "after": 46568686
                }
            }
        }
    ],
    "80f912a121855749dc42c7866b03ed75f75cc9aa": [
        {
            "commit_message": "Improve HTTP parsing long look-ahead (#11486)\n\nUse ByteBuffer.getLong to look for entire request (GET / HTTP/1.1) or response (HTTP/1.1 200 OK) line with 2 long lookups.  Failing that, a single long lookup is sufficient to determine the common methods and/or HttpVersion.\r\n\r\n* Cleanup generator also\r\n\r\n* Added a fallback int lookup\r\n\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "private void org.eclipse.jetty.http.HttpParser.quickStart(java.nio.ByteBuffer)",
            "method_name_cc": "private void org.eclipse.jetty.http.HttpParser.quickStart(ByteBuffer buffer)",
            "file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java",
            "previous_method_cc": "private void org.eclipse.jetty.http.HttpParser.quickStart(ByteBuffer buffer)",
            "previous_method_pd": "private void org.eclipse.jetty.http.HttpParser.quickStart(java.nio.ByteBuffer)",
            "previous_file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java",
            "previous_commit": "77119e817b69357ae2eb9102ecdf3a0ed8707d8c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -43.98559423769508,
                "p_value": 0.0,
                "effect_size": 0.3035787353688744,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2512587,
                    "after": 2439241
                }
            }
        },
        {
            "commit_message": "Improve HTTP parsing long look-ahead (#11486)\n\nUse ByteBuffer.getLong to look for entire request (GET / HTTP/1.1) or response (HTTP/1.1 200 OK) line with 2 long lookups.  Failing that, a single long lookup is sufficient to determine the common methods and/or HttpVersion.\r\n\r\n* Cleanup generator also\r\n\r\n* Added a fallback int lookup\r\n\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "private void org.eclipse.jetty.http.HttpGenerator.generateResponseLine(org.eclipse.jetty.http.MetaData$Response,java.nio.ByteBuffer)",
            "method_name_cc": "private void org.eclipse.jetty.http.HttpGenerator.generateResponseLine(MetaData.Response response, ByteBuffer header)",
            "file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java",
            "previous_method_cc": "private void org.eclipse.jetty.http.HttpGenerator.generateResponseLine(MetaData.Response response, ByteBuffer header)",
            "previous_method_pd": "private void org.eclipse.jetty.http.HttpGenerator.generateResponseLine(org.eclipse.jetty.http.MetaData$Response,java.nio.ByteBuffer)",
            "previous_file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpGenerator.java",
            "previous_commit": "77119e817b69357ae2eb9102ecdf3a0ed8707d8c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.3076923076923077,
                "p_value": 4.668835089175786e-200,
                "effect_size": 0.022445404356536906,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1191275,
                    "after": 1219240
                }
            }
        }
    ],
    "83154b4ffe4767ef44981598d6c26e6a5d32e57c": [
        {
            "commit_message": "Fixes #8863 - Provide a possibility to name virtual threads (#8903)\n\n* Fixes #8863 - Provide a possibility to name virtual threads\r\n\r\nReworked the VirtualThreads APIs to be based on `Executor` rather than just `boolean`.\r\nIntroduced Jetty module `threadpool-virtual-preview`.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(java.lang.Runnable)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(Runnable task)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(Runnable task)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(java.lang.Runnable)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "88ea1e81c44ac1914787a1ed157808fe78846e73",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.913961038961039,
                "p_value": 0.0,
                "effect_size": 0.046858796418698376,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1629943,
                    "after": 1763358
                }
            }
        }
    ],
    "3c019fabd38c73e5052e19f23cb59b4cd3ae8746": [
        {
            "commit_message": "#7107: fix too-eager closing of multiplexed connections marked as closed but still in use\n",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "protected org.eclipse.jetty.client.api.Connection org.eclipse.jetty.client.AbstractConnectionPool.activate()",
            "method_name_cc": "protected Connection org.eclipse.jetty.client.AbstractConnectionPool.activate()",
            "file": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java",
            "previous_method_cc": "protected Connection org.eclipse.jetty.client.AbstractConnectionPool.activate()",
            "previous_method_pd": "protected org.eclipse.jetty.client.api.Connection org.eclipse.jetty.client.AbstractConnectionPool.activate()",
            "previous_file": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java",
            "previous_commit": "91be8cfc6e64a77e048139644c118e95dc2f745d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.6346328195829556,
                "p_value": 0.0,
                "effect_size": 0.04258335713694375,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 77752574,
                    "after": 75216720
                }
            }
        },
        {
            "commit_message": "#7107: fix too-eager closing of multiplexed connections marked as closed but still in use\n",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "protected boolean org.eclipse.jetty.client.AbstractConnectionPool.deactivate(org.eclipse.jetty.client.api.Connection)",
            "method_name_cc": "protected boolean org.eclipse.jetty.client.AbstractConnectionPool.deactivate(Connection connection)",
            "file": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java",
            "previous_method_cc": "protected boolean org.eclipse.jetty.client.AbstractConnectionPool.deactivate(Connection connection)",
            "previous_method_pd": "protected boolean org.eclipse.jetty.client.AbstractConnectionPool.deactivate(org.eclipse.jetty.client.api.Connection)",
            "previous_file": "jetty-client/src/main/java/org/eclipse/jetty/client/AbstractConnectionPool.java",
            "previous_commit": "91be8cfc6e64a77e048139644c118e95dc2f745d",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.7369875633348687,
                "p_value": 0.0,
                "effect_size": 0.04234739584489013,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 77863188,
                    "after": 75373482
                }
            }
        }
    ],
    "95059356c988db708ef167bc0b1ddf443d837be3": [
        {
            "commit_message": "Fix contains in HttpFields name set and prove random access to HttpFields via EnumMap not worth it. (#11846)\n\nFix #11811 with javadoc and  benchmark\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public org.eclipse.jetty.http.HttpFields org.eclipse.jetty.http.MutableHttpFields.asImmutable()",
            "method_name_cc": "public HttpFields org.eclipse.jetty.http.MutableHttpFields.asImmutable()",
            "file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/MutableHttpFields.java",
            "previous_method_cc": "public HttpFields org.eclipse.jetty.http.MutableHttpFields.asImmutable()",
            "previous_method_pd": "public org.eclipse.jetty.http.HttpFields org.eclipse.jetty.http.MutableHttpFields.asImmutable()",
            "previous_file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/MutableHttpFields.java",
            "previous_commit": "9546b3ab4957d635e148086864bc5356056266d7",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.0861074123391035,
                "p_value": 0.0,
                "effect_size": -0.06539622388205346,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1529330,
                    "after": 1494892
                }
            }
        }
    ],
    "8d69fc41a7f8c26fcd90fc0f7300f81eaede06be": [
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\n* Replaced relevant usages of synchronized with AutoLock.\n* Made AutoLock serializable since classes that use it may be stored in the HttpSession.\n* Added convenience methods to AutoLock to execute lambdas with the lock held.\n* Introduced AutoLock.WithCondition to use a Lock and a Condition together.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start() throws java.lang.Exception",
            "method_name_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_method_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start()",
            "previous_method_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.start() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_commit": "a33b0e290ed05415cc4f9e16a38c8705b8d614b0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.06616336672976952,
                "p_value": 0.8328439475394087,
                "effect_size": -0.015833333333333335,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 120,
                    "after": 120
                }
            }
        },
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\n* Replaced relevant usages of synchronized with AutoLock.\n* Made AutoLock serializable since classes that use it may be stored in the HttpSession.\n* Added convenience methods to AutoLock to execute lambdas with the lock held.\n* Introduced AutoLock.WithCondition to use a Lock and a Condition together.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.stop() throws java.lang.Exception",
            "method_name_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.stop()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_method_cc": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.stop()",
            "previous_method_pd": "public final void org.eclipse.jetty.util.component.AbstractLifeCycle.stop() throws java.lang.Exception",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_commit": "a33b0e290ed05415cc4f9e16a38c8705b8d614b0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 7.808261977966248,
                "p_value": 0.5115125924092432,
                "effect_size": -0.05178326474622771,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 108,
                    "after": 108
                }
            }
        },
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\n* Replaced relevant usages of synchronized with AutoLock.\n* Made AutoLock serializable since classes that use it may be stored in the HttpSession.\n* Added convenience methods to AutoLock to execute lambdas with the lock held.\n* Introduced AutoLock.WithCondition to use a Lock and a Condition together.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.doStop() throws java.lang.Exception",
            "method_name_cc": "protected void org.eclipse.jetty.server.AcceptRateLimit.doStop()",
            "file": "jetty-server/src/main/java/org/eclipse/jetty/server/AcceptRateLimit.java",
            "previous_method_cc": "protected void org.eclipse.jetty.server.AcceptRateLimit.doStop()",
            "previous_method_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.doStop() throws java.lang.Exception",
            "previous_file": "jetty-server/src/main/java/org/eclipse/jetty/server/AcceptRateLimit.java",
            "previous_commit": "a33b0e290ed05415cc4f9e16a38c8705b8d614b0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.7818765954974625,
                "p_value": 0.8052926314065638,
                "effect_size": 0.0375,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 30,
                    "after": 32
                }
            }
        },
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\n* Replaced relevant usages of synchronized with AutoLock.\n* Made AutoLock serializable since classes that use it may be stored in the HttpSession.\n* Added convenience methods to AutoLock to execute lambdas with the lock held.\n* Introduced AutoLock.WithCondition to use a Lock and a Condition together.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private boolean org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(boolean)",
            "method_name_cc": "private boolean org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(boolean nonBlocking)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_method_cc": "private boolean org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(boolean nonBlocking)",
            "previous_method_pd": "private boolean org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(boolean)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_commit": "a33b0e290ed05415cc4f9e16a38c8705b8d614b0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -4.1530054644808745,
                "p_value": 0.0,
                "effect_size": 0.028085432995218387,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 7021056,
                    "after": 6886813
                }
            }
        },
        {
            "commit_message": "Fixes #5083 - Convert synchronized usages to AutoLock.\n\n* Replaced relevant usages of synchronized with AutoLock.\n* Made AutoLock serializable since classes that use it may be stored in the HttpSession.\n* Added convenience methods to AutoLock to execute lambdas with the lock held.\n* Introduced AutoLock.WithCondition to use a Lock and a Condition together.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean wasPending)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean wasPending)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(boolean)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/EatWhatYouKill.java",
            "previous_commit": "a33b0e290ed05415cc4f9e16a38c8705b8d614b0",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.2249789179352892,
                "p_value": 0.2710084224612165,
                "effect_size": -0.00048075691862903465,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 3524435,
                    "after": 3465777
                }
            }
        }
    ],
    "d744d097dec29ee0285c1ec17acf11f6484b38cc": [
        {
            "commit_message": "Checkstyle cleanup (#3847)\n\n* Checkstyle cleanup\r\n* fixed bug from reformat\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public boolean org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(java.lang.Object,org.eclipse.jetty.util.component.ContainerLifeCycle$Managed)",
            "method_name_cc": "public boolean org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(Object o, Managed managed)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/ContainerLifeCycle.java",
            "previous_method_cc": "public boolean org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(Object o, Managed managed)",
            "previous_method_pd": "public boolean org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(java.lang.Object,org.eclipse.jetty.util.component.ContainerLifeCycle$Managed)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/ContainerLifeCycle.java",
            "previous_commit": "9fe27eb8e3d1ff96839f5dc33c8645974926967f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -7.499244302463838,
                "p_value": 0.8480748788655377,
                "effect_size": 0.020555555555555556,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 60,
                    "after": 60
                }
            }
        },
        {
            "commit_message": "Checkstyle cleanup (#3847)\n\n* Checkstyle cleanup\r\n* fixed bug from reformat\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "method_name_cc": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ProduceConsume.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "previous_method_pd": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ProduceConsume.java",
            "previous_commit": "9fe27eb8e3d1ff96839f5dc33c8645974926967f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.5966183574879227,
                "p_value": 0.0,
                "effect_size": -0.03325137612567692,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4532947,
                    "after": 4374397
                }
            }
        },
        {
            "commit_message": "Checkstyle cleanup (#3847)\n\n* Checkstyle cleanup\r\n* fixed bug from reformat\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "private boolean org.eclipse.jetty.util.component.ContainerLifeCycle.remove(org.eclipse.jetty.util.component.ContainerLifeCycle$Bean)",
            "method_name_cc": "private boolean org.eclipse.jetty.util.component.ContainerLifeCycle.remove(Bean bean)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/ContainerLifeCycle.java",
            "previous_method_cc": "private boolean org.eclipse.jetty.util.component.ContainerLifeCycle.remove(Bean bean)",
            "previous_method_pd": "private boolean org.eclipse.jetty.util.component.ContainerLifeCycle.remove(org.eclipse.jetty.util.component.ContainerLifeCycle$Bean)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/ContainerLifeCycle.java",
            "previous_commit": "9fe27eb8e3d1ff96839f5dc33c8645974926967f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -9.624834128204117,
                "p_value": 0.10611517487071975,
                "effect_size": 0.22380952380952382,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 35,
                    "after": 36
                }
            }
        },
        {
            "commit_message": "Checkstyle cleanup (#3847)\n\n* Checkstyle cleanup\r\n* fixed bug from reformat\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public void org.eclipse.jetty.util.thread.strategy.ProduceExecuteConsume.produce()",
            "method_name_cc": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ProduceConsume.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "previous_method_pd": "public void org.eclipse.jetty.util.thread.strategy.ProduceConsume.produce()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/ProduceConsume.java",
            "previous_commit": "9fe27eb8e3d1ff96839f5dc33c8645974926967f",
            "performance_diff": 0.6421300761846329,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 5.407944176060118,
                "p_value": 0.0,
                "effect_size": -0.08912948383081247,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4532947,
                    "after": 2010794
                }
            }
        }
    ],
    "2b817f06c64a26003cdbaa25a3769c1c8b9178cf": [
        {
            "commit_message": "Combined ByteBufferPool (#8171)\n\nAll `ByteBufferPool` can now be accessed as `RetainableByteBufferPools`.\r\n\r\nUsers now need to configure only a single buffer pool and there is just the additional retained parameter that needs consideration.\r\nDefault buffer pool has been changed to logarithmic, but we may wish to review that before next release.\r\nDefault factor size has been increased to 4096.\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.Pool.reserve()",
            "method_name_cc": "public Entry org.eclipse.jetty.util.Pool<T>.reserve()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_method_cc": "public Entry org.eclipse.jetty.util.Pool<T>.reserve()",
            "previous_method_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.Pool.reserve()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_commit": "27a89b284aeeeff0c2499b486304d76967c2d263",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.9491540893024946,
                "p_value": 0.6632336194880465,
                "effect_size": 0.05230496453900709,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 47,
                    "after": 48
                }
            }
        },
        {
            "commit_message": "Combined ByteBufferPool (#8171)\n\nAll `ByteBufferPool` can now be accessed as `RetainableByteBufferPools`.\r\n\r\nUsers now need to configure only a single buffer pool and there is just the additional retained parameter that needs consideration.\r\nDefault buffer pool has been changed to logarithmic, but we may wish to review that before next release.\r\nDefault factor size has been increased to 4096.\r\n",
            "benchmark": "org.eclipse.jetty.util.ArrayByteBufferPoolBenchmark.testAcquireRelease",
            "method_name_pd": "private org.eclipse.jetty.io.AbstractByteBufferPool$Bucket org.eclipse.jetty.io.ArrayByteBufferPool.newBucket(int,boolean)",
            "method_name_cc": "private Bucket org.eclipse.jetty.io.ArrayByteBufferPool.newBucket(int key, boolean direct)",
            "file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "private Bucket org.eclipse.jetty.io.ArrayByteBufferPool.newBucket(int key, boolean direct)",
            "previous_method_pd": "private org.eclipse.jetty.io.AbstractByteBufferPool$Bucket org.eclipse.jetty.io.ArrayByteBufferPool.newBucket(int,boolean)",
            "previous_file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "27a89b284aeeeff0c2499b486304d76967c2d263",
            "performance_diff": -0.0,
            "significance": {}
        },
        {
            "commit_message": "Combined ByteBufferPool (#8171)\n\nAll `ByteBufferPool` can now be accessed as `RetainableByteBufferPools`.\r\n\r\nUsers now need to configure only a single buffer pool and there is just the additional retained parameter that needs consideration.\r\nDefault buffer pool has been changed to logarithmic, but we may wish to review that before next release.\r\nDefault factor size has been increased to 4096.\r\n",
            "benchmark": "org.eclipse.jetty.util.ArrayByteBufferPoolBenchmark.testAcquireRelease",
            "method_name_pd": "public java.nio.ByteBuffer org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int,boolean)",
            "method_name_cc": "public ByteBuffer org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int size, boolean direct)",
            "file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "public ByteBuffer org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int size, boolean direct)",
            "previous_method_pd": "public java.nio.ByteBuffer org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int,boolean)",
            "previous_file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "27a89b284aeeeff0c2499b486304d76967c2d263",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.2323140118667275,
                "p_value": 0.0,
                "effect_size": 0.09311967080844687,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 13391324,
                    "after": 14417088
                }
            }
        },
        {
            "commit_message": "Combined ByteBufferPool (#8171)\n\nAll `ByteBufferPool` can now be accessed as `RetainableByteBufferPools`.\r\n\r\nUsers now need to configure only a single buffer pool and there is just the additional retained parameter that needs consideration.\r\nDefault buffer pool has been changed to logarithmic, but we may wish to review that before next release.\r\nDefault factor size has been increased to 4096.\r\n",
            "benchmark": "org.eclipse.jetty.util.ArrayByteBufferPoolBenchmark.testAcquireRelease",
            "method_name_pd": "public void org.eclipse.jetty.io.ArrayByteBufferPool.release(java.nio.ByteBuffer)",
            "method_name_cc": "public void org.eclipse.jetty.io.ArrayByteBufferPool.release(ByteBuffer buffer)",
            "file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "public void org.eclipse.jetty.io.ArrayByteBufferPool.release(ByteBuffer buffer)",
            "previous_method_pd": "public void org.eclipse.jetty.io.ArrayByteBufferPool.release(java.nio.ByteBuffer)",
            "previous_file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "27a89b284aeeeff0c2499b486304d76967c2d263",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.0603964960811434,
                "p_value": 0.0,
                "effect_size": 0.10227939518261747,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 13384300,
                    "after": 14441958
                }
            }
        }
    ],
    "5aaec6e23f6b5e9dcc418c6121203ffb26c60c85": [
        {
            "commit_message": "Issue #4321 Refactored Graceful shutdown (#4482)\n\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nremoved stopTimeout from all abstractLifeCycles.  It is on Graceful.LifeCycle, which is only implemented by components that can start a graceful shutdown (eg Server, ContextHandler and QueuedThreadPool)\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\ncleanup after review\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nreinstate other stop tests (more work to do).\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nFixes for stop test by improving LocalConnector shutdown handling\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nRemoved broken test on LocalConnector that is already tested in GracefulStopTest\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nFixed all stop tests\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nfixed checkstyle\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nNo stopTimeout JMX attribute\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nDump stopTimeout\r\ntest with default stopTimeout\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nUSe sendError for 503\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nminor cleanups\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nSimplifications after review\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nafter review\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #4321 Refactored Graceful shutdown\r\n\r\nafter review\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ThreadPoolBenchmark.testFew",
            "method_name_pd": "private boolean org.eclipse.jetty.util.thread.QueuedThreadPool.addCounts(int,int)",
            "method_name_cc": "private boolean org.eclipse.jetty.util.thread.QueuedThreadPool.addCounts(int deltaThreads, int deltaIdle)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java",
            "previous_method_cc": "private boolean org.eclipse.jetty.util.thread.QueuedThreadPool.addCounts(int deltaThreads, int deltaIdle)",
            "previous_method_pd": "private boolean org.eclipse.jetty.util.thread.QueuedThreadPool.addCounts(int,int)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java",
            "previous_commit": "7592d36c4b233c1febd83f8d57129324f9398611",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.3844463971880492,
                "p_value": 1.0368775625525265e-07,
                "effect_size": -0.007317644790910138,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 350190,
                    "after": 354600
                }
            }
        }
    ],
    "de13ceff3619777dc1213a4dddc40d79ceedb3dd": [
        {
            "commit_message": "Fixes #8493: RemoveIdleDestinations's race condition and improve logging.\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.Pool.reserve()",
            "method_name_cc": "public Entry org.eclipse.jetty.util.Pool<T>.reserve()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_method_cc": "public Entry org.eclipse.jetty.util.Pool<T>.reserve()",
            "previous_method_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.Pool.reserve()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_commit": "935d8948724c9ceb9805dd432353155d71155d19",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 8.699260350617614,
                "p_value": 4.005945338235109e-05,
                "effect_size": -0.4869791666666667,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 48,
                    "after": 48
                }
            }
        }
    ],
    "c19921e60f5a28d100d22620c177ba4582182987": [
        {
            "commit_message": "Issue #6974 - improvements & fixes to ByteBufferPool implementations (#7017)\n\n- WebSocket should user server ByteBufferPool if possible\n- fix various bugs ByteBufferPool implementations\n- add heuristic for maxHeapMemory and maxDirectMemory\n- Add dump for ByteBufferPools\n- add LogArrayByteBufferPool that does exponential scaling of bucket size.\n- ByteBufferPools should default to use maxMemory heuristic\n- Add module jetty-bytebufferpool-logarithmic\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.ArrayByteBufferPoolBenchmark.testAcquireRelease",
            "method_name_pd": "public java.nio.ByteBuffer org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int,boolean)",
            "method_name_cc": "public ByteBuffer org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int size, boolean direct)",
            "file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "public ByteBuffer org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int size, boolean direct)",
            "previous_method_pd": "public java.nio.ByteBuffer org.eclipse.jetty.io.ArrayByteBufferPool.acquire(int,boolean)",
            "previous_file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "b365b3cf1b8c60de6eccea3867f65182fe601ea9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 0.9391471011020603,
                "p_value": 0.0,
                "effect_size": -0.14760961042115475,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6288702,
                    "after": 5253685
                }
            }
        },
        {
            "commit_message": "Issue #6974 - improvements & fixes to ByteBufferPool implementations (#7017)\n\n- WebSocket should user server ByteBufferPool if possible\n- fix various bugs ByteBufferPool implementations\n- add heuristic for maxHeapMemory and maxDirectMemory\n- Add dump for ByteBufferPools\n- add LogArrayByteBufferPool that does exponential scaling of bucket size.\n- ByteBufferPools should default to use maxMemory heuristic\n- Add module jetty-bytebufferpool-logarithmic\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.ArrayByteBufferPoolBenchmark.testAcquireRelease",
            "method_name_pd": "public void org.eclipse.jetty.io.ArrayByteBufferPool.release(java.nio.ByteBuffer)",
            "method_name_cc": "public void org.eclipse.jetty.io.ArrayByteBufferPool.release(ByteBuffer buffer)",
            "file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "public void org.eclipse.jetty.io.ArrayByteBufferPool.release(ByteBuffer buffer)",
            "previous_method_pd": "public void org.eclipse.jetty.io.ArrayByteBufferPool.release(java.nio.ByteBuffer)",
            "previous_file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "b365b3cf1b8c60de6eccea3867f65182fe601ea9",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 68.00385109114248,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 6326969,
                    "after": 5262194
                }
            }
        }
    ],
    "6d0bddc07af28fde5513efe445f17281fb116661": [
        {
            "commit_message": "#11932 make succeeded and failed in ICB final + introduce onSuccess\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.io.content.BufferedContentSink.succeeded()",
            "file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/content/BufferedContentSink.java",
            "previous_method_cc": "public void org.eclipse.jetty.io.content.BufferedContentSink.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-io/src/main/java/org/eclipse/jetty/io/content/BufferedContentSink.java",
            "previous_commit": "309101239348793efeebbbed97ed2bc0e0e2cb2c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.2983571807101217,
                "p_value": 0.004189087276639576,
                "effect_size": 0.0019431102074997286,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1465632,
                    "after": 1430515
                }
            }
        },
        {
            "commit_message": "#11932 make succeeded and failed in ICB final + introduce onSuccess\n\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "private void org.eclipse.jetty.util.IteratingCallback.processing()",
            "method_name_cc": "private void org.eclipse.jetty.util.IteratingCallback.processing()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/IteratingCallback.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.IteratingCallback.processing()",
            "previous_method_pd": "private void org.eclipse.jetty.util.IteratingCallback.processing()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/IteratingCallback.java",
            "previous_commit": "309101239348793efeebbbed97ed2bc0e0e2cb2c",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.44704136523836024,
                "p_value": 9.713640399642778e-147,
                "effect_size": -0.017858850998468585,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1410131,
                    "after": 1372352
                }
            }
        }
    ],
    "be3d16bdbbb63cc0df7e4964d8a47e3e376a631d": [
        {
            "commit_message": "Fixes #8007 - Support Loom. (#8360)\n\nImplemented support for virtual threads for HTTP/1.1, HTTP/2 and HTTP/3.\r\n\r\nThe virtual thread support is in AdaptiveExecutionStrategy.\r\nWhen virtual threads are supported and enabled, reserved threads are disabled and\r\nblocking tasks are run in a virtual thread instead that being executed by the Executor.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private static int org.eclipse.jetty.util.thread.ReservedThreadExecutor.reservedThreads(java.util.concurrent.Executor,int)",
            "method_name_cc": "private static int org.eclipse.jetty.util.thread.ReservedThreadExecutor.reservedThreads(Executor executor, int capacity)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "private static int org.eclipse.jetty.util.thread.ReservedThreadExecutor.reservedThreads(Executor executor, int capacity)",
            "previous_method_pd": "private static int org.eclipse.jetty.util.thread.ReservedThreadExecutor.reservedThreads(java.util.concurrent.Executor,int)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "50b7dc4bbcc802a5c089186ecc8cfd07698aff87",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 4.755510498258048,
                "p_value": 0.5161617916869015,
                "effect_size": 0.0628858024691358,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 72,
                    "after": 72
                }
            }
        },
        {
            "commit_message": "Fixes #8007 - Support Loom. (#8360)\n\nImplemented support for virtual threads for HTTP/1.1, HTTP/2 and HTTP/3.\r\n\r\nThe virtual thread support is in AdaptiveExecutionStrategy.\r\nWhen virtual threads are supported and enabled, reserved threads are disabled and\r\nblocking tasks are run in a virtual thread instead that being executed by the Executor.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(java.lang.Runnable)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(Runnable task)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(Runnable task)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(java.lang.Runnable)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "50b7dc4bbcc802a5c089186ecc8cfd07698aff87",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.869637237038264,
                "p_value": 4.422518686945868e-05,
                "effect_size": -0.0025862628627415034,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1674174,
                    "after": 1651139
                }
            }
        }
    ],
    "377d0d131eb45d6a443175c13f1b65eb8efcd952": [
        {
            "commit_message": "Issue #6974 - fix bug in ByteBufferPool implementations\n\nIf an allocation size of 0 was requested bucketFor would throw.\n\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\n",
            "benchmark": "org.eclipse.jetty.util.ArrayByteBufferPoolBenchmark.testAcquireRelease",
            "method_name_pd": "protected int org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int)",
            "method_name_cc": "protected int org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int capacity)",
            "file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_method_cc": "protected int org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int capacity)",
            "previous_method_pd": "protected int org.eclipse.jetty.io.ArrayByteBufferPool.bucketFor(int)",
            "previous_file": "jetty-io/src/main/java/org/eclipse/jetty/io/ArrayByteBufferPool.java",
            "previous_commit": "c19921e60f5a28d100d22620c177ba4582182987",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.446480231436837,
                "p_value": 0.0,
                "effect_size": 0.12648911804946925,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 32387246,
                    "after": 32938871
                }
            }
        }
    ],
    "ebc5e559f8bc8c8e66fe2123cb76b58386d6c29c": [
        {
            "commit_message": "Removed reliance on exception to shutdown non persistent connections (#12213)\n\nMoved the shutdownOutput in HttpStreamOverHttp1 to before the continuation of handling\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "1726c8778c0c1a2040d5aafeb265c59ad927e599",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.2770935960591133,
                "p_value": 2.0625942417026657e-39,
                "effect_size": 0.009139991906989907,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1393678,
                    "after": 1360551
                }
            }
        },
        {
            "commit_message": "Removed reliance on exception to shutdown non persistent connections (#12213)\n\nMoved the shutdownOutput in HttpStreamOverHttp1 to before the continuation of handling\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpChannelState$HandlerInvoker.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "1726c8778c0c1a2040d5aafeb265c59ad927e599",
            "performance_diff": 0.6457898405083984,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -76.24692118226602,
                "p_value": 0.0,
                "effect_size": 0.9236318018337402,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1393678,
                    "after": 1376261
                }
            }
        },
        {
            "commit_message": "Removed reliance on exception to shutdown non persistent connections (#12213)\n\nMoved the shutdownOutput in HttpStreamOverHttp1 to before the continuation of handling\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpChannelState$ChannelResponse.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "1726c8778c0c1a2040d5aafeb265c59ad927e599",
            "performance_diff": 0.16466611088298544,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -27.955665024630544,
                "p_value": 0.0,
                "effect_size": 0.38408470995413013,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1393678,
                    "after": 1314300
                }
            }
        },
        {
            "commit_message": "Removed reliance on exception to shutdown non persistent connections (#12213)\n\nMoved the shutdownOutput in HttpStreamOverHttp1 to before the continuation of handling\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpChannelState$ChannelCallback.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "1726c8778c0c1a2040d5aafeb265c59ad927e599",
            "performance_diff": -6.888862000074115,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 682.2044334975369,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1393678,
                    "after": 1337232
                }
            }
        },
        {
            "commit_message": "Removed reliance on exception to shutdown non persistent connections (#12213)\n\nMoved the shutdownOutput in HttpStreamOverHttp1 to before the continuation of handling\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpConnection$HttpStreamOverHTTP1.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "1726c8778c0c1a2040d5aafeb265c59ad927e599",
            "performance_diff": -2.4601617582310285,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 63.669950738916256,
                "p_value": 0.0,
                "effect_size": -0.9025432234428428,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1393678,
                    "after": 1387196
                }
            }
        },
        {
            "commit_message": "Removed reliance on exception to shutdown non persistent connections (#12213)\n\nMoved the shutdownOutput in HttpStreamOverHttp1 to before the continuation of handling\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.server.internal.HttpConnection.onFillable()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.onFillable()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.onFillable()",
            "previous_method_pd": "public void org.eclipse.jetty.server.internal.HttpConnection.onFillable()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "1726c8778c0c1a2040d5aafeb265c59ad927e599",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.058325815783743434,
                "p_value": 1.145248231151738e-92,
                "effect_size": -0.014311186789079208,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1364978,
                    "after": 1349272
                }
            }
        },
        {
            "commit_message": "Removed reliance on exception to shutdown non persistent connections (#12213)\n\nMoved the shutdownOutput in HttpStreamOverHttp1 to before the continuation of handling\r\n",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public void org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded()",
            "method_name_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public void org.eclipse.jetty.server.internal.HttpConnection.succeeded()",
            "previous_method_pd": "public void org.eclipse.jetty.util.IteratingCallback.succeeded()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "1726c8778c0c1a2040d5aafeb265c59ad927e599",
            "performance_diff": -4.297140742225556,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 2234.051724137931,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1393678,
                    "after": 1350387
                }
            }
        }
    ],
    "aa21612006985bf3acf5ad7a0a6703830b4218c0": [
        {
            "commit_message": "Fixes #11282 - Deadlocks with DEBUG logging enabled in jetty-server testing.\n\nIntroduced AutoLock.tryLock() to use it in the toString() implementations that lock in order to retrieve a consistent state to produce the string.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.jmh.DateCacheSimpleDateFormatBenchmark.testDateCacheNow",
            "method_name_pd": "public void org.eclipse.jetty.util.thread.AutoLock.close()",
            "method_name_cc": "public void org.eclipse.jetty.util.thread.AutoLock.close()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/AutoLock.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.thread.AutoLock.close()",
            "previous_method_pd": "public void org.eclipse.jetty.util.thread.AutoLock.close()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/AutoLock.java",
            "previous_commit": "a2d86c7f674a831fcd6cf2c27961b95ab0bab417",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 14.925373134328357,
                "p_value": 0.0,
                "effect_size": -0.08202161642190015,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 667677,
                    "after": 656653
                }
            }
        }
    ],
    "930d91568a7012c3c7f04f2ab9de28336013916e": [
        {
            "commit_message": "Fixes #9121 - Flaky BlockedWritesWithSmallThreadPoolTest.testServerThreadsBlockedInWrites(). (#12178)\n\nThe test uncovered a larger problem detailed in the issue: the Handler Callback should be non-blocking.\r\n\r\nSince all implementations of HttpStream are non-blocking, overridden HttpStream.getInvocationType() to return NON_BLOCKING.\r\n\r\nThis guarantees that even in case of all server threads blocked, blocked/pending writes can be completed.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public org.eclipse.jetty.util.thread.Invocable$InvocationType org.eclipse.jetty.server.internal.HttpConnection.getInvocationType()",
            "method_name_cc": "public InvocationType org.eclipse.jetty.server.internal.HttpConnection.getInvocationType()",
            "file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_method_cc": "public InvocationType org.eclipse.jetty.server.internal.HttpConnection.getInvocationType()",
            "previous_method_pd": "public org.eclipse.jetty.util.thread.Invocable$InvocationType org.eclipse.jetty.server.internal.HttpConnection.getInvocationType()",
            "previous_file": "jetty-core/jetty-server/src/main/java/org/eclipse/jetty/server/internal/HttpConnection.java",
            "previous_commit": "21f2f2acea41c4aaea561a8da62308cf0da6d999",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 253.2587228439763,
                "p_value": 0.0,
                "effect_size": -1.0,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1322266,
                    "after": 1334422
                }
            }
        }
    ],
    "c25e1aa7ff0df0ca26662dab19ed3fe78de4adb8": [
        {
            "commit_message": "Fix PerfRegression by preparing field cache (#11517)\n\nFix #11513 by preparing the field cache",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "private boolean org.eclipse.jetty.http.HttpParser.quickStartRequestLine(java.nio.ByteBuffer)",
            "method_name_cc": "private boolean org.eclipse.jetty.http.HttpParser.quickStartRequestLine(ByteBuffer buffer)",
            "file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java",
            "previous_method_cc": "private boolean org.eclipse.jetty.http.HttpParser.quickStartRequestLine(ByteBuffer buffer)",
            "previous_method_pd": "private boolean org.eclipse.jetty.http.HttpParser.quickStartRequestLine(java.nio.ByteBuffer)",
            "previous_file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java",
            "previous_commit": "d07d13f30accba8424643713619b0ea2c0fbb418",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.05234231876472127,
                "p_value": 8.203822187387853e-35,
                "effect_size": 0.00865421321267211,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1336622,
                    "after": 1360447
                }
            }
        }
    ],
    "b7a7a53a18bd60c132d0a3e050bfa1125b924d42": [
        {
            "commit_message": "Jetty 10.0.x reformat (#3812)\n\n* Removing Legacy Method Separators\r\n* Restyling branch `jetty-9.4.x`\r\n* Applying changes highlighted by checkstyle\r\n* Removing Legacy Method Separators\r\n* Restyling branch `jetty-10.0.x`\r\n* Applying checkstyle changes\r\n* Applying checkstyle changes\r\n* Applying XML restyling\r\n* Restyling XML in branch `jetty-10.0.x`\r\n* Fixing XML codestyle for IntelliJ\r\n* Fixing XML style mistakes\r\n* Fixing XML restyling in branch `jetty-10.0.x`\r\n* Revert \"Applying XML restyling\"\r\n* Updating checkstyle for XML codestyle\r\n* Revert \"Restyling XML in branch `jetty-10.0.x`\"\r\n\r\n# Conflicts:\r\n#\tjetty-xml/src/test/resources/org/eclipse/jetty/xml/configureWithAttr.xml\r\n#\tjetty-xml/src/test/resources/org/eclipse/jetty/xml/configureWithElements.xml\r\n\r\n* Adding back build-resources\r\n* Reformatting pom.xml files\r\n* Disabling Checkstyle job\r\n* fixed empty string on line wrap\r\n* reformatted with latest intellij style\r\n* misc checkstyle fixes\r\n\r\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ThreadPoolBenchmark.testFew",
            "method_name_pd": "public static void org.eclipse.jetty.util.log.Log.initialized()",
            "method_name_cc": "public static void org.eclipse.jetty.util.log.Log.initialized()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/log/Log.java",
            "previous_method_cc": "public static void org.eclipse.jetty.util.log.Log.initialized()",
            "previous_method_pd": "public static void org.eclipse.jetty.util.log.Log.initialized()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/log/Log.java",
            "previous_commit": "804419bf89cdf05c2312c77cf009604949d9cd4f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -12.357926139021853,
                "p_value": 0.3808478181551693,
                "effect_size": 0.14930555555555555,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 24,
                    "after": 24
                }
            }
        },
        {
            "commit_message": "Jetty 10.0.x reformat (#3812)\n\n* Removing Legacy Method Separators\r\n* Restyling branch `jetty-9.4.x`\r\n* Applying changes highlighted by checkstyle\r\n* Removing Legacy Method Separators\r\n* Restyling branch `jetty-10.0.x`\r\n* Applying checkstyle changes\r\n* Applying checkstyle changes\r\n* Applying XML restyling\r\n* Restyling XML in branch `jetty-10.0.x`\r\n* Fixing XML codestyle for IntelliJ\r\n* Fixing XML style mistakes\r\n* Fixing XML restyling in branch `jetty-10.0.x`\r\n* Revert \"Applying XML restyling\"\r\n* Updating checkstyle for XML codestyle\r\n* Revert \"Restyling XML in branch `jetty-10.0.x`\"\r\n\r\n# Conflicts:\r\n#\tjetty-xml/src/test/resources/org/eclipse/jetty/xml/configureWithAttr.xml\r\n#\tjetty-xml/src/test/resources/org/eclipse/jetty/xml/configureWithElements.xml\r\n\r\n* Adding back build-resources\r\n* Reformatting pom.xml files\r\n* Disabling Checkstyle job\r\n* fixed empty string on line wrap\r\n* reformatted with latest intellij style\r\n* misc checkstyle fixes\r\n\r\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ThreadPoolBenchmark.testFew",
            "method_name_pd": "public boolean org.eclipse.jetty.util.component.AbstractLifeCycle.isRunning()",
            "method_name_cc": "public boolean org.eclipse.jetty.util.component.AbstractLifeCycle.isRunning()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_method_cc": "public boolean org.eclipse.jetty.util.component.AbstractLifeCycle.isRunning()",
            "previous_method_pd": "public boolean org.eclipse.jetty.util.component.AbstractLifeCycle.isRunning()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/component/AbstractLifeCycle.java",
            "previous_commit": "804419bf89cdf05c2312c77cf009604949d9cd4f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 29.015998925830672,
                "p_value": 0.9669147771731937,
                "effect_size": -0.013333333333333334,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 15,
                    "after": 15
                }
            }
        },
        {
            "commit_message": "Jetty 10.0.x reformat (#3812)\n\n* Removing Legacy Method Separators\r\n* Restyling branch `jetty-9.4.x`\r\n* Applying changes highlighted by checkstyle\r\n* Removing Legacy Method Separators\r\n* Restyling branch `jetty-10.0.x`\r\n* Applying checkstyle changes\r\n* Applying checkstyle changes\r\n* Applying XML restyling\r\n* Restyling XML in branch `jetty-10.0.x`\r\n* Fixing XML codestyle for IntelliJ\r\n* Fixing XML style mistakes\r\n* Fixing XML restyling in branch `jetty-10.0.x`\r\n* Revert \"Applying XML restyling\"\r\n* Updating checkstyle for XML codestyle\r\n* Revert \"Restyling XML in branch `jetty-10.0.x`\"\r\n\r\n# Conflicts:\r\n#\tjetty-xml/src/test/resources/org/eclipse/jetty/xml/configureWithAttr.xml\r\n#\tjetty-xml/src/test/resources/org/eclipse/jetty/xml/configureWithElements.xml\r\n\r\n* Adding back build-resources\r\n* Reformatting pom.xml files\r\n* Disabling Checkstyle job\r\n* fixed empty string on line wrap\r\n* reformatted with latest intellij style\r\n* misc checkstyle fixes\r\n\r\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public static void org.eclipse.jetty.util.thread.Invocable.invokeNonBlocking(java.lang.Runnable)",
            "method_name_cc": "public static void invokeNonBlocking(Runnable task)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/Invocable.java",
            "previous_method_cc": "public static void invokeNonBlocking(Runnable task)",
            "previous_method_pd": "public static void org.eclipse.jetty.util.thread.Invocable.invokeNonBlocking(java.lang.Runnable)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/Invocable.java",
            "previous_commit": "804419bf89cdf05c2312c77cf009604949d9cd4f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -0.803315269365636,
                "p_value": 0.0,
                "effect_size": 0.019384156254928543,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3778483,
                    "after": 3952719
                }
            }
        },
        {
            "commit_message": "Jetty 10.0.x reformat (#3812)\n\n* Removing Legacy Method Separators\r\n* Restyling branch `jetty-9.4.x`\r\n* Applying changes highlighted by checkstyle\r\n* Removing Legacy Method Separators\r\n* Restyling branch `jetty-10.0.x`\r\n* Applying checkstyle changes\r\n* Applying checkstyle changes\r\n* Applying XML restyling\r\n* Restyling XML in branch `jetty-10.0.x`\r\n* Fixing XML codestyle for IntelliJ\r\n* Fixing XML style mistakes\r\n* Fixing XML restyling in branch `jetty-10.0.x`\r\n* Revert \"Applying XML restyling\"\r\n* Updating checkstyle for XML codestyle\r\n* Revert \"Restyling XML in branch `jetty-10.0.x`\"\r\n\r\n# Conflicts:\r\n#\tjetty-xml/src/test/resources/org/eclipse/jetty/xml/configureWithAttr.xml\r\n#\tjetty-xml/src/test/resources/org/eclipse/jetty/xml/configureWithElements.xml\r\n\r\n* Adding back build-resources\r\n* Reformatting pom.xml files\r\n* Disabling Checkstyle job\r\n* fixed empty string on line wrap\r\n* reformatted with latest intellij style\r\n* misc checkstyle fixes\r\n\r\nSigned-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.EWYKBenchmark.testStrategy",
            "method_name_pd": "public static boolean org.eclipse.jetty.util.IO.delete(java.io.File)",
            "method_name_cc": "public static boolean org.eclipse.jetty.util.IO.delete(File file)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/IO.java",
            "previous_method_cc": "public static boolean org.eclipse.jetty.util.IO.delete(File file)",
            "previous_method_pd": "public static boolean org.eclipse.jetty.util.IO.delete(java.io.File)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/IO.java",
            "previous_commit": "804419bf89cdf05c2312c77cf009604949d9cd4f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 3.194149452540787,
                "p_value": 0.018123201466638324,
                "effect_size": -0.03734407122785913,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2672,
                    "after": 2668
                }
            }
        }
    ],
    "51120b1f0bda1a61e60079a8ab4d73d50700aa51": [
        {
            "commit_message": "Tries improvements (#5736)\n\n* ArrayTrie handles full alphabet\r\n* TreeTrie handles case sensitive\r\n* improved trie selection from Index builders\r\n* optimisations, cleanups and benchmarks.\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n",
            "benchmark": "org.eclipse.jetty.http.jmh.HttpMethodBenchmark.testTrieGetBest",
            "method_name_pd": "private static int org.eclipse.jetty.util.AbstractTrie.requiredCapacity(java.util.List,int,int,int)",
            "method_name_cc": "private static int org.eclipse.jetty.util.AbstractTrie<V>.requiredCapacity(List<String> keys, int offset, int length, int index)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/AbstractTrie.java",
            "previous_method_cc": "private static int org.eclipse.jetty.util.AbstractTrie<V>.requiredCapacity(List<String> keys, int offset, int length, int index)",
            "previous_method_pd": "private static int org.eclipse.jetty.util.AbstractTrie.requiredCapacity(java.util.List,int,int,int)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/AbstractTrie.java",
            "previous_commit": "480767a03bd3431be4a82355a6cfda0521849df5",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -52.39160533749628,
                "p_value": 1.2932888131849749e-13,
                "effect_size": 0.2542467266969181,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2064,
                    "after": 328
                }
            }
        }
    ],
    "af6ecfebfe077fed014125989a87864bd83b02dd": [
        {
            "commit_message": "Fixes #9210 - Jetty 12 - Review Pool and Pool.Entry (#9211)\n\n* Fixes #9210 - Jetty 12 - Review Pool and Pool.Entry\r\n\r\n* Extracted interface Pool, renamed implementation to ConcurrentPool.\r\n* Extracted Pool.Entry as interface.\r\n* Moved StrategyType to ConcurrentPool.\r\n* Made Pool.Factory.wrap() work in order to wrap Pool instances.\r\n* Removed constructors that were explicitly taking Pool parameters, replaced by a single Pool.Factory parameter.\r\n* Added javadocs.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "protected void org.eclipse.jetty.util.compression.CompressionPool.doStart() throws java.lang.Exception",
            "method_name_cc": "protected void org.eclipse.jetty.util.compression.CompressionPool<T>.doStart()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_method_cc": "protected void org.eclipse.jetty.util.compression.CompressionPool<T>.doStart()",
            "previous_method_pd": "protected void org.eclipse.jetty.util.compression.CompressionPool.doStart() throws java.lang.Exception",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_commit": "b0e50748c110119b7d104a984002708a007b0028",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 8.739603313721895,
                "p_value": 0.00152645825429425,
                "effect_size": -0.7878787878787878,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 11,
                    "after": 12
                }
            }
        },
        {
            "commit_message": "Fixes #9210 - Jetty 12 - Review Pool and Pool.Entry (#9211)\n\n* Fixes #9210 - Jetty 12 - Review Pool and Pool.Entry\r\n\r\n* Extracted interface Pool, renamed implementation to ConcurrentPool.\r\n* Extracted Pool.Entry as interface.\r\n* Moved StrategyType to ConcurrentPool.\r\n* Made Pool.Factory.wrap() work in order to wrap Pool instances.\r\n* Removed constructors that were explicitly taking Pool parameters, replaced by a single Pool.Factory parameter.\r\n* Added javadocs.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.compression.CompressionPool$Entry org.eclipse.jetty.util.compression.CompressionPool.acquire()",
            "method_name_cc": "public Entry org.eclipse.jetty.util.compression.CompressionPool<T>.acquire()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_method_cc": "public Entry org.eclipse.jetty.util.compression.CompressionPool<T>.acquire()",
            "previous_method_pd": "public org.eclipse.jetty.util.compression.CompressionPool$Entry org.eclipse.jetty.util.compression.CompressionPool.acquire()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_commit": "b0e50748c110119b7d104a984002708a007b0028",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.1476264997391759,
                "p_value": 9.0096424737602e-262,
                "effect_size": 0.008792310766615104,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 10172743,
                    "after": 10435100
                }
            }
        },
        {
            "commit_message": "Fixes #9210 - Jetty 12 - Review Pool and Pool.Entry (#9211)\n\n* Fixes #9210 - Jetty 12 - Review Pool and Pool.Entry\r\n\r\n* Extracted interface Pool, renamed implementation to ConcurrentPool.\r\n* Extracted Pool.Entry as interface.\r\n* Moved StrategyType to ConcurrentPool.\r\n* Made Pool.Factory.wrap() work in order to wrap Pool instances.\r\n* Removed constructors that were explicitly taking Pool parameters, replaced by a single Pool.Factory parameter.\r\n* Added javadocs.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public void org.eclipse.jetty.util.compression.CompressionPool.doStop() throws java.lang.Exception",
            "method_name_cc": "public void org.eclipse.jetty.util.compression.CompressionPool<T>.doStop()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_method_cc": "public void org.eclipse.jetty.util.compression.CompressionPool<T>.doStop()",
            "previous_method_pd": "public void org.eclipse.jetty.util.compression.CompressionPool.doStop() throws java.lang.Exception",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/compression/CompressionPool.java",
            "previous_commit": "b0e50748c110119b7d104a984002708a007b0028",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 16.497866820856082,
                "p_value": 0.0018399329318952156,
                "effect_size": -0.8383838383838383,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 9,
                    "after": 11
                }
            }
        }
    ],
    "51fc906d378a04aeeb5a4a881069b2a466ed4e08": [
        {
            "commit_message": "Optimized ReservedThreadExecutor with ThreadIdPool (#11498)\n\n * Introduced ThreadIdPool and replaced ThreadLocal with it\r\n * Modified ReservedThreadExecutor to be backed by a ThreadIdPool of semaphores\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: gregw <gregw@webtide.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public static java.lang.String org.eclipse.jetty.http.DateGenerator.formatDate(long)",
            "method_name_cc": "public static String org.eclipse.jetty.http.DateGenerator.formatDate(long date)",
            "file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/DateGenerator.java",
            "previous_method_cc": "public static String org.eclipse.jetty.http.DateGenerator.formatDate(long date)",
            "previous_method_pd": "public static java.lang.String org.eclipse.jetty.http.DateGenerator.formatDate(long)",
            "previous_file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/DateGenerator.java",
            "previous_commit": "3d49cd3b3c70aabfcca77949f138e58a01bb36c4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 16.650563008658814,
                "p_value": 1.7828914548920735e-24,
                "effect_size": -0.3543554404313898,
                "effect_size_interpretation": "medium",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 555,
                    "after": 553
                }
            }
        },
        {
            "commit_message": "Optimized ReservedThreadExecutor with ThreadIdPool (#11498)\n\n * Introduced ThreadIdPool and replaced ThreadLocal with it\r\n * Modified ReservedThreadExecutor to be backed by a ThreadIdPool of semaphores\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: gregw <gregw@webtide.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.ReservedThreadExecutor.startReservedThread()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "3d49cd3b3c70aabfcca77949f138e58a01bb36c4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -16.975932585704253,
                "p_value": 0.012520204700772355,
                "effect_size": 0.2551921699689663,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 71,
                    "after": 59
                }
            }
        },
        {
            "commit_message": "Optimized ReservedThreadExecutor with ThreadIdPool (#11498)\n\n * Introduced ThreadIdPool and replaced ThreadLocal with it\r\n * Modified ReservedThreadExecutor to be backed by a ThreadIdPool of semaphores\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: gregw <gregw@webtide.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public boolean org.eclipse.jetty.util.thread.ReservedThreadExecutor.tryExecute(java.lang.Runnable)",
            "method_name_cc": "public boolean org.eclipse.jetty.util.thread.ReservedThreadExecutor.tryExecute(Runnable task)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_method_cc": "public boolean org.eclipse.jetty.util.thread.ReservedThreadExecutor.tryExecute(Runnable task)",
            "previous_method_pd": "public boolean org.eclipse.jetty.util.thread.ReservedThreadExecutor.tryExecute(java.lang.Runnable)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/ReservedThreadExecutor.java",
            "previous_commit": "3d49cd3b3c70aabfcca77949f138e58a01bb36c4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.04628986714808128,
                "p_value": 9.366931957028496e-05,
                "effect_size": 0.0026741067543454016,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1419510,
                    "after": 1425894
                }
            }
        },
        {
            "commit_message": "Optimized ReservedThreadExecutor with ThreadIdPool (#11498)\n\n * Introduced ThreadIdPool and replaced ThreadLocal with it\r\n * Modified ReservedThreadExecutor to be backed by a ThreadIdPool of semaphores\r\n\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: gregw <gregw@webtide.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "private int org.eclipse.jetty.util.ConcurrentPool.startIndex(int)",
            "method_name_cc": "private int org.eclipse.jetty.util.ConcurrentPool<P>.startIndex(int size)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_method_cc": "private int org.eclipse.jetty.util.ConcurrentPool<P>.startIndex(int size)",
            "previous_method_pd": "private int org.eclipse.jetty.util.ConcurrentPool.startIndex(int)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_commit": "3d49cd3b3c70aabfcca77949f138e58a01bb36c4",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.7520391517128875,
                "p_value": 3.4298755963308885e-300,
                "effect_size": 0.014392452087870735,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4408354,
                    "after": 4419129
                }
            }
        }
    ],
    "0ac34ff2b8a73d6d2f99bd8751ffac34791d78f3": [
        {
            "commit_message": "Issue #5304 HTTP2 HostHeader (#5307)\n\n* Issue #5304 HTTP2 HostHeader\r\n\r\nUpdated HostHeaderCustomizer to actually add the Host header, either from values passed in the custructor or from the getServerName and getServerPort methods.\r\n\r\nThe HttpURI is no longer updated.\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + Found and fixed bug in HttpFields\r\n + Added port normalization support to HttpScheme\r\n + added test\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* blank line\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + refixed bug in HttpFields\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + still fixing HttpFields bug\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 Host Header\r\n\r\nupdates from review",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "public boolean org.eclipse.jetty.client.HttpClient.isDefaultPort(java.lang.String,int)",
            "method_name_cc": "public boolean org.eclipse.jetty.client.HttpClient.isDefaultPort(String scheme, int port)",
            "file": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpClient.java",
            "previous_method_cc": "public boolean org.eclipse.jetty.client.HttpClient.isDefaultPort(String scheme, int port)",
            "previous_method_pd": "public boolean org.eclipse.jetty.client.HttpClient.isDefaultPort(java.lang.String,int)",
            "previous_file": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpClient.java",
            "previous_commit": "5a00eba2dd764f789dac13cb194914d9566953f1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 8.488871087519154,
                "p_value": 0.02907155995483803,
                "effect_size": -0.4897959183673469,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 14,
                    "after": 14
                }
            }
        },
        {
            "commit_message": "Issue #5304 HTTP2 HostHeader (#5307)\n\n* Issue #5304 HTTP2 HostHeader\r\n\r\nUpdated HostHeaderCustomizer to actually add the Host header, either from values passed in the custructor or from the getServerName and getServerPort methods.\r\n\r\nThe HttpURI is no longer updated.\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + Found and fixed bug in HttpFields\r\n + Added port normalization support to HttpScheme\r\n + added test\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* blank line\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + refixed bug in HttpFields\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + still fixing HttpFields bug\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 Host Header\r\n\r\nupdates from review",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "public boolean org.eclipse.jetty.http.HttpScheme.is(java.lang.String)",
            "method_name_cc": "public boolean is(String s)",
            "file": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpScheme.java",
            "previous_method_cc": "public boolean is(String s)",
            "previous_method_pd": "public boolean org.eclipse.jetty.http.HttpScheme.is(java.lang.String)",
            "previous_file": "jetty-http/src/main/java/org/eclipse/jetty/http/HttpScheme.java",
            "previous_commit": "5a00eba2dd764f789dac13cb194914d9566953f1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 33.35692050301011,
                "p_value": 0.07025348002264603,
                "effect_size": -0.23555555555555555,
                "effect_size_interpretation": "small",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 60,
                    "after": 30
                }
            }
        },
        {
            "commit_message": "Issue #5304 HTTP2 HostHeader (#5307)\n\n* Issue #5304 HTTP2 HostHeader\r\n\r\nUpdated HostHeaderCustomizer to actually add the Host header, either from values passed in the custructor or from the getServerName and getServerPort methods.\r\n\r\nThe HttpURI is no longer updated.\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + Found and fixed bug in HttpFields\r\n + Added port normalization support to HttpScheme\r\n + added test\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* blank line\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + refixed bug in HttpFields\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 HostHeader\r\n\r\n + still fixing HttpFields bug\r\n\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\n\r\n* Issue #5304 HTTP2 Host Header\r\n\r\nupdates from review",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "public static int org.eclipse.jetty.client.HttpClient.normalizePort(java.lang.String,int)",
            "method_name_cc": "public static int org.eclipse.jetty.client.HttpClient.normalizePort(String scheme, int port)",
            "file": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpClient.java",
            "previous_method_cc": "public static int org.eclipse.jetty.client.HttpClient.normalizePort(String scheme, int port)",
            "previous_method_pd": "public static int org.eclipse.jetty.client.HttpClient.normalizePort(java.lang.String,int)",
            "previous_file": "jetty-client/src/main/java/org/eclipse/jetty/client/HttpClient.java",
            "previous_commit": "5a00eba2dd764f789dac13cb194914d9566953f1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.8391357648509414,
                "p_value": 0.5268434347302196,
                "effect_size": 0.14285714285714285,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 15,
                    "after": 14
                }
            }
        }
    ],
    "7e88b8234cd30552fe4f7cd6d6eaeef4d7459517": [
        {
            "commit_message": "Experiment with lock free AdaptiveExecutionStrategy (#8762)\n\nRemoved the lock from the AdaptiveExecutionStrategy in favour of a BiInteger.",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(java.lang.Runnable,boolean)",
            "method_name_cc": "private SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(Runnable task, boolean nonBlocking)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(Runnable task, boolean nonBlocking)",
            "previous_method_pd": "private org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(java.lang.Runnable,boolean)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "4e32557616d101651dc45e520ed43dee8742bc82",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 2.4691358024691357,
                "p_value": 2.618174099058041e-198,
                "effect_size": 0.011255855336342118,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4721825,
                    "after": 4777904
                }
            }
        },
        {
            "commit_message": "Experiment with lock free AdaptiveExecutionStrategy (#8762)\n\nRemoved the lock from the AdaptiveExecutionStrategy in favour of a BiInteger.",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private boolean org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(java.lang.Runnable,org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy)",
            "method_name_cc": "private boolean org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(Runnable task, SubStrategy subStrategy)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private boolean org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(Runnable task, SubStrategy subStrategy)",
            "previous_method_pd": "private boolean org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(java.lang.Runnable,org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "4e32557616d101651dc45e520ed43dee8742bc82",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.7911392405063291,
                "p_value": 0.0,
                "effect_size": -0.017933842205168787,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3639959,
                    "after": 3576650
                }
            }
        },
        {
            "commit_message": "Experiment with lock free AdaptiveExecutionStrategy (#8762)\n\nRemoved the lock from the AdaptiveExecutionStrategy in favour of a BiInteger.",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(boolean)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(boolean wasPending)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(boolean wasPending)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(boolean)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "4e32557616d101651dc45e520ed43dee8742bc82",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -2.798249016457029,
                "p_value": 0.0,
                "effect_size": 0.030052258324135307,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 3933223,
                    "after": 3881628
                }
            }
        }
    ],
    "6f0623f48d7524fe615f9025b51d8353922c6db5": [
        {
            "commit_message": "Fixes #8007 - Support Loom. (#8465)\n\nNow using Executors.newVirtualThreadPerTaskExecutor() to execute\r\ntasks, so the executor is tracked by the runtime for thread dumps, etc.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(java.lang.Runnable)",
            "method_name_cc": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(Runnable task)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(Runnable task)",
            "previous_method_pd": "private void org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.execute(java.lang.Runnable)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "32e081566e9bf4a81d94571267794cbb2bc2d420",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.4932680538555692,
                "p_value": 0.0,
                "effect_size": 0.029096539449497583,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1631283,
                    "after": 1737648
                }
            }
        }
    ],
    "8b1c6bcd06237bc0175b085d9a66acd946844334": [
        {
            "commit_message": "Issue #11659 - Properly ignore OWS before field values. (#11661)\n\n* implemented changes to CACHE and parseFields to handle OWS properly for all UNMATCHED_VALUE headers.\r\n* added 3 new OWS test cases (that fail in 12.0.x HEAD btw) to handle this OWS case.",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "protected boolean org.eclipse.jetty.http.HttpParser.parseFields(java.nio.ByteBuffer)",
            "method_name_cc": "protected boolean parseFields(ByteBuffer buffer)",
            "file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java",
            "previous_method_cc": "protected boolean parseFields(ByteBuffer buffer)",
            "previous_method_pd": "protected boolean org.eclipse.jetty.http.HttpParser.parseFields(java.nio.ByteBuffer)",
            "previous_file": "jetty-core/jetty-http/src/main/java/org/eclipse/jetty/http/HttpParser.java",
            "previous_commit": "6d37ce1e9a596e0ed29aa0b418e1af634dde5a80",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -1.7778665601278467,
                "p_value": 0.0,
                "effect_size": 0.03418790781432795,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 2504694,
                    "after": 2515568
                }
            }
        }
    ],
    "7275bf15a9094c85df484aa88fce44a3a1bb3de5": [
        {
            "commit_message": "Jetty 12.0.x core security (#9405)\n\ncore security module\r\n\r\nSigned-off-by: Lachlan Roberts <lachlan@webtide.com>\r\nSigned-off-by: gregw <gregw@webtide.com>\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nCo-authored-by: Lachlan Roberts <lachlan@webtide.com>\r\nCo-authored-by: Jan Bartel <janb@webtide.com>\r\nCo-authored-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public static void org.eclipse.jetty.util.IO.close(java.io.Closeable)",
            "method_name_cc": "public static void org.eclipse.jetty.util.IO.close(Closeable closeable)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/IO.java",
            "previous_method_cc": "public static void org.eclipse.jetty.util.IO.close(Closeable closeable)",
            "previous_method_pd": "public static void org.eclipse.jetty.util.IO.close(java.io.Closeable)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/IO.java",
            "previous_commit": "379de19e5ccb589f3afdf0cff1097f04274ce08f",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 149.26359662356072,
                "p_value": 3.0157452869086354e-12,
                "effect_size": -0.9567901234567902,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 36,
                    "after": 36
                }
            }
        }
    ],
    "1726c8778c0c1a2040d5aafeb265c59ad927e599": [
        {
            "commit_message": "Fixes HttpClient Content.Source reads from arbitrary threads (#12203)\n\n* Reworked HttpReceiverOverHTTP state machine, in particular:\r\n** Introduced a boolean parameter to parseAndFill() and parse(), that specifies whether to notify the application demand callback.\r\n   This is necessary because reads may happen from any threads, and must not notify the application demand callback.\r\n   Only when there is no data, and fill interest is set, then the application demand callback must be notified.\r\n** Removed action field to avoid lambda allocation.\r\n** Now the application is called directly from the parse() method.\r\n** Reading -1 from the network drives the parser by calling again parse(), rather than the parser directly.\r\n  This allows to have a central place to notify the response success event.\r\n\r\n* Fixed FastCGI similarly to HTTP/1.1.\r\n* Removed leftover of the multiplex implementation.\r\n\r\n* Fixed test flakyness in `NetworkTrafficListenerTest`: consume the request content before sending the response.\r\n\r\n* Follow up after #10880: only abort the request if there is request content in `AuthenticationProtocolHandler` and `RedirectProtocolHandler`.\r\n  This avoids the rare case where the response arrives before the request thread has modified the request state, even if the request has been fully sent over the network, causing the request to be failed even if it should not.\r\n\r\n* added `SerializedInvoker` assertions about current thread invoking.\r\n* Name all SerializedInvoker instances for better troubleshooting.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>",
            "benchmark": "org.eclipse.jetty.server.jmh.ServerConnectorAcceptBenchmark.accept",
            "method_name_pd": "public java.lang.Runnable org.eclipse.jetty.util.thread.SerializedInvoker.offer(java.lang.Runnable)",
            "method_name_cc": "public Runnable org.eclipse.jetty.util.thread.SerializedInvoker.offer(Runnable task)",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/SerializedInvoker.java",
            "previous_method_cc": "public Runnable org.eclipse.jetty.util.thread.SerializedInvoker.offer(Runnable task)",
            "previous_method_pd": "public java.lang.Runnable org.eclipse.jetty.util.thread.SerializedInvoker.offer(java.lang.Runnable)",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/thread/SerializedInvoker.java",
            "previous_commit": "fb82a44bc639c865926075ed4ce4e22fee8fd8bd",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "improvement",
                "median_change_percentage": -58.24168409688954,
                "p_value": 0.0,
                "effect_size": 0.9857822629405413,
                "effect_size_interpretation": "large",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 1449342,
                    "after": 1185676
                }
            }
        }
    ],
    "e2690cc420ccc47a8c42be2a7e46634cb4449970": [
        {
            "commit_message": "Fixes #6603 - HTTP/2 max local stream count exceeded (#6639) (#6682)\n\n* Fixes #6603 - HTTP/2 max local stream count exceeded (#6639)\r\n\r\nMade MAX_CONCURRENT_STREAMS setting work on a per-connection basis.\r\nUpdated Pool javadocs.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\nCo-authored-by: Greg Wilkins <gregw@webtide.com>\r\n(cherry picked from commit 525fcb31194c62c44c912504ded177e30ff78c52)",
            "benchmark": "org.eclipse.jetty.client.jmh.ConnectionPoolsBenchmark.testPool",
            "method_name_pd": "public final void org.eclipse.jetty.util.Pool.setMaxMultiplex(int)",
            "method_name_cc": "public final void org.eclipse.jetty.util.Pool<T>.setMaxMultiplex(int maxMultiplex)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_method_cc": "public final void org.eclipse.jetty.util.Pool<T>.setMaxMultiplex(int maxMultiplex)",
            "previous_method_pd": "public final void org.eclipse.jetty.util.Pool.setMaxMultiplex(int)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_commit": "f129770f4eba6d54ff8ca1d3263f1dc5426b5835",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -12.400465902427392,
                "p_value": 0.093437310855915,
                "effect_size": 0.3888888888888889,
                "effect_size_interpretation": "medium",
                "statistically_significant": 0,
                "sample_size": {
                    "before": 9,
                    "after": 24
                }
            }
        },
        {
            "commit_message": "Fixes #6603 - HTTP/2 max local stream count exceeded (#6639) (#6682)\n\n* Fixes #6603 - HTTP/2 max local stream count exceeded (#6639)\r\n\r\nMade MAX_CONCURRENT_STREAMS setting work on a per-connection basis.\r\nUpdated Pool javadocs.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nSigned-off-by: Greg Wilkins <gregw@webtide.com>\r\nCo-authored-by: Greg Wilkins <gregw@webtide.com>\r\n(cherry picked from commit 525fcb31194c62c44c912504ded177e30ff78c52)",
            "benchmark": "org.eclipse.jetty.util.PoolStrategyBenchmark.testAcquireReleasePoolWithStrategy",
            "method_name_pd": "public int org.eclipse.jetty.util.Pool.getMaxMultiplex()",
            "method_name_cc": "public int org.eclipse.jetty.util.Pool<T>.getMaxMultiplex()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_method_cc": "public int org.eclipse.jetty.util.Pool<T>.getMaxMultiplex()",
            "previous_method_pd": "public int org.eclipse.jetty.util.Pool.getMaxMultiplex()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/Pool.java",
            "previous_commit": "f129770f4eba6d54ff8ca1d3263f1dc5426b5835",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -18.234824904410555,
                "p_value": 0.005728176340367952,
                "effect_size": 0.11010160439908578,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 413,
                    "after": 428
                }
            }
        }
    ],
    "d02406c1640ba47647775946f59893f9a2453116": [
        {
            "commit_message": "Fixes #11371 - Review ArrayByteBufferPool eviction. (#11400)\n\n* Fixes #11371 - Review ArrayByteBufferPool eviction.\r\n\r\n* Eviction is now performed on release(), rather than acquire().\r\n* Memory accounting is done on release(), rather than acquire().\r\nThis is because we were always exceeding the memory usage on acquire(), by returning a non-pooled buffer.\r\nWe only need to account for what is idle in the pool, and that is done more efficiently on release(), and it is leak-resistant (i.e. if the buffer is not returned, the memory is already non accounted for, keeping the pool consistent).\r\n* Released entries now give precedence to Concurrent.Entry, rather than Queued.Entry, so the queued pool is always kept at minimum size.\r\n* Changed eviction algorithm to be simpler: one pass through the buckets excluding the current, trying to remove idle buffers until enough memory is recovered.\r\nIf successful, the buffer being released is pooled, otherwise it is also discarded.\r\n* Added detailed statistics to ArrayByteBufferPool.RetainedBuckets.\r\n* Added statisticsEnabled property in Jetty module bytebufferpool.mod.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>",
            "benchmark": "org.eclipse.jetty.server.jmh.DeflaterPoolBenchmark.testPool",
            "method_name_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.ConcurrentPool.acquire()",
            "method_name_cc": "public Entry<P> org.eclipse.jetty.util.ConcurrentPool<P>.acquire()",
            "file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_method_cc": "public Entry<P> org.eclipse.jetty.util.ConcurrentPool<P>.acquire()",
            "previous_method_pd": "public org.eclipse.jetty.util.Pool$Entry org.eclipse.jetty.util.ConcurrentPool.acquire()",
            "previous_file": "jetty-core/jetty-util/src/main/java/org/eclipse/jetty/util/ConcurrentPool.java",
            "previous_commit": "624ee584bd9439f123d0fc0af60aaf9e54b72997",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": -3.487766788131182,
                "p_value": 0.0,
                "effect_size": 0.034263965493197726,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 5452233,
                    "after": 7930163
                }
            }
        }
    ],
    "9e16d81cf8922c75e3d2d96c66442b896a9c69e1": [
        {
            "commit_message": "Improvements on suggested PR.\n\n* Made HttpChannel Dispatchable fields for REQUEST and ASYNC dispatches.\n* Made AdaptiveExecutionStrategy implement Runnable to remove lambda/anonymous field.\n\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\n",
            "benchmark": "org.eclipse.jetty.util.thread.strategy.jmh.AdaptiveExecutionStrategyBenchmark.testStrategy",
            "method_name_pd": "private org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(java.lang.Runnable,boolean)",
            "method_name_cc": "private SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(Runnable task, boolean nonBlocking)",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_method_cc": "private SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(Runnable task, boolean nonBlocking)",
            "previous_method_pd": "private org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy$SubStrategy org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.selectSubStrategy(java.lang.Runnable,boolean)",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/strategy/AdaptiveExecutionStrategy.java",
            "previous_commit": "5db0c7b5522fcee34a0d14eac2a12a9a67687da1",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "unchanged",
                "median_change_percentage": 0.04944620253164557,
                "p_value": 0.0008851707189973928,
                "effect_size": -0.001326622269638675,
                "effect_size_interpretation": "negligible",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 4193614,
                    "after": 4180665
                }
            }
        }
    ],
    "278ec1be69ab5380d53dd93e6b4579b5be49900c": [
        {
            "commit_message": "Fixes #9237 - Decouple QTP idleTimeout from pool shrink rate. (#9498)\n\nIntroduced `QueuedThreadPool.maxEvictCount` to be the number of idle threads that are evicted in one idle timeout.\r\n\r\nWhen set to 1 (the default), the old behavior is reproduced: expiring 1 thread every idle timeout.\r\nWhen set to larger values, allows to keep around the threads for the idle timeout (in case of further load spikes), but allows to quickly recover OS memory when they are truly idle.\r\n\r\nFor example, with 2000 threads, 30 seconds idle timeout and idleTimeoutMaxShrinkCount=1, it will take 995 minutes (about 16.5 hrs) to shrink the pool back to 10 threads.\r\nBy setting idleTimeoutMaxShrinkCount=100, the thread pool can be shrunk to 10 threads in about 10 minutes.\r\n\r\nNote also that the new algorithm is more aggressive at shrinking the thread pool.\r\nPreviously, a small load might have been sufficient to never evict any thread, because all threads could take turns at executing jobs so that threads were mostly idle but would never really idle time out.\r\nThe new algorithm is more aggressive even in presence of a small load, so that if `minThreads` are sufficient to cope with the small load, then the other threads are evicted.\r\n\r\nSigned-off-by: Simone Bordet <simone.bordet@gmail.com>\r\nSigned-off-by: gregw <gregw@webtide.com>\r\nSigned-off-by: Ludovic Orban <lorban@bitronix.be>\r\nCo-authored-by: gregw <gregw@webtide.com>\r\nCo-authored-by: Ludovic Orban <lorban@bitronix.be>",
            "benchmark": "org.eclipse.jetty.util.thread.jmh.ThreadPoolBenchmark.testSome",
            "method_name_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.startThread()",
            "method_name_cc": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.startThread()",
            "file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java",
            "previous_method_cc": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.startThread()",
            "previous_method_pd": "protected void org.eclipse.jetty.util.thread.QueuedThreadPool.startThread()",
            "previous_file": "jetty-util/src/main/java/org/eclipse/jetty/util/thread/QueuedThreadPool.java",
            "previous_commit": "fe11b94da8c9d2e1983316707d478b886dbd06b8",
            "performance_diff": -0.0,
            "significance": {
                "change_type": "regression",
                "median_change_percentage": 6.792618967505846,
                "p_value": 1.100710509783429e-08,
                "effect_size": -0.19441251692492853,
                "effect_size_interpretation": "small",
                "statistically_significant": 1,
                "sample_size": {
                    "before": 578,
                    "after": 575
                }
            }
        }
    ]
}